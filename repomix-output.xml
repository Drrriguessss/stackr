This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
.repomixignore
eslint.config.mjs
next.config.js
next.config.ts
package.json
postcss.config.mjs
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
src/app/globals.css
src/app/layout.tsx
src/app/page.tsx
src/components/BookDetailModal.tsx
src/components/BottomNavigation.tsx
src/components/CategoryTabs.tsx
src/components/ContentCard.tsx
src/components/ContentSection.tsx
src/components/DiscoverPage.tsx
src/components/GameCardHorizontal.tsx
src/components/GameDetailModal.tsx
src/components/Header.tsx
src/components/LibrarySection.tsx
src/components/MovieDetailModal.tsx
src/components/MusicDetailModal.tsx
src/components/RoadmapPage.tsx
src/components/SearchModal.tsx
src/components/WelcomePopup.tsx
src/data/sampleContent.ts
src/lib/supabase.ts
src/services/googleBooksService.ts
src/services/libraryService.ts
src/services/musicService.ts
src/services/omdbService.ts
src/services/rawgService.ts
src/tailwind.config.js
src/types/index.ts
src/utils/idNormalizer.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="public/file.svg">
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>
</file>

<file path="public/globe.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>
</file>

<file path="public/next.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
</file>

<file path="public/vercel.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>
</file>

<file path="public/window.svg">
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>
</file>

<file path="src/tailwind.config.js">
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',
    './src/components/**/*.{js,ts,jsx,tsx,mdx}',
    './src/app/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
    extend: {
      colors: {
        gray: {
          950: '#0a0a0a',
          900: '#1a1a1a',
          850: '#1f1f1f',
          800: '#2a2a2a',
          750: '#333333',
          700: '#404040',
        },
        blue: {
          600: '#667eea',
          700: '#5a67d8',
        }
      },
    },
  },
  plugins: [],
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*
.env.local
.env.development.local
.env.test.local
.env.production.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path=".repomixignore">
node_modules/
.next/
.env*
*.log
.git/
.vercel/
</file>

<file path="next.config.js">
/** @type {import('next').NextConfig} */
const nextConfig = {
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
}

module.exports = nextConfig
</file>

<file path="src/components/WelcomePopup.tsx">
'use client'
import { X, Search, Library, Sparkles, Gamepad2, Film, Music, BookOpen } from 'lucide-react'

interface WelcomePopupProps {
  isOpen: boolean
  onClose: () => void
  onOpenSearch: () => void
  onScanLibrary?: () => void
}

export default function WelcomePopup({ 
  isOpen, 
  onClose, 
  onOpenSearch,
  onScanLibrary 
}: WelcomePopupProps) {
  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black/20 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-gradient-to-br from-blue-600 to-purple-700 rounded-2xl w-full max-w-md shadow-2xl border border-white/20 overflow-hidden">
        {/* Close Button */}
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-white/80 hover:text-white z-10 p-2 hover:bg-white/10 rounded-full transition-colors"
        >
          <X size={20} />
        </button>

        {/* Content */}
        <div className="p-8 text-white">
          {/* Header with Icons */}
          <div className="text-center mb-6">
            <div className="flex justify-center items-center space-x-2 mb-4">
              <Sparkles className="text-yellow-300" size={24} />
              <h1 className="text-2xl font-bold">Welcome to Stackr!</h1>
              <Sparkles className="text-yellow-300" size={24} />
            </div>
            
            {/* Entertainment Icons */}
            <div className="flex justify-center space-x-4 mb-4 opacity-80">
              <Gamepad2 size={20} className="text-green-300" />
              <Film size={20} className="text-blue-300" />
              <Music size={20} className="text-purple-300" />
              <BookOpen size={20} className="text-orange-300" />
            </div>
          </div>

          {/* Description */}
          <div className="space-y-4 text-center text-white/90">
            <p className="text-lg leading-relaxed">
              Track all your entertainment in one place! Games, movies, music, and books.
            </p>
            
            <p className="text-sm leading-relaxed opacity-90">
              Content you rate, review, or add to your library will automatically be saved here.
            </p>
            
            <p className="text-sm leading-relaxed opacity-90">
              Let's get you started by adding items to your collection.
            </p>
          </div>

          {/* Action Buttons */}
          <div className="space-y-3 mt-8">
            <button
              onClick={() => {
                onOpenSearch()
                onClose()
              }}
              className="w-full bg-white hover:bg-gray-100 text-gray-900 py-3 px-6 rounded-xl font-semibold transition-all duration-200 flex items-center justify-center space-x-2 shadow-lg hover:shadow-xl"
            >
              <Search size={18} />
              <span>Search & Add Content</span>
            </button>
            
            {onScanLibrary && (
              <button
                onClick={() => {
                  onScanLibrary()
                  onClose()
                }}
                className="w-full bg-white/10 hover:bg-white/20 backdrop-blur-sm text-white py-3 px-6 rounded-xl font-semibold transition-all duration-200 flex items-center justify-center space-x-2 border border-white/20"
              >
                <Library size={18} />
                <span>Import from Other Apps</span>
              </button>
            )}
            
            <button
              onClick={onClose}
              className="w-full text-white/80 hover:text-white py-2 px-6 rounded-xl font-medium transition-colors text-sm"
            >
              I'll explore on my own
            </button>
          </div>

          {/* Bottom Tip */}
          <div className="mt-6 p-4 bg-white/10 backdrop-blur-sm rounded-xl border border-white/20">
            <div className="flex items-start space-x-3">
              <Sparkles size={16} className="text-yellow-300 mt-0.5 flex-shrink-0" />
              <p className="text-xs text-white/90 leading-relaxed">
                <span className="font-semibold">Pro tip:</span> Use the search to find and add your favorite games, movies, albums, and books. You can track what you want to experience, what you're currently enjoying, and what you've completed!
              </p>
            </div>
          </div>
        </div>

        {/* Decorative Bottom Bar */}
        <div className="h-2 bg-gradient-to-r from-yellow-400 via-pink-400 to-purple-400"></div>
      </div>
    </div>
  )
}
</file>

<file path="src/services/googleBooksService.ts">
// Service pour l'API Google Books
export interface GoogleBook {
  id: string
  volumeInfo: {
    title: string
    authors?: string[]
    publishedDate?: string
    description?: string
    industryIdentifiers?: { type: string, identifier: string }[]
    pageCount?: number
    categories?: string[]
    averageRating?: number
    ratingsCount?: number
    maturityRating?: string
    imageLinks?: {
      smallThumbnail?: string
      thumbnail?: string
      small?: string
      medium?: string
      large?: string
      extraLarge?: string
    }
    language?: string
    previewLink?: string
    infoLink?: string
    canonicalVolumeLink?: string
    publisher?: string
    subtitle?: string
  }
  saleInfo?: {
    country?: string
    saleability?: string
    isEbook?: boolean
    listPrice?: { amount: number, currencyCode: string }
    retailPrice?: { amount: number, currencyCode: string }
    buyLink?: string
  }
  accessInfo?: {
    country?: string
    viewability?: string
    embeddable?: boolean
    publicDomain?: boolean
    textToSpeechPermission?: string
    epub?: { isAvailable: boolean, acsTokenLink?: string }
    pdf?: { isAvailable: boolean, acsTokenLink?: string }
    webReaderLink?: string
    accessViewStatus?: string
    quoteSharingAllowed?: boolean
  }
}

export interface GoogleBooksSearchResponse {
  kind: string
  totalItems: number
  items?: GoogleBook[]
}

class GoogleBooksService {
  private readonly baseURL = 'https://www.googleapis.com/books/v1/volumes'
  
  // Rechercher des livres
  async searchBooks(query: string, maxResults: number = 20): Promise<GoogleBook[]> {
    try {
      const response = await fetch(
        `${this.baseURL}?q=${encodeURIComponent(query)}&maxResults=${maxResults}&printType=books&orderBy=relevance`
      )
      
      if (!response.ok) {
        throw new Error(`Google Books API Error: ${response.status}`)
      }
      
      const data: GoogleBooksSearchResponse = await response.json()
      return data.items || []
    } catch (error) {
      console.error('Error searching books:', error)
      throw error
    }
  }

  // Obtenir les détails d'un livre
  async getBookDetails(bookId: string): Promise<GoogleBook | null> {
    try {
      const response = await fetch(
        `${this.baseURL}/${bookId}`
      )
      
      if (!response.ok) {
        throw new Error(`Google Books API Error: ${response.status}`)
      }
      
      const book: GoogleBook = await response.json()
      return book
    } catch (error) {
      console.error('Error fetching book details:', error)
      return null
    }
  }

  // Obtenir des livres populaires par catégorie
  async getBooksByCategory(category: string, maxResults: number = 20): Promise<GoogleBook[]> {
    try {
      const response = await fetch(
        `${this.baseURL}?q=subject:${encodeURIComponent(category)}&maxResults=${maxResults}&printType=books&orderBy=relevance`
      )
      
      if (!response.ok) {
        throw new Error(`Google Books API Error: ${response.status}`)
      }
      
      const data: GoogleBooksSearchResponse = await response.json()
      return data.items || []
    } catch (error) {
      console.error('Error fetching books by category:', error)
      return []
    }
  }

  // Obtenir des bestsellers (simulation avec des livres populaires)
  async getBestsellerBooks(): Promise<GoogleBook[]> {
    try {
      const response = await fetch(
        `${this.baseURL}?q=bestseller&maxResults=20&printType=books&orderBy=relevance`
      )
      
      if (!response.ok) {
        throw new Error(`Google Books API Error: ${response.status}`)
      }
      
      const data: GoogleBooksSearchResponse = await response.json()
      return data.items || []
    } catch (error) {
      console.error('Error fetching bestseller books:', error)
      return []
    }
  }

  // Obtenir des livres de fiction populaires
  async getFictionBooks(): Promise<GoogleBook[]> {
    return this.getBooksByCategory('fiction')
  }

  // Obtenir des livres de non-fiction populaires
  async getNonFictionBooks(): Promise<GoogleBook[]> {
    return this.getBooksByCategory('biography')
  }

  // Obtenir des nouveautés
  async getNewReleases(): Promise<GoogleBook[]> {
    try {
      const currentYear = new Date().getFullYear()
      const response = await fetch(
        `${this.baseURL}?q=publishedDate:${currentYear}&maxResults=20&printType=books&orderBy=newest`
      )
      
      if (!response.ok) {
        throw new Error(`Google Books API Error: ${response.status}`)
      }
      
      const data: GoogleBooksSearchResponse = await response.json()
      return data.items || []
    } catch (error) {
      console.error('Error fetching new releases:', error)
      return []
    }
  }

  // Obtenir la meilleure image disponible
  getBestImageURL(book: GoogleBook, preferredSize: 'small' | 'medium' | 'large' = 'medium'): string | null {
    const imageLinks = book.volumeInfo.imageLinks
    if (!imageLinks) return null

    // Ordre de préférence pour chaque taille
    const sizePreferences = {
      small: ['thumbnail', 'smallThumbnail', 'small', 'medium'],
      medium: ['small', 'medium', 'thumbnail', 'large'],
      large: ['large', 'extraLarge', 'medium', 'small', 'thumbnail']
    }

    const preferences = sizePreferences[preferredSize]
    
    for (const size of preferences) {
      const url = imageLinks[size as keyof typeof imageLinks]
      if (url) {
        // Convertir en HTTPS et augmenter la qualité si possible
        return url.replace('http://', 'https://').replace('&edge=curl', '')
      }
    }

    return null
  }

  // Extraire l'ISBN d'un livre
  getISBN(book: GoogleBook): string | null {
    const identifiers = book.volumeInfo.industryIdentifiers
    if (!identifiers) return null

    // Préférer ISBN_13, puis ISBN_10
    const isbn13 = identifiers.find(id => id.type === 'ISBN_13')
    if (isbn13) return isbn13.identifier

    const isbn10 = identifiers.find(id => id.type === 'ISBN_10')
    if (isbn10) return isbn10.identifier

    return null
  }

  // Extraire l'année de publication
  getPublicationYear(book: GoogleBook): number {
    const publishedDate = book.volumeInfo.publishedDate
    if (!publishedDate) return new Date().getFullYear()

    // publishedDate peut être "YYYY", "YYYY-MM", ou "YYYY-MM-DD"
    const year = parseInt(publishedDate.split('-')[0])
    return isNaN(year) ? new Date().getFullYear() : year
  }

  // Nettoyer la description (enlever les balises HTML)
  cleanDescription(description: string): string {
    if (!description) return ''
    return description
      .replace(/<[^>]*>/g, '') // Enlever les balises HTML
      .replace(/&quot;/g, '"')
      .replace(/&amp;/g, '&')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')
      .trim()
  }

  // Convertir un livre Google Books vers le format de l'app
  convertToAppFormat(book: GoogleBook): any {
    const volumeInfo = book.volumeInfo
    
    return {
      id: `book-${book.id}`,
      title: volumeInfo.title || 'Unknown Title',
      author: volumeInfo.authors?.[0] || 'Unknown Author',
      year: this.getPublicationYear(book),
      rating: volumeInfo.averageRating ? Number(volumeInfo.averageRating.toFixed(1)) : 0,
      genre: volumeInfo.categories?.[0]?.split(' / ')[0] || 'Unknown',
      category: 'books' as const,
      image: this.getBestImageURL(book, 'medium'),
      
      // Données spécifiques aux livres
      subtitle: volumeInfo.subtitle,
      description: this.cleanDescription(volumeInfo.description || ''),
      publisher: volumeInfo.publisher,
      publishedDate: volumeInfo.publishedDate,
      pageCount: volumeInfo.pageCount,
      isbn: this.getISBN(book),
      language: volumeInfo.language,
      ratingsCount: volumeInfo.ratingsCount,
      previewLink: volumeInfo.previewLink,
      infoLink: volumeInfo.infoLink,
      canonicalVolumeLink: volumeInfo.canonicalVolumeLink,
      
      // Informations de vente
      isEbook: book.saleInfo?.isEbook || false,
      buyLink: book.saleInfo?.buyLink,
      price: book.saleInfo?.listPrice ? 
        `${book.saleInfo.listPrice.amount} ${book.saleInfo.listPrice.currencyCode}` : null,
      
      // Informations d'accès
      webReaderLink: book.accessInfo?.webReaderLink,
      epubAvailable: book.accessInfo?.epub?.isAvailable || false,
      pdfAvailable: book.accessInfo?.pdf?.isAvailable || false
    }
  }

  // Obtenir des livres recommandés basés sur un auteur
  async getBooksByAuthor(author: string, maxResults: number = 10): Promise<GoogleBook[]> {
    try {
      const response = await fetch(
        `${this.baseURL}?q=inauthor:"${encodeURIComponent(author)}"&maxResults=${maxResults}&printType=books&orderBy=relevance`
      )
      
      if (!response.ok) {
        throw new Error(`Google Books API Error: ${response.status}`)
      }
      
      const data: GoogleBooksSearchResponse = await response.json()
      return data.items || []
    } catch (error) {
      console.error('Error fetching books by author:', error)
      return []
    }
  }

  // Obtenir des livres similaires basés sur la catégorie
  async getSimilarBooks(book: GoogleBook, maxResults: number = 6): Promise<GoogleBook[]> {
    try {
      const category = book.volumeInfo.categories?.[0] || 'fiction'
      const books = await this.getBooksByCategory(category, maxResults + 5)
      
      // Filtrer le livre actuel et retourner les autres
      return books
        .filter(b => b.id !== book.id)
        .slice(0, maxResults)
    } catch (error) {
      console.error('Error fetching similar books:', error)
      return []
    }
  }
}

// Instance singleton
export const googleBooksService = new GoogleBooksService()

// Fonctions utilitaires
export const formatPageCount = (pageCount: number): string => {
  if (!pageCount) return 'Unknown'
  return `${pageCount} pages`
}

export const formatPublisher = (publisher: string, publishedDate: string): string => {
  if (!publisher && !publishedDate) return 'Unknown Publisher'
  if (!publisher) return publishedDate
  if (!publishedDate) return publisher
  
  const year = publishedDate.split('-')[0]
  return `${publisher} (${year})`
}

export const getReadingTime = (pageCount: number): string => {
  if (!pageCount) return 'Unknown'
  
  // Estimation : 250 mots par page, 200 mots par minute
  const wordsPerPage = 250
  const wordsPerMinute = 200
  const totalWords = pageCount * wordsPerPage
  const minutes = Math.round(totalWords / wordsPerMinute)
  
  if (minutes < 60) return `~${minutes} min read`
  
  const hours = Math.round(minutes / 60)
  if (hours < 24) return `~${hours}h read`
  
  const days = Math.round(hours / 24)
  return `~${days} days read`
}
</file>

<file path="src/utils/idNormalizer.ts">
/**
 * Utilitaire pour normaliser les IDs et éviter la duplication de code
 */

export const normalizeId = (id: string): string => {
  if (!id) return ''
  return id.toString().replace(/^(game-|movie-|music-|book-)/, '')
}

export const addCategoryPrefix = (id: string, category: string): string => {
  const normalizedId = normalizeId(id)
  const prefixes = {
    games: 'game-',
    movies: 'movie-',
    music: 'music-',
    books: 'book-'
  }
  
  const prefix = prefixes[category as keyof typeof prefixes] || ''
  return `${prefix}${normalizedId}`
}

export const idsMatch = (id1: string, id2: string): boolean => {
  return normalizeId(id1) === normalizeId(id2)
}
</file>

<file path="package.json">
{
  "name": "stackr",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.51.0",
    "@vercel/analytics": "^1.5.0",
    "lucide-react": "^0.525.0",
    "next": "15.3.5",
    "react": "^19.0.0",
    "react-dom": "^19.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.5",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
</file>

<file path="src/app/globals.css">
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #1a1a1a;
  --card-background: #ffffff;
  --card-border: #e5e7eb;
  --text-primary: #1f2937;
  --text-secondary: #6b7280;
  --text-muted: #9ca3af;
  --accent: #3b82f6;
  --accent-hover: #2563eb;
  --surface: #f9fafb;
  --surface-elevated: #ffffff;
  --border-color: #e5e7eb;
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', sans-serif;
  line-height: 1.6;
}

@layer utilities {
  /* Clean scrollbars for all devices */
  ::-webkit-scrollbar {
    width: 6px;
    height: 6px;
  }
  
  ::-webkit-scrollbar-track {
    background: transparent;
  }
  
  ::-webkit-scrollbar-thumb {
    background-color: rgba(156, 163, 175, 0.4);
    border-radius: 3px;
  }
  
  ::-webkit-scrollbar-thumb:hover {
    background-color: rgba(156, 163, 175, 0.6);
  }
  
  * {
    scrollbar-width: thin;
    scrollbar-color: rgba(156, 163, 175, 0.4) transparent;
  }

  .horizontal-scroll {
    -ms-overflow-style: none;
    scrollbar-width: none;
    overflow-x: auto;
    overflow-y: hidden;
    scroll-behavior: smooth;
    scroll-snap-type: x mandatory;
  }
  
  .horizontal-scroll::-webkit-scrollbar {
    display: none;
    height: 0px;
  }
}

@layer components {
  /* Cards et contenu */
  .content-card {
    scroll-snap-align: start;
    flex-shrink: 0;
    transition: all 0.2s ease-in-out;
    background: var(--card-background);
    border: 1px solid var(--card-border);
    border-radius: 12px;
    box-shadow: var(--shadow-sm);
  }

  .content-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
    border-color: var(--accent);
  }

  /* Sections de contenu */
  .content-section {
    scroll-margin-top: 2rem;
  }

  /* Modals */
  .modal-backdrop {
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    background: rgba(255, 255, 255, 0.8);
  }

  /* Cards spéciales */
  .library-card {
    background: var(--surface-elevated);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    box-shadow: var(--shadow-sm);
    transition: all 0.2s ease-in-out;
  }

  .library-card:hover {
    box-shadow: var(--shadow-md);
    border-color: var(--accent);
    transform: translateY(-1px);
  }

  /* Buttons */
  .btn-primary {
    background: var(--accent);
    color: white;
    border-radius: 8px;
    padding: 0.5rem 1rem;
    font-weight: 500;
    transition: all 0.2s ease-in-out;
    border: none;
    box-shadow: var(--shadow-sm);
  }

  .btn-primary:hover {
    background: var(--accent-hover);
    box-shadow: var(--shadow-md);
    transform: translateY(-1px);
  }

  .btn-secondary {
    background: var(--surface);
    color: var(--text-primary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 0.5rem 1rem;
    font-weight: 500;
    transition: all 0.2s ease-in-out;
  }

  .btn-secondary:hover {
    background: var(--surface-elevated);
    border-color: var(--accent);
    box-shadow: var(--shadow-sm);
  }

  /* Status badges */
  .status-badge {
    border-radius: 20px;
    padding: 0.25rem 0.75rem;
    font-size: 0.75rem;
    font-weight: 500;
    border: 1px solid;
  }

  .status-want {
    background: rgba(139, 69, 19, 0.1);
    color: #8b4513;
    border-color: rgba(139, 69, 19, 0.2);
  }

  .status-playing {
    background: rgba(34, 197, 94, 0.1);
    color: #059669;
    border-color: rgba(34, 197, 94, 0.2);
  }

  .status-completed {
    background: rgba(59, 130, 246, 0.1);
    color: #2563eb;
    border-color: rgba(59, 130, 246, 0.2);
  }

  .status-paused {
    background: rgba(251, 191, 36, 0.1);
    color: #d97706;
    border-color: rgba(251, 191, 36, 0.2);
  }

  .status-dropped {
    background: rgba(239, 68, 68, 0.1);
    color: #dc2626;
    border-color: rgba(239, 68, 68, 0.2);
  }
}

@layer base {
  /* Smooth scrolling global */
  html {
    scroll-behavior: smooth;
  }

  /* Typography améliorée */
  h1, h2, h3, h4, h5, h6 {
    color: var(--text-primary);
    font-weight: 600;
    line-height: 1.2;
  }

  p {
    color: var(--text-secondary);
    line-height: 1.6;
  }

  /* Focus states */
  button:focus-visible,
  input:focus-visible,
  select:focus-visible,
  textarea:focus-visible {
    outline: 2px solid var(--accent);
    outline-offset: 2px;
  }
}
</file>

<file path="src/app/layout.tsx">
import { Inter } from 'next/font/google'
import { Analytics } from '@vercel/analytics/react'
import './globals.css'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'Stackr - Your Universal Library',
  description: 'Track games, movies, music, and books all in one place',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={`${inter.className} bg-white text-gray-900 min-h-screen antialiased`}>
        {children}
        <Analytics />
      </body>
    </html>
  )
}
</file>

<file path="src/components/RoadmapPage.tsx">
'use client'
import { ArrowLeft, Check, Clock, Zap, Users, Star, Sparkles, CheckCircle, Smartphone } from 'lucide-react'

interface RoadmapPageProps {
  onBack: () => void
}

export default function RoadmapPage({ onBack }: RoadmapPageProps) {
  const roadmapPhases = [
    {
      id: 'phase1',
      title: 'Phase 1 - Foundations',
      status: 'completed',
      description: 'Core app structure and basic features',
      items: [
        { text: 'BottomNavigation with Apple design', completed: true },
        { text: 'Movies/Music/Books/Games APIs integration', completed: true },
        { text: 'Discover & Search pages', completed: true },
        { text: 'Content browsing optimization', completed: true },
        { text: 'Responsive design & mobile optimization', completed: true }
      ]
    },
    {
      id: 'phase2', 
      title: 'Phase 2 - Core Features',
      status: 'completed',
      description: 'Essential functionality and data persistence',
      items: [
        { text: 'Database setup with Supabase', completed: true },
        { text: 'Library management system', completed: true },
        { text: 'Content detail modals', completed: true },
        { text: 'Status tracking (Want/Playing/Completed)', completed: true },
        { text: 'Basic recommendation algorithms', completed: true }
      ]
    },
    {
      id: 'phase3',
      title: 'Phase 3 - Enhanced Experience',
      status: 'in-progress', 
      description: 'Improved user experience and mobile features',
      items: [
        { text: 'Progressive Web App (PWA) support', completed: false, isNew: true },
        { text: 'Offline functionality', completed: false },
        { text: 'Push notifications', completed: false },
        { text: 'User reviews and ratings', completed: false },
        { text: 'Advanced filtering and sorting', completed: false }
      ]
    },
    {
      id: 'phase4',
      title: 'Phase 4 - Social Features',
      status: 'planned', 
      description: 'Connect with friends and share recommendations',
      items: [
        { text: 'User authentication (Google/Apple)', completed: false },
        { text: 'Friend system (add/remove friends)', completed: false },
        { text: 'Friend Recommendations with personal messages', completed: false },
        { text: 'Activity Feed (see friends\' activities)', completed: false },
        { text: 'Public profiles and sharing', completed: false }
      ]
    },
    {
      id: 'phase5',
      title: 'Phase 5 - Advanced Features',
      status: 'future',
      description: 'Premium features and platform expansion',
      items: [
        { text: 'AI-powered smart recommendations', completed: false },
        { text: 'Advanced analytics dashboard', completed: false },
        { text: 'Custom themes and personalization', completed: false },
        { text: 'Groups & Communities', completed: false },
        { text: 'Native mobile apps (iOS/Android)', completed: false },
        { text: 'Public API for developers', completed: false }
      ]
    }
  ]

  const getStatusInfo = (status: string) => {
    switch (status) {
      case 'completed':
        return { 
          color: 'bg-green-50 border-green-200 text-green-700',
          icon: <CheckCircle size={16} className="text-green-600" />,
          label: 'Completed'
        }
      case 'in-progress':
        return {
          color: 'bg-blue-50 border-blue-200 text-blue-700', 
          icon: <Zap size={16} className="text-blue-600" />,
          label: 'In Progress'
        }
      case 'planned':
        return {
          color: 'bg-orange-50 border-orange-200 text-orange-700', 
          icon: <Clock size={16} className="text-orange-600" />,
          label: 'Planned'
        }
      case 'future':
        return {
          color: 'bg-gray-50 border-gray-200 text-gray-700',
          icon: <Star size={16} className="text-gray-600" />,
          label: 'Future'
        }
      default:
        return {
          color: 'bg-gray-50 border-gray-200 text-gray-700',
          icon: <Clock size={16} className="text-gray-600" />,
          label: 'Unknown'
        }
    }
  }

  const calculateProgress = (items: any[]) => {
    const completed = items.filter(item => item.completed).length
    return Math.round((completed / items.length) * 100)
  }

  return (
    <div className="min-h-screen bg-white">
      {/* Header */}
      <div className="sticky top-0 z-50 bg-white border-b border-gray-200">
        <div className="flex items-center px-4 py-4">
          <button
            onClick={onBack}
            className="p-2 hover:bg-gray-100 rounded-full transition-colors mr-3"
          >
            <ArrowLeft size={20} className="text-gray-600" />
          </button>
          <div>
            <h1 className="text-xl font-semibold text-gray-900">Roadmap</h1>
            <p className="text-sm text-gray-500">Track Stackr's development progress</p>
          </div>
        </div>
      </div>

      {/* Content */}
      <div className="pb-24">
        {/* Overview Stats */}
        <div className="px-4 py-6 bg-gradient-to-r from-blue-50 to-purple-50 border-b border-gray-100">
          <div className="space-y-4">
            <div>
              <h2 className="text-lg font-semibold text-gray-900 mb-2">Development Overview</h2>
              <p className="text-gray-600 text-sm">
                Building Stackr step by step. Track our progress and see what's coming next.
              </p>
            </div>
            
            <div className="grid grid-cols-3 gap-4">
              <div className="bg-white rounded-xl p-3 border border-gray-200">
                <div className="text-lg font-bold text-green-600">
                  {roadmapPhases.reduce((acc, phase) => 
                    acc + phase.items.filter(item => item.completed).length, 0
                  )}
                </div>
                <div className="text-xs text-gray-600">Completed</div>
              </div>
              <div className="bg-white rounded-xl p-3 border border-gray-200">
                <div className="text-lg font-bold text-blue-600">
                  {roadmapPhases.reduce((acc, phase) => 
                    acc + phase.items.filter(item => !item.completed).length, 0
                  )}
                </div>
                <div className="text-xs text-gray-600">Remaining</div>
              </div>
              <div className="bg-white rounded-xl p-3 border border-gray-200">
                <div className="text-lg font-bold text-gray-900">5</div>
                <div className="text-xs text-gray-600">Phases</div>
              </div>
            </div>
          </div>
        </div>

        {/* Roadmap Phases */}
        <div className="px-4 py-6 space-y-6">
          {roadmapPhases.map((phase, phaseIndex) => {
            const statusInfo = getStatusInfo(phase.status)
            const progress = calculateProgress(phase.items)
            
            return (
              <div key={phase.id} className="bg-white rounded-xl border border-gray-200 overflow-hidden">
                {/* Phase Header */}
                <div className="p-4 border-b border-gray-100">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center space-x-3">
                      <h3 className="text-lg font-semibold text-gray-900">{phase.title}</h3>
                      <div className={`flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium border ${statusInfo.color}`}>
                        {statusInfo.icon}
                        <span>{statusInfo.label}</span>
                      </div>
                    </div>
                    {(phase.status === 'in-progress' || phase.status === 'completed') && (
                      <div className="text-sm font-medium text-green-600">{progress}%</div>
                    )}
                  </div>
                  
                  <p className="text-gray-600 text-sm mb-3">{phase.description}</p>
                  
                  {/* Progress Bar */}
                  {(phase.status === 'in-progress' || phase.status === 'completed') && (
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div 
                        className={`h-2 rounded-full transition-all duration-300 ${
                          phase.status === 'completed' ? 'bg-green-500' : 'bg-blue-500'
                        }`}
                        style={{ width: `${progress}%` }}
                      />
                    </div>
                  )}
                </div>

                {/* Phase Items */}
                <div className="p-4">
                  <div className="space-y-3">
                    {phase.items.map((item, itemIndex) => (
                      <div key={itemIndex} className="flex items-center space-x-3">
                        <div className={`w-5 h-5 rounded-full border-2 flex items-center justify-center transition-all ${
                          item.completed 
                            ? 'bg-green-500 border-green-500' 
                            : 'border-gray-300 hover:border-gray-400'
                        }`}>
                          {item.completed && <Check size={12} className="text-white" />}
                        </div>
                        
                        <div className="flex-1 flex items-center space-x-2">
                          <span className={`text-sm ${
                            item.completed 
                              ? 'text-gray-500 line-through' 
                              : 'text-gray-900'
                          }`}>
                            {item.text}
                          </span>
                          {item.isNew && (
                            <div className="flex items-center space-x-1 bg-purple-100 text-purple-700 px-2 py-0.5 rounded-full text-xs font-medium">
                              {item.text.includes('PWA') ? <Smartphone size={10} /> : <Sparkles size={10} />}
                              <span>New</span>
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )
          })}
        </div>

        {/* Footer Note */}
        <div className="px-4 py-6">
          <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
            <div className="flex items-start space-x-3">
              <Users size={20} className="text-gray-600 mt-0.5" />
              <div>
                <h4 className="font-medium text-gray-900 mb-1">Community Driven</h4>
                <p className="text-sm text-gray-600">
                  This roadmap evolves based on user feedback and community needs. 
                  Got suggestions? We'd love to hear them!
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="src/components/BottomNavigation.tsx">
'use client'
import { useState } from 'react'
import { Home, Library, Compass, Search, MoreHorizontal } from 'lucide-react'

interface BottomNavigationProps {
  activeTab: string
  onTabChange: (tab: string) => void
}

export default function BottomNavigation({ activeTab, onTabChange }: BottomNavigationProps) {
  const [showMoreMenu, setShowMoreMenu] = useState(false)

  const mainTabs = [
    { id: 'home', label: 'Home', icon: Home },
    { id: 'library', label: 'Library', icon: Library },
    { id: 'discover', label: 'Discover', icon: Compass },
    { id: 'search', label: 'Search', icon: Search },
  ]

  const moreMenuItems = [
    { id: 'profile', label: 'Profile', description: 'Manage your account settings' },
    { id: 'friends', label: 'Friends', description: 'Connect with other users' },
    { id: 'groups', label: 'Groups', description: 'Join communities' },
    { id: 'lists', label: 'Lists', description: 'Create custom collections' },
    { id: 'roadmap', label: 'Roadmap', description: 'See what\'s coming next' },
    { id: 'contact', label: 'Contact Us', description: 'Get help and support' },
    { id: 'signout', label: 'Sign Out', description: '', isDanger: true },
  ]

  const handleTabClick = (tabId: string) => {
    if (tabId === 'more') {
      setShowMoreMenu(true)
    } else {
      onTabChange(tabId)
      setShowMoreMenu(false)
    }
  }

  const handleMoreItemClick = (itemId: string) => {
    console.log(`Clicked: ${itemId}`)
    setShowMoreMenu(false)
    
    // Callback pour navigation vers les pages
    if (onTabChange) {
      onTabChange(itemId)
    }
  }

  const TabButton = ({ tab, isActive, onClick }: { tab: any, isActive: boolean, onClick: () => void }) => {
    const Icon = tab.icon
    
    return (
      <button
        onClick={onClick}
        className={`flex flex-col items-center justify-center py-2 px-2 min-w-0 flex-1 transition-all duration-300 relative ${
          isActive 
            ? 'text-black' 
            : 'text-gray-400 hover:text-gray-600'
        }`}
      >
        {/* Barre active au-dessus */}
        {isActive && (
          <div className="absolute top-0 left-1/2 transform -translate-x-1/2 w-6 h-0.5 bg-black rounded-full transition-all duration-300" />
        )}
        
        <div className={`transition-all duration-300 ${isActive ? 'scale-105' : 'scale-100'}`}>
          {/* Icône */}
          <div className="flex justify-center mb-1">
            <Icon 
              size={20} 
              className={`transition-all duration-300 ${
                isActive ? 'stroke-2' : 'stroke-1.5'
              }`}
            />
          </div>
          
          {/* Label */}
          <span className={`text-xs font-medium transition-all duration-300 ${
            isActive ? 'font-semibold' : 'font-normal'
          }`}>
            {tab.label}
          </span>
        </div>
      </button>
    )
  }

  return (
    <>
      {/* Bottom Navigation Bar */}
      <div className="fixed bottom-0 left-0 right-0 bg-white/90 backdrop-blur-xl border-t border-gray-100 px-4 py-2 z-40">
        <div className="flex items-center justify-center max-w-md mx-auto">
          {mainTabs.map((tab) => (
            <TabButton
              key={tab.id}
              tab={tab}
              isActive={activeTab === tab.id}
              onClick={() => handleTabClick(tab.id)}
            />
          ))}
          
          {/* More Button */}
          <button
            onClick={() => handleTabClick('more')}
            className="flex flex-col items-center justify-center py-2 px-2 min-w-0 flex-1 text-gray-400 hover:text-gray-600 transition-all duration-300"
          >
            <div className="flex justify-center mb-1">
              <MoreHorizontal 
                size={20} 
                className="stroke-1.5"
              />
            </div>
            <span className="text-xs font-normal">More</span>
          </button>
        </div>
      </div>

      {/* More Menu Overlay */}
      {showMoreMenu && (
        <>
          {/* Backdrop */}
          <div 
            className="fixed inset-0 bg-black/10 backdrop-blur-sm z-50 transition-all duration-300"
            onClick={() => setShowMoreMenu(false)}
          />
          
          {/* Menu Panel */}
          <div className="fixed bottom-0 left-0 right-0 bg-white rounded-t-2xl shadow-xl z-50 animate-slide-up border-t border-gray-100">
            {/* Handle */}
            <div className="flex justify-center pt-4 pb-2">
              <div className="w-8 h-1 bg-gray-200 rounded-full" />
            </div>
            
            {/* Header */}
            <div className="px-6 py-4 border-b border-gray-50">
              <h3 className="text-xl font-semibold text-black">More</h3>
            </div>

            {/* Menu Items */}
            <div className="px-4 py-2 max-h-96 overflow-y-auto">
              <div className="space-y-1">
                {moreMenuItems.map((item) => (
                  <button
                    key={item.id}
                    onClick={() => handleMoreItemClick(item.id)}
                    className={`w-full flex items-center justify-between p-4 rounded-xl hover:bg-gray-50 transition-all duration-200 text-left group ${
                      item.isDanger ? 'hover:bg-red-50' : ''
                    }`}
                  >
                    <div className="flex-1">
                      <div className={`font-medium ${item.isDanger ? 'text-red-600' : 'text-black'}`}>
                        {item.label}
                      </div>
                      {item.description && (
                        <div className="text-sm text-gray-500 mt-0.5">
                          {item.description}
                        </div>
                      )}
                    </div>
                    <div className={`transition-colors ${
                      item.isDanger 
                        ? 'text-red-400 group-hover:text-red-600' 
                        : 'text-gray-300 group-hover:text-gray-500'
                    }`}>
                      <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
                        <path d="M6 12L10 8L6 4" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
                      </svg>
                    </div>
                  </button>
                ))}
              </div>
            </div>

            {/* Safe Area for iPhone */}
            <div className="h-6 bg-white" />
          </div>
        </>
      )}

      <style jsx>{`
        @keyframes slide-up {
          from {
            transform: translateY(100%);
            opacity: 0;
          }
          to {
            transform: translateY(0);
            opacity: 1;
          }
        }
        
        .animate-slide-up {
          animation: slide-up 0.4s cubic-bezier(0.16, 1, 0.3, 1);
        }
      `}</style>
    </>
  )
}
</file>

<file path="src/components/GameCardHorizontal.tsx">
'use client'
import { Star, Plus, Play, Check } from 'lucide-react'

interface GameCardHorizontalProps {
  game: {
    id: string
    title: string
    image: string
    year: number
    rating: number
    genre?: string
    status?: string
  }
  onCardClick: (gameId: string) => void
  onAddToLibrary?: (gameId: string, status: string) => void
  library?: any[]
}

export default function GameCardHorizontal({ 
  game, 
  onCardClick, 
  onAddToLibrary = () => {},
  library = [] 
}: GameCardHorizontalProps) {
  const libraryItem = library.find(item => item.id === game.id)
  const currentStatus = libraryItem?.status

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'want-to-play': return <Plus size={14} />
      case 'currently-playing': return <Play size={14} />
      case 'completed': return <Check size={14} />
      default: return <Plus size={14} />
    }
  }

  const getStatusLabel = (status: string) => {
    switch (status) {
      case 'want-to-play': return 'Want to Play'
      case 'currently-playing': return 'Playing'
      case 'completed': return 'Completed'
      default: return 'Want to Play'
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'want-to-play': return 'bg-blue-600 hover:bg-blue-500'
      case 'currently-playing': return 'bg-green-600 hover:bg-green-500'
      case 'completed': return 'bg-purple-600 hover:bg-purple-500'
      default: return 'bg-blue-600 hover:bg-blue-500'
    }
  }

  return (
    <div className="group flex bg-gradient-to-r from-gray-800 to-gray-900 rounded-xl overflow-hidden hover:from-gray-700 hover:to-gray-800 transition-all duration-300 transform hover:scale-[1.02] hover:shadow-lg">
      {/* Image cliquable */}
      <div 
        className="relative w-32 h-24 bg-gray-700 flex-shrink-0 cursor-pointer"
        onClick={() => onCardClick(game.id)}
      >
        {game.image ? (
          <img
            src={game.image}
            alt={game.title}
            className="w-full h-full object-cover"
          />
        ) : (
          <div className="w-full h-full bg-gradient-to-br from-purple-600 to-pink-600 flex items-center justify-center">
            <span className="text-white text-lg">🎮</span>
          </div>
        )}
        <div className="absolute inset-0 bg-black/20 group-hover:bg-black/10 transition-colors"></div>
      </div>

      {/* Contenu principal */}
      <div className="flex-1 p-4 flex items-center justify-between">
        <div className="flex-1">
          <h3 
            className="text-white font-semibold text-base truncate cursor-pointer group-hover:text-blue-300 transition-colors"
            onClick={() => onCardClick(game.id)}
          >
            {game.title}
          </h3>
          
          <div className="flex items-center space-x-3 mt-1">
            <span className="text-gray-400 text-sm">
              {game.year}
            </span>
            <div className="flex items-center space-x-1">
              <Star size={12} className="text-yellow-400 fill-current" />
              <span className="text-gray-300 text-sm">
                {game.rating.toFixed(1)}
              </span>
            </div>
          </div>

          {game.genre && (
            <span className="inline-flex items-center px-2 py-0.5 rounded bg-blue-600/20 text-blue-300 text-xs font-medium mt-2">
              {game.genre}
            </span>
          )}
        </div>

        {/* Boutons d'action - Version verticale */}
        {onAddToLibrary && (
          <div className="flex flex-col space-y-2 ml-4">
            {(['want-to-play', 'currently-playing', 'completed'] as const).map((status) => (
              <button
                key={status}
                onClick={(e) => {
                  e.stopPropagation()
                  onAddToLibrary(game.id, status)
                }}
                className={`flex items-center justify-center w-8 h-8 rounded-lg text-white text-xs font-medium transition-colors ${
                  currentStatus === status
                    ? getStatusColor(status).replace('hover:', '')
                    : 'bg-gray-700 hover:bg-gray-600'
                }`}
                title={getStatusLabel(status)}
              >
                {getStatusIcon(status)}
              </button>
            ))}
          </div>
        )}
      </div>
    </div>
  )
}
</file>

<file path="src/components/Header.tsx">
'use client'
import { useState } from 'react'
import { Search } from 'lucide-react'
import SearchModal from './SearchModal'
import type { LibraryItem, MediaStatus } from '@/types'

interface HeaderProps {
  onAddToLibrary: (item: any, status: MediaStatus) => void
  library: LibraryItem[]
  onOpenGameDetail?: (gameId: string) => void
}

export default function Header({ onAddToLibrary, library, onOpenGameDetail }: HeaderProps) {
  const [isSearchModalOpen, setIsSearchModalOpen] = useState(false)
  
  return (
    <>
      <header className="flex items-center justify-between px-4 sm:px-6 py-4 bg-white">
        {/* Logo */}
        <div className="flex items-center">
          <h1 className="text-2xl font-bold text-gray-900">Books</h1>
        </div>
        
        {/* Barre de recherche cliquable - plus subtile */}
        <div className="flex-1 max-w-md mx-8">
          <div 
            className="relative cursor-pointer"
            onClick={() => setIsSearchModalOpen(true)}
          >
            <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
            <div className="w-full pl-4 pr-10 py-2 bg-gray-50 hover:bg-gray-100 rounded-lg text-gray-500 transition-colors text-sm">
              <span className="hidden md:inline">Search...</span>
              <span className="md:hidden">Search...</span>
            </div>
          </div>
        </div>
        
        {/* Profile - minimaliste */}
        <div className="flex items-center">
          <button className="p-2 hover:bg-gray-100 rounded-full transition-colors">
            <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
              <span className="text-gray-600 text-sm font-medium">👤</span>
            </div>
          </button>
        </div>
      </header>
      
      {/* Modal de recherche */}
      <SearchModal
        isOpen={isSearchModalOpen}
        onClose={() => setIsSearchModalOpen(false)}
        onAddToLibrary={onAddToLibrary}
        onOpenGameDetail={(gameId) => {
          setIsSearchModalOpen(false)
          onOpenGameDetail?.(gameId)
        }}
        library={library}
      />
    </>
  )
}
</file>

<file path="src/data/sampleContent.ts">
import type { ContentItem } from '@/types'

export const sampleContent = {
  games: [
    {
      id: '22511',
      title: 'Elden Ring',
      name: 'Elden Ring',
      author: 'FromSoftware',
      year: 2022,
      rating: 4.8,
      genre: 'Action RPG',
      image: 'https://media.rawg.io/media/games/5eb/5eb49eb2fa0738fdb5bacea557b1bc57.jpg',
      background_image: 'https://media.rawg.io/media/games/5eb/5eb49eb2fa0738fdb5bacea557b1bc57.jpg',
      released: '2022-02-25',
      developers: [{ name: 'FromSoftware' }],
      genres: [{ name: 'RPG' }, { name: 'Action' }],
      category: 'games' as const
    },
    {
      id: '41494',
      title: 'Cyberpunk 2077',
      name: 'Cyberpunk 2077',
      author: 'CD Projekt RED',
      year: 2020,
      rating: 4.1,
      genre: 'RPG',
      image: 'https://media.rawg.io/media/games/26d/26d4437715bee60138dab4a7c8c59c92.jpg',
      background_image: 'https://media.rawg.io/media/games/26d/26d4437715bee60138dab4a7c8c59c92.jpg',
      released: '2020-12-10',
      developers: [{ name: 'CD PROJEKT RED' }],
      genres: [{ name: 'RPG' }, { name: 'Adventure' }],
      category: 'games' as const
    },
    {
      id: '3328',
      title: 'The Witcher 3: Wild Hunt',
      name: 'The Witcher 3: Wild Hunt',
      author: 'CD Projekt RED', 
      year: 2015,
      rating: 4.9,
      genre: 'RPG',
      image: 'https://media.rawg.io/media/games/618/618c2031a07bbff6b4f611f10b6bcdbc.jpg',
      background_image: 'https://media.rawg.io/media/games/618/618c2031a07bbff6b4f611f10b6bcdbc.jpg',
      released: '2015-05-18',
      developers: [{ name: 'CD PROJEKT RED' }],
      genres: [{ name: 'RPG' }, { name: 'Adventure' }],
      category: 'games' as const
    },
    {
      id: '58175',
      title: 'God of War',
      name: 'God of War',
      author: 'Santa Monica Studio',
      year: 2018,
      rating: 4.7,
      genre: 'Action Adventure',
      image: 'https://media.rawg.io/media/games/4be/4be6a6ad0364751a96229c56bf69be59.jpg',
      background_image: 'https://media.rawg.io/media/games/4be/4be6a6ad0364751a96229c56bf69be59.jpg',
      released: '2018-04-20',
      developers: [{ name: 'Santa Monica Studio' }],
      genres: [{ name: 'Action' }, { name: 'Adventure' }],
      category: 'games' as const
    },
    {
      id: '622492',
      title: 'Spider-Man 2',
      name: 'Spider-Man 2',
      author: 'Insomniac Games',
      year: 2023,
      rating: 4.6,
      genre: 'Action Adventure',
      image: 'https://media.rawg.io/media/games/709/709bf81f874ce5d25d625b37b014cb63.jpg',
      background_image: 'https://media.rawg.io/media/games/709/709bf81f874ce5d25d625b37b014cb63.jpg',
      released: '2023-10-20',
      developers: [{ name: 'Insomniac Games' }],
      genres: [{ name: 'Action' }, { name: 'Adventure' }],
      category: 'games' as const
    },
    {
      id: '422',
      title: 'Baldurs Gate 3',
      name: 'Baldurs Gate 3',
      author: 'Larian Studios',
      year: 2023,
      rating: 4.9,
      genre: 'RPG',
      image: 'https://media.rawg.io/media/games/699/69993db1cfcaf895c8b22603ee1aae62.jpg',
      background_image: 'https://media.rawg.io/media/games/699/69993db1cfcaf895c8b22603ee1aae62.jpg',
      released: '2023-08-03',
      developers: [{ name: 'Larian Studios' }],
      genres: [{ name: 'RPG' }, { name: 'Strategy' }],
      category: 'games' as const
    },
    {
      id: '28',
      title: 'Red Dead Redemption 2',
      name: 'Red Dead Redemption 2',
      author: 'Rockstar Games',
      year: 2018,
      rating: 4.8,
      genre: 'Action Adventure',
      image: 'https://media.rawg.io/media/games/511/5118aff5091cb3efec399c808f8c598f.jpg',
      background_image: 'https://media.rawg.io/media/games/511/5118aff5091cb3efec399c808f8c598f.jpg',
      released: '2018-10-26',
      developers: [{ name: 'Rockstar Studios' }],
      genres: [{ name: 'Action' }, { name: 'Adventure' }],
      category: 'games' as const
    },
    {
      id: '326243',
      title: 'Zelda: Tears of the Kingdom',
      name: 'The Legend of Zelda: Tears of the Kingdom',
      author: 'Nintendo',
      year: 2023,
      rating: 4.9,
      genre: 'Adventure',
      image: 'https://media.rawg.io/media/games/8d9/8d92b2b6b28c5497f7a52049e6d0e95d.jpg',
      background_image: 'https://media.rawg.io/media/games/8d9/8d92b2b6b28c5497f7a52049e6d0e95d.jpg',
      released: '2023-05-12',
      developers: [{ name: 'Nintendo EPD' }],
      genres: [{ name: 'Adventure' }, { name: 'Puzzle' }],
      category: 'games' as const
    }
  ],
  
  movies: [
    {
      id: 'dune-2021',
      title: 'Dune',
      director: 'Denis Villeneuve',
      year: 2021,
      rating: 4.2,
      genre: 'Sci-Fi',
      image: 'https://image.tmdb.org/t/p/w500/d5NuKzxEfgLAE6twC18pSnWnOzw.jpg',
      category: 'movies' as const
    },
    {
      id: 'inception',
      title: 'Inception',
      director: 'Christopher Nolan',
      year: 2010,
      rating: 4.8,
      genre: 'Sci-Fi',
      image: 'https://image.tmdb.org/t/p/w500/9gk7adHYeDvHkCSEqAvQNLV5Uge.jpg',
      category: 'movies' as const
    },
    {
      id: 'interstellar',
      title: 'Interstellar',
      director: 'Christopher Nolan',
      year: 2014,
      rating: 4.7,
      genre: 'Sci-Fi Drama',
      image: 'https://image.tmdb.org/t/p/w500/gEU2QniE6E77NI6lCU6MxlNBvIx.jpg',
      category: 'movies' as const
    },
    {
      id: 'the-batman',
      title: 'The Batman',
      director: 'Matt Reeves',
      year: 2022,
      rating: 4.3,
      genre: 'Action',
      image: 'https://image.tmdb.org/t/p/w500/74xTEgt7R36Fpooo50r9T25onhq.jpg',
      category: 'movies' as const
    },
    {
      id: 'top-gun-maverick',
      title: 'Top Gun: Maverick',
      director: 'Joseph Kosinski',
      year: 2022,
      rating: 4.5,
      genre: 'Action',
      image: 'https://image.tmdb.org/t/p/w500/62HCnUTziyWcpDaBO2i1DX17ljH.jpg',
      category: 'movies' as const
    },
    {
      id: 'everything-everywhere',
      title: 'Everything Everywhere All at Once',
      director: 'Daniels',
      year: 2022,
      rating: 4.6,
      genre: 'Sci-Fi Comedy',
      image: 'https://image.tmdb.org/t/p/w500/w3LxiVYdWWRvEVdn5RYq6jIqkb1.jpg',
      category: 'movies' as const
    },
    {
      id: 'avatar-2',
      title: 'Avatar: The Way of Water',
      director: 'James Cameron',
      year: 2022,
      rating: 4.4,
      genre: 'Sci-Fi',
      image: 'https://image.tmdb.org/t/p/w500/t6HIqrRAclMCA60NsSmeqe9RmNV.jpg',
      category: 'movies' as const
    },
    {
      id: 'oppenheimer',
      title: 'Oppenheimer',
      director: 'Christopher Nolan',
      year: 2023,
      rating: 4.7,
      genre: 'Drama',
      image: 'https://image.tmdb.org/t/p/w500/8Gxv8gSFCU0XGDykEGv7zR1n2ua.jpg',
      category: 'movies' as const
    }
  ],

  music: [
    {
      id: 'random-access-memories',
      title: 'Random Access Memories',
      artist: 'Daft Punk',
      year: 2013,
      rating: 4.5,
      genre: 'Electronic',
      image: 'https://images.genius.com/2b3eafa25e5fb5bb0ab8f73ab9d09634.1000x1000x1.jpg',
      category: 'music' as const
    },
    {
      id: 'after-hours',
      title: 'After Hours',
      artist: 'The Weeknd',
      year: 2020,
      rating: 4.3,
      genre: 'R&B',
      image: 'https://images.genius.com/a9922ad23c21e6a2b6f97e65c5c2ea2b.1000x1000x1.jpg',
      category: 'music' as const
    },
    {
      id: 'abbey-road',
      title: 'Abbey Road',
      artist: 'The Beatles',
      year: 1969,
      rating: 4.9,
      genre: 'Rock',
      image: 'https://images.genius.com/aeeef7f8b02c67a7f27a8f5e7e2fc439.1000x1000x1.jpg',
      category: 'music' as const
    },
    {
      id: 'good-kid-maad-city',
      title: 'good kid, m.A.A.d city',
      artist: 'Kendrick Lamar',
      year: 2012,
      rating: 4.8,
      genre: 'Hip Hop',
      image: 'https://images.genius.com/abd8db8081e5daed5d833bdece4a6e0e.1000x1000x1.jpg',
      category: 'music' as const
    },
    {
      id: 'blond',
      title: 'Blond',
      artist: 'Frank Ocean',
      year: 2016,
      rating: 4.4,
      genre: 'R&B',
      image: 'https://images.genius.com/76e4c6b6cc6c81ac6fe45eae25ddc1a6.1000x1000x1.jpg',
      category: 'music' as const
    },
    {
      id: 'folklore',
      title: 'Folklore',
      artist: 'Taylor Swift',
      year: 2020,
      rating: 4.2,
      genre: 'Indie Folk',
      image: 'https://images.genius.com/fb9e8d5997d6df7794ae60fc1df2b3a5.1000x1000x1.jpg',
      category: 'music' as const
    },
    {
      id: 'astroworld',
      title: 'Astroworld',
      artist: 'Travis Scott',
      year: 2018,
      rating: 4.3,
      genre: 'Hip Hop',
      image: 'https://images.genius.com/d842b9a63b5d30b5ce7bb85f6be86e19.1000x1000x1.jpg',
      category: 'music' as const
    },
    {
      id: 'sour',
      title: 'SOUR',
      artist: 'Olivia Rodrigo',
      year: 2021,
      rating: 4.1,
      genre: 'Pop',
      image: 'https://images.genius.com/53b8d0c0df2e45c6ce8b23fa5e8e8fce.1000x1000x1.jpg',
      category: 'music' as const
    }
  ],

  books: [
    {
      id: 'the-silent-patient',
      title: 'The Silent Patient',
      author: 'Alex Michaelides',
      year: 2019,
      rating: 4.2,
      genre: 'Thriller',
      image: 'https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1582398159i/40097951.jpg',
      category: 'books' as const
    },
    {
      id: 'dune-book',
      title: 'Dune',
      author: 'Frank Herbert',
      year: 1965,
      rating: 4.6,
      genre: 'Sci-Fi',
      image: 'https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1555447414i/44767458.jpg',
      category: 'books' as const
    },
    {
      id: '1984',
      title: '1984',
      author: 'George Orwell',
      year: 1949,
      rating: 4.8,
      genre: 'Dystopian',
      image: 'https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1532714506i/40961427.jpg',
      category: 'books' as const
    },
    {
      id: 'it-starts-with-us',
      title: 'It Starts with Us',
      author: 'Colleen Hoover',
      year: 2022,
      rating: 4.1,
      genre: 'Romance',
      image: 'https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1628449804i/58784475.jpg',
      category: 'books' as const
    },
    {
      id: 'the-love-hypothesis',
      title: 'The Love Hypothesis',
      author: 'Ali Hazelwood',
      year: 2021,
      rating: 4.0,
      genre: 'Romance',
      image: 'https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1611937942i/56732449.jpg',
      category: 'books' as const
    },
    {
      id: 'project-hail-mary',
      title: 'Project Hail Mary',
      author: 'Andy Weir',
      year: 2021,
      rating: 4.7,
      genre: 'Sci-Fi',
      image: 'https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1597695864i/54493401.jpg',
      category: 'books' as const
    },
    {
      id: 'where-crawdads-sing',
      title: 'Where the Crawdads Sing',
      author: 'Delia Owens',
      year: 2018,
      rating: 4.5,
      genre: 'Fiction',
      image: 'https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1582135294i/36809135.jpg',
      category: 'books' as const
    },
    {
      id: 'atomic-habits',
      title: 'Atomic Habits',
      author: 'James Clear',
      year: 2018,
      rating: 4.6,
      genre: 'Self-Help',
      image: 'https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1655988385i/40121378.jpg',
      category: 'books' as const
    }
  ]
}
</file>

<file path="src/services/libraryService.ts">
// src/services/libraryService.ts
import { supabase } from '@/lib/supabase'
import type { LibraryItem, MediaStatus } from '@/types'

export class LibraryService {
  // Clé pour localStorage (fallback)
  private static STORAGE_KEY = 'stackr_library'

  // Récupérer la bibliothèque (Supabase + fallback localStorage)
  static async getLibrary(): Promise<LibraryItem[]> {
    try {
      // Vérifier si on est côté client
      if (typeof window === 'undefined') {
        return []
      }

      // Essayer Supabase d'abord
      try {
        const { data, error } = await supabase
          .from('library_items')
          .select('*')
          .order('added_at', { ascending: false })

        if (!error && data) {
          console.log('📚 Library loaded from Supabase:', data.length, 'items')
          
          // Convertir les données Supabase au format LibraryItem
          const convertedItems: LibraryItem[] = data.map(item => ({
            id: item.id,
            title: item.title,
            category: item.category,
            status: item.status,
            addedAt: item.added_at,
            year: item.year,
            rating: item.rating,
            image: item.image,
            author: item.author,
            artist: item.artist,
            director: item.director,
            genre: item.genre,
            userRating: item.user_rating,
            progress: item.progress,
            notes: item.notes,
            dateStarted: item.date_started,
            dateCompleted: item.date_completed
          }))
          
          // Synchroniser avec localStorage comme backup
          localStorage.setItem(this.STORAGE_KEY, JSON.stringify(convertedItems))
          return convertedItems
        }
      } catch (supabaseError) {
        console.log('⚠️ Supabase unavailable, using localStorage:', supabaseError)
      }

      // Fallback vers localStorage
      const stored = localStorage.getItem(this.STORAGE_KEY)
      const items = stored ? JSON.parse(stored) : []
      console.log('📚 Library loaded from localStorage:', items.length, 'items')
      return items

    } catch (error) {
      console.error('❌ Error loading library:', error)
      return []
    }
  }

  // Ajouter à la bibliothèque
  static async addToLibrary(item: any, status: MediaStatus): Promise<boolean> {
    try {
      // Vérifier si on est côté client
      if (typeof window === 'undefined') {
        return false
      }

      const newItem: LibraryItem = {
        id: item.id,
        title: item.title,
        category: item.category,
        status,
        addedAt: new Date().toISOString(),
        year: item.year || new Date().getFullYear(),
        rating: item.rating || 0,
        image: item.image || item.background_image,
        author: item.author,
        artist: item.artist,
        director: item.director,
        genre: item.genre
      }

      // Essayer Supabase d'abord
      try {
        const { data, error } = await supabase
          .from('library_items')
          .upsert({
            id: newItem.id,
            title: newItem.title,
            category: newItem.category,
            status: newItem.status,
            added_at: newItem.addedAt,
            year: newItem.year,
            rating: newItem.rating,
            image: newItem.image,
            author: newItem.author,
            artist: newItem.artist,
            director: newItem.director,
            genre: newItem.genre
          }, {
            onConflict: 'id'
          })
          .select()

        if (!error) {
          console.log('➕ Added to Supabase:', newItem.title)
          
          // Synchroniser localStorage
          const library = await this.getLibraryFromLocalStorage()
          const existingIndex = library.findIndex(libItem => libItem.id === newItem.id)
          
          if (existingIndex !== -1) {
            library[existingIndex] = newItem
          } else {
            library.unshift(newItem)
          }
          
          localStorage.setItem(this.STORAGE_KEY, JSON.stringify(library))
          return true
        } else {
          console.error('Supabase error:', error)
        }
      } catch (supabaseError) {
        console.log('⚠️ Supabase unavailable, using localStorage:', supabaseError)
      }

      // Fallback vers localStorage
      const library = await this.getLibraryFromLocalStorage()
      const existingIndex = library.findIndex(libItem => libItem.id === newItem.id)
      
      if (existingIndex !== -1) {
        library[existingIndex] = { ...library[existingIndex], ...newItem }
        console.log('📝 Updated item in localStorage:', newItem.title)
      } else {
        library.unshift(newItem)
        console.log('➕ Added new item to localStorage:', newItem.title)
      }

      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(library))
      console.log('💾 Library saved! Total items:', library.length)
      return true

    } catch (error) {
      console.error('❌ Error adding to library:', error)
      return false
    }
  }

  // Mettre à jour un item
  static async updateLibraryItem(itemId: string, updates: Partial<LibraryItem>): Promise<boolean> {
    try {
      // Vérifier si on est côté client
      if (typeof window === 'undefined') {
        return false
      }

      // Essayer Supabase d'abord
      try {
        const updateData: any = {}
        
        // Mapper les champs LibraryItem vers les champs de la base
        if (updates.status) updateData.status = updates.status
        if (updates.userRating !== undefined) updateData.user_rating = updates.userRating
        if (updates.progress !== undefined) updateData.progress = updates.progress
        if (updates.notes !== undefined) updateData.notes = updates.notes
        if (updates.dateStarted) updateData.date_started = updates.dateStarted
        if (updates.dateCompleted) updateData.date_completed = updates.dateCompleted
        
        // Auto-set dates based on status
        if (updates.status === 'currently-playing' && !updateData.date_started) {
          updateData.date_started = new Date().toISOString()
        }
        if (updates.status === 'completed' && !updateData.date_completed) {
          updateData.date_completed = new Date().toISOString()
        }

        const { error } = await supabase
          .from('library_items')
          .update(updateData)
          .eq('id', itemId)

        if (!error) {
          console.log('📝 Updated item in Supabase:', itemId)
        } else {
          console.error('Supabase update error:', error)
        }
      } catch (supabaseError) {
        console.log('⚠️ Supabase unavailable for update:', supabaseError)
      }

      // Mise à jour localStorage (toujours faire)
      const library = await this.getLibraryFromLocalStorage()
      const itemIndex = library.findIndex(item => item.id === itemId)
      
      if (itemIndex === -1) {
        console.warn('⚠️ Item not found for update:', itemId)
        return false
      }

      // Appliquer les mises à jour
      library[itemIndex] = { ...library[itemIndex], ...updates }
      
      // Auto-set dates based on status
      if (updates.status === 'currently-playing' && !library[itemIndex].dateStarted) {
        library[itemIndex].dateStarted = new Date().toISOString()
      }
      if (updates.status === 'completed' && !library[itemIndex].dateCompleted) {
        library[itemIndex].dateCompleted = new Date().toISOString()
      }

      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(library))
      console.log('📝 Updated library item:', library[itemIndex].title)
      return true

    } catch (error) {
      console.error('❌ Error updating library item:', error)
      return false
    }
  }

  // Supprimer un item
  static async removeFromLibrary(itemId: string): Promise<boolean> {
    try {
      // Vérifier si on est côté client
      if (typeof window === 'undefined') {
        return false
      }

      // Essayer Supabase d'abord
      try {
        const { error } = await supabase
          .from('library_items')
          .delete()
          .eq('id', itemId)

        if (!error) {
          console.log('🗑️ Removed from Supabase:', itemId)
        } else {
          console.error('Supabase delete error:', error)
        }
      } catch (supabaseError) {
        console.log('⚠️ Supabase unavailable for deletion:', supabaseError)
      }

      // Suppression localStorage (toujours faire)
      const library = await this.getLibraryFromLocalStorage()
      const itemToRemove = library.find(item => item.id === itemId)
      
      if (!itemToRemove) {
        console.warn('⚠️ Item not found for deletion:', itemId)
        return false
      }

      const filteredLibrary = library.filter(item => item.id !== itemId)
      localStorage.setItem(this.STORAGE_KEY, JSON.stringify(filteredLibrary))
      console.log('🗑️ Removed from library:', itemToRemove.title)
      return true

    } catch (error) {
      console.error('❌ Error removing from library:', error)
      return false
    }
  }

  // Méthode helper pour récupérer uniquement localStorage
  private static async getLibraryFromLocalStorage(): Promise<LibraryItem[]> {
    try {
      if (typeof window === 'undefined') return []
      const stored = localStorage.getItem(this.STORAGE_KEY)
      return stored ? JSON.parse(stored) : []
    } catch (error) {
      console.error('Error reading localStorage:', error)
      return []
    }
  }

  // Statistiques de la bibliothèque
  static async getLibraryStats() {
    try {
      const library = await this.getLibrary()
      const stats = {
        total: library.length,
        byStatus: {} as Record<MediaStatus, number>,
        byCategory: {} as Record<string, number>
      }

      library.forEach(item => {
        // Stats par statut
        stats.byStatus[item.status] = (stats.byStatus[item.status] || 0) + 1
        // Stats par catégorie
        stats.byCategory[item.category] = (stats.byCategory[item.category] || 0) + 1
      })

      console.log('📊 Library stats:', stats)
      return stats
    } catch (error) {
      console.error('❌ Error getting library stats:', error)
      return { total: 0, byStatus: {} as any, byCategory: {} }
    }
  }

  // Test de connexion Supabase
  static async testSupabaseConnection(): Promise<boolean> {
    try {
      const { data, error } = await supabase.from('library_items').select('count').limit(1)
      
      if (error && error.code === 'PGRST116') {
        console.log('ℹ️ Supabase connected but tables not created yet - run the SQL setup!')
        return false
      }
      if (error) {
        console.error('❌ Supabase error:', error.message)
        return false
      }
      
      console.log('✅ Supabase fully operational!')
      return true
    } catch (error) {
      console.log('ℹ️ Supabase connection failed, using localStorage fallback')
      return false
    }
  }

  // Migrer localStorage vers Supabase
  static async migrateToSupabase(): Promise<boolean> {
    try {
      // Vérifier la connexion Supabase
      const isConnected = await this.testSupabaseConnection()
      if (!isConnected) {
        console.log('ℹ️ Cannot migrate: Supabase not available')
        return false
      }

      // Récupérer les données localStorage
      const localData = localStorage.getItem(this.STORAGE_KEY)
      if (!localData) {
        console.log('ℹ️ No local data to migrate')
        return true
      }

      const localLibrary: LibraryItem[] = JSON.parse(localData)
      if (localLibrary.length === 0) {
        console.log('ℹ️ No local library to migrate')
        return true
      }

      console.log('🔄 Starting migration of', localLibrary.length, 'items...')

      // Migrer chaque item
      let migrated = 0
      for (const item of localLibrary) {
        try {
          const { error } = await supabase
            .from('library_items')
            .upsert({
              id: item.id,
              title: item.title,
              category: item.category,
              status: item.status,
              added_at: item.addedAt,
              year: item.year,
              rating: item.rating,
              image: item.image,
              author: item.author,
              artist: item.artist,
              director: item.director,
              genre: item.genre,
              user_rating: item.userRating,
              progress: item.progress,
              notes: item.notes,
              date_started: item.dateStarted,
              date_completed: item.dateCompleted
            }, {
              onConflict: 'id'
            })
          
          if (!error) {
            migrated++
          } else {
            console.error('Error migrating item:', item.title, error)
          }
        } catch (itemError) {
          console.error('Error migrating item:', item.title, itemError)
        }
      }

      console.log(`✅ Migration completed! ${migrated}/${localLibrary.length} items migrated`)
      return true
    } catch (error) {
      console.error('❌ Migration error:', error)
      return false
    }
  }
}

// Export par défaut de la classe
export default LibraryService
</file>

<file path="src/components/DiscoverPage.tsx">
'use client'
import React, { useState, useEffect } from 'react'
import { Star, Plus, TrendingUp, Play, Book, Headphones, Film, Check, MoreHorizontal, Loader2 } from 'lucide-react'
import { rawgService } from '@/services/rawgService'
import { omdbService } from '@/services/omdbService'
import { googleBooksService } from '@/services/googleBooksService'
import { musicService } from '@/services/musicService'
import type { ContentItem, LibraryItem, MediaStatus } from '@/types'

// Constants
const MIN_LIBRARY_ITEMS = 10

interface CategorySection {
  id: string
  title: string
  subtitle: string
  icon: React.ReactNode
  color: string
  items: ContentItem[]
  loading: boolean
}

interface ForYouSection {
  items: ContentItem[]
  reasoning: string
  loading: boolean
}

interface DiscoverPageProps {
  onAddToLibrary?: (item: any, status: MediaStatus) => void
  onDeleteItem?: (id: string) => void
  onOpenGameDetail?: (gameId: string) => void
  onOpenMovieDetail?: (movieId: string) => void
  onOpenBookDetail?: (bookId: string) => void
  onOpenMusicDetail?: (musicId: string) => void
  library?: LibraryItem[]
}

export default function DiscoverPage({
  onAddToLibrary,
  onDeleteItem,
  onOpenGameDetail,
  onOpenMovieDetail,
  onOpenBookDetail,
  onOpenMusicDetail,
  library = []
}: DiscoverPageProps) {
  // Hero content state
  const [heroContent, setHeroContent] = useState<ContentItem[]>([])
  const [currentHeroIndex, setCurrentHeroIndex] = useState(0)
  const [heroLoading, setHeroLoading] = useState(true)
  const [isAutoplay, setIsAutoplay] = useState(true)

  // For You section state
  const [forYouSection, setForYouSection] = useState<ForYouSection>({
    items: [],
    reasoning: '',
    loading: false
  })

  // Category sections state
  const [categorySections, setCategorySections] = useState<CategorySection[]>([
    {
      id: 'trending-games',
      title: 'Trending Games',
      subtitle: 'Most played this week',
      icon: <Play size={20} />,
      color: 'green',
      items: [],
      loading: true
    },
    {
      id: 'popular-movies',
      title: 'Popular Movies',
      subtitle: 'Blockbusters & award winners',
      icon: <Film size={20} />,
      color: 'blue',
      items: [],
      loading: true
    },
    {
      id: 'new-books',
      title: 'New Releases',
      subtitle: 'Latest literary hits',
      icon: <Book size={20} />,
      color: 'orange',
      items: [],
      loading: true
    },
    {
      id: 'hot-albums',
      title: 'Hot Albums',
      subtitle: 'Music trending now',
      icon: <Headphones size={20} />,
      color: 'purple',
      items: [],
      loading: true
    }
  ])

  // UI state
  const [showStatusPopup, setShowStatusPopup] = useState<string | null>(null)
  const [addingItem, setAddingItem] = useState<string | null>(null)
  const [showPersonalization, setShowPersonalization] = useState(false)
  const [visibilitySettings, setVisibilitySettings] = useState<{[key: string]: boolean}>({
    'trending-games': true,
    'popular-movies': true,
    'new-books': true,
    'hot-albums': true
  })

  // Load data on mount
  useEffect(() => {
    loadAllContent()
    
    // Load For You section if user has enough library items
    if (library.length >= MIN_LIBRARY_ITEMS) {
      loadForYouRecommendations()
    }
  }, [library.length])

  // Hero auto-rotation
  useEffect(() => {
    if (!isAutoplay || heroContent.length === 0) return
    
    const interval = setInterval(() => {
      setCurrentHeroIndex((prev) => (prev + 1) % heroContent.length)
    }, 6000)

    return () => clearInterval(interval)
  }, [isAutoplay, heroContent.length])

  // Recommendation algorithm
  const analyzeLibraryPreferences = (library: LibraryItem[]) => {
    const genreCounts: { [key: string]: number } = {}
    const creatorCounts: { [key: string]: number } = {}
    const categoryDistribution: { [key: string]: number } = {}
    const yearPreferences: number[] = []
    const highRatedItems: LibraryItem[] = []

    library.forEach(item => {
      // Count genres
      if (item.genre) {
        genreCounts[item.genre] = (genreCounts[item.genre] || 0) + 1
      }

      // Count creators (author, artist, director)
      const creator = item.author || item.artist || item.director
      if (creator) {
        creatorCounts[creator] = (creatorCounts[creator] || 0) + 1
      }

      // Count categories
      if (item.category) {
        categoryDistribution[item.category] = (categoryDistribution[item.category] || 0) + 1
      }

      // Collect years
      if (item.year) {
        yearPreferences.push(item.year)
      }

      // High rated items (4+ stars)
      if (item.userRating && item.userRating >= 4) {
        highRatedItems.push(item)
      }
    })

    // Get top preferences
    const topGenres = Object.entries(genreCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3)
      .map(([genre]) => genre)

    const topCreators = Object.entries(creatorCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 2)
      .map(([creator]) => creator)

    const dominantCategory = Object.entries(categoryDistribution)
      .sort(([,a], [,b]) => b - a)[0]?.[0]

    const avgYear = yearPreferences.length > 0 
      ? Math.round(yearPreferences.reduce((a, b) => a + b, 0) / yearPreferences.length)
      : new Date().getFullYear()

    return {
      topGenres,
      topCreators,
      dominantCategory,
      avgYear,
      highRatedItems: highRatedItems.slice(0, 3),
      totalItems: library.length
    }
  }

  const generateRecommendations = async (preferences: any) => {
    const recommendations: ContentItem[] = []
    let reasoning = ''

    try {
      // Strategy 1: More from favorite creators
      if (preferences.topCreators.length > 0) {
        const favoriteCreator = preferences.topCreators[0]
        reasoning = `Because you loved content by ${favoriteCreator}`
      }

      // Strategy 2: Similar genres
      if (preferences.topGenres.length > 0) {
        const favoriteGenre = preferences.topGenres[0]
        
        // Get content in favorite genre
        const allContent = await Promise.all([
          rawgService.getPopularGames().catch(() => []),
          omdbService.getPopularMovies().catch(() => []),
          googleBooksService.getFictionBooks().catch(() => []),
          musicService.getPopularAlbums().catch(() => [])
        ])

        const genreMatches: any[] = []
        
        // Check games
        allContent[0].forEach(game => {
          if (game.genres?.some((g: any) => g.name.toLowerCase().includes(favoriteGenre.toLowerCase()))) {
            const converted = rawgService.convertToAppFormat(game)
            if (!library.some(item => item.id === converted.id)) {
              genreMatches.push(converted)
            }
          }
        })

        // Check movies
        allContent[1].forEach(movie => {
          if (movie.Genre && movie.Genre.toLowerCase().includes(favoriteGenre.toLowerCase())) {
            const converted = omdbService.convertToAppFormat(movie)
            if (!library.some(item => item.id === converted.id)) {
              genreMatches.push(converted)
            }
          }
        })

        // Add top matches
        genreMatches.slice(0, 6).forEach(item => recommendations.push(item))

        if (!reasoning && genreMatches.length > 0) {
          reasoning = `Because you love ${favoriteGenre} content`
        }
      }

      return {
        items: recommendations.slice(0, 6),
        reasoning: reasoning || 'Personalized picks for you'
      }

    } catch (error) {
      console.error('Error generating recommendations:', error)
      return {
        items: [],
        reasoning: 'Unable to generate recommendations'
      }
    }
  }

  const loadForYouRecommendations = async () => {
    try {
      setForYouSection(prev => ({ ...prev, loading: true }))

      const preferences = analyzeLibraryPreferences(library)
      const recommendations = await generateRecommendations(preferences)

      setForYouSection({
        items: recommendations.items,
        reasoning: recommendations.reasoning,
        loading: false
      })

    } catch (error) {
      console.error('Error loading For You recommendations:', error)
      setForYouSection({
        items: [],
        reasoning: 'Unable to load recommendations',
        loading: false
      })
    }
  }

  // Load all content
  const loadAllContent = async () => {
    try {
      await Promise.all([
        loadHeroContent(),
        loadGamesContent(),
        loadMoviesContent(),
        loadBooksContent(),
        loadMusicContent()
      ])
    } catch (error) {
      console.error('Error loading discover content:', error)
    }
  }

  // Load hero content (top items from each category)
  const loadHeroContent = async () => {
    try {
      setHeroLoading(true)
      
      const [games, movies, books] = await Promise.all([
        rawgService.getPopularGames().catch(() => []),
        omdbService.getPopularMovies().catch(() => []),
        googleBooksService.getFictionBooks().catch(() => [])
      ])

      const heroItems = [
        games[0] ? { 
          ...rawgService.convertToAppFormat(games[0]), 
          description: getDescriptionForHero('games'),
          callToAction: getCallToActionForCategory('games')
        } : null,
        movies[0] ? { 
          ...omdbService.convertToAppFormat(movies[0]), 
          description: getDescriptionForHero('movies'),
          callToAction: getCallToActionForCategory('movies')
        } : null,
        books[0] ? { 
          ...googleBooksService.convertToAppFormat(books[0]), 
          description: getDescriptionForHero('books'),
          callToAction: getCallToActionForCategory('books')
        } : null
      ].filter(Boolean)

      setHeroContent(heroItems)
    } catch (error) {
      console.error('Error loading hero content:', error)
    } finally {
      setHeroLoading(false)
    }
  }

  // Load games content
  const loadGamesContent = async () => {
    try {
      const games = await rawgService.getPopularGames()
      const convertedGames = games.map(game => rawgService.convertToAppFormat(game))

      setCategorySections(prev => prev.map(section => 
        section.id === 'trending-games' 
          ? { ...section, items: convertedGames, loading: false }
          : section
      ))
    } catch (error) {
      console.error('Error loading games:', error)
      setCategorySections(prev => prev.map(section => 
        section.id === 'trending-games' 
          ? { ...section, loading: false }
          : section
      ))
    }
  }

  // Load movies content
  const loadMoviesContent = async () => {
    try {
      const movies = await omdbService.getPopularMovies()
      const convertedMovies = movies.map(movie => omdbService.convertToAppFormat(movie))

      setCategorySections(prev => prev.map(section => 
        section.id === 'popular-movies' 
          ? { ...section, items: convertedMovies, loading: false }
          : section
      ))
    } catch (error) {
      console.error('Error loading movies:', error)
      setCategorySections(prev => prev.map(section => 
        section.id === 'popular-movies' 
          ? { ...section, loading: false }
          : section
      ))
    }
  }

  // Load books content
  const loadBooksContent = async () => {
    try {
      const books = await googleBooksService.getFictionBooks()
      const convertedBooks = books.map(book => googleBooksService.convertToAppFormat(book))

      setCategorySections(prev => prev.map(section => 
        section.id === 'new-books' 
          ? { ...section, items: convertedBooks, loading: false }
          : section
      ))
    } catch (error) {
      console.error('Error loading books:', error)
      setCategorySections(prev => prev.map(section => 
        section.id === 'new-books' 
          ? { ...section, loading: false }
          : section
      ))
    }
  }

  // Load music content
  const loadMusicContent = async () => {
    try {
      const albums = await musicService.getPopularAlbums()
      const convertedAlbums = albums.map(album => musicService.convertToAppFormat(album))

      setCategorySections(prev => prev.map(section => 
        section.id === 'hot-albums' 
          ? { ...section, items: convertedAlbums, loading: false }
          : section
      ))
    } catch (error) {
      console.error('Error loading music:', error)
      setCategorySections(prev => prev.map(section => 
        section.id === 'hot-albums' 
          ? { ...section, loading: false }
          : section
      ))
    }
  }

  // Helper functions
  const getDescriptionForHero = (category: string) => {
    const descriptions = {
      games: 'An epic adventure that redefines the gaming experience with stunning visuals and immersive storytelling.',
      movies: 'A cinematic masterpiece that captivates audiences with breathtaking visuals and compelling narrative.',
      books: 'A literary work that has captured readers worldwide with its engaging story and memorable characters.',
      music: 'An album that showcases artistic brilliance and has topped charts around the world.'
    }
    return descriptions[category as keyof typeof descriptions] || 'A remarkable piece of entertainment.'
  }

  const getCallToActionForCategory = (category: string) => {
    switch (category) {
      case 'games': return 'Play Now'
      case 'movies': return 'Watch Now'
      case 'books': return 'Read Now'
      case 'music': return 'Listen Now'
      default: return 'Explore'
    }
  }

  // Event handlers
  const handleItemClick = (item: ContentItem) => {
    const itemIdWithoutPrefix = item.id.replace(/^(game-|movie-|music-|book-)/, '')
    
    switch (item.category) {
      case 'games':
        onOpenGameDetail?.(itemIdWithoutPrefix)
        break
      case 'movies':
        onOpenMovieDetail?.(itemIdWithoutPrefix)
        break
      case 'books':
        onOpenBookDetail?.(itemIdWithoutPrefix)
        break
      case 'music':
        onOpenMusicDetail?.(itemIdWithoutPrefix)
        break
    }
  }

  const handleAddToLibrary = (item: ContentItem, status: MediaStatus = 'want-to-play') => {
    if (!onAddToLibrary) return
    
    setAddingItem(item.id)
    
    const libraryItem = {
      id: item.id,
      title: item.title,
      image: item.image,
      category: item.category,
      year: item.year,
      rating: item.rating,
      genre: item.genre,
      author: item.category === 'books' ? item.author : undefined,
      artist: item.category === 'music' ? item.artist : undefined,
      director: item.category === 'movies' ? item.director : undefined
    }
    
    onAddToLibrary(libraryItem, status)
    
    setTimeout(() => {
      setAddingItem(null)
    }, 1500)
  }

  const handleRemoveFromLibrary = (item: ContentItem) => {
    if (!onDeleteItem) return
    onDeleteItem(item.id)
  }

  const handleHeroAction = (item: ContentItem) => {
    handleItemClick(item)
  }

  const isInLibrary = (itemId: string) => {
    return library.some(item => item.id === itemId || item.id === `${itemId.split('-')[0]}-${itemId.split('-')[1]}`)
  }

  const getStatusOptions = (category: string) => {
    switch (category) {
      case 'games':
        return [
          { value: 'want-to-play', label: 'Want to Play' },
          { value: 'currently-playing', label: 'Playing' },
          { value: 'completed', label: 'Completed' }
        ]
      case 'movies':
        return [
          { value: 'want-to-play', label: 'Want to Watch' },
          { value: 'currently-playing', label: 'Watching' },
          { value: 'completed', label: 'Watched' }
        ]
      case 'books':
        return [
          { value: 'want-to-play', label: 'Want to Read' },
          { value: 'currently-playing', label: 'Reading' },
          { value: 'completed', label: 'Read' }
        ]
      case 'music':
        return [
          { value: 'want-to-play', label: 'Want to Listen' },
          { value: 'currently-playing', label: 'Listening' },
          { value: 'completed', label: 'Listened' }
        ]
      default:
        return [
          { value: 'want-to-play', label: 'Want to Play' },
          { value: 'currently-playing', label: 'Playing' },
          { value: 'completed', label: 'Completed' }
        ]
    }
  }

  const getColorClasses = (color: string) => {
    switch (color) {
      case 'green':
        return {
          bg: 'bg-green-50',
          border: 'border-green-200',
          text: 'text-green-700',
          accent: 'bg-green-500'
        }
      case 'blue':
        return {
          bg: 'bg-blue-50',
          border: 'border-blue-200',
          text: 'text-blue-700',
          accent: 'bg-blue-500'
        }
      case 'orange':
        return {
          bg: 'bg-orange-50',
          border: 'border-orange-200',
          text: 'text-orange-700',
          accent: 'bg-orange-500'
        }
      case 'purple':
        return {
          bg: 'bg-purple-50',
          border: 'border-purple-200',
          text: 'text-purple-700',
          accent: 'bg-purple-500'
        }
      default:
        return {
          bg: 'bg-gray-50',
          border: 'border-gray-200',
          text: 'text-gray-700',
          accent: 'bg-gray-500'
        }
    }
  }

  const getStatusBadge = (status?: 'new' | 'trending' | 'hot', trending?: string) => {
    return null // Removed all badges as requested
  }

  const currentHeroItem = heroContent[currentHeroIndex]

  return (
    <div className="bg-white min-h-screen">
      {/* Header with Settings */}
      <div className="flex items-center justify-between px-6 py-4">
        <div className="flex items-center space-x-4">
          <button 
            onClick={() => setShowPersonalization(true)}
            className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
          >
            <MoreHorizontal className="w-6 h-6 text-gray-700" />
          </button>
        </div>
        
        <h1 className="text-3xl font-bold text-gray-900">Discover</h1>
        
        <div className="flex items-center space-x-4">
          <button className="p-2 hover:bg-gray-100 rounded-lg transition-colors">
            <div className="w-8 h-8 bg-gray-200 rounded-lg flex items-center justify-center">
              <span className="text-gray-600 text-sm">👤</span>
            </div>
          </button>
        </div>
      </div>

      {/* Hero Section - Compact Banner Style */}
      <div className="px-6 pb-6">
        {heroLoading || !currentHeroItem ? (
          <div className="bg-gray-100 rounded-2xl h-48 animate-pulse flex items-center justify-center">
            <Loader2 className="w-8 h-8 text-gray-400 animate-spin" />
          </div>
        ) : (
          <div 
            className="relative bg-white rounded-2xl overflow-hidden shadow-sm border border-gray-100 h-48 cursor-pointer hover:shadow-md transition-shadow"
            onClick={() => handleHeroAction(currentHeroItem)}
          >
            {/* Hero Image - Banner style */}
            <div className="absolute inset-0">
              <img
                src={currentHeroItem.image || ''}
                alt={currentHeroItem.title}
                className="w-full h-full object-cover"
              />
              <div className="absolute inset-0 bg-gradient-to-r from-black/60 via-black/30 to-transparent"></div>
            </div>

            {/* Navigation dots */}
            <div className="absolute top-4 right-4 flex space-x-2">
              {heroContent.map((_, index) => (
                <button
                  key={index}
                  onClick={(e) => {
                    e.stopPropagation()
                    setCurrentHeroIndex(index)
                    setIsAutoplay(false)
                  }}
                  className={`w-2 h-2 rounded-full transition-all duration-300 ${
                    index === currentHeroIndex 
                      ? 'bg-white scale-125' 
                      : 'bg-white/50 hover:bg-white/80'
                  }`}
                />
              ))}
            </div>

            {/* Hero Content - Left aligned */}
            <div className="absolute inset-0 flex items-center">
              <div className="p-6 text-white">
                <div className="bg-black/40 backdrop-blur-sm rounded-lg px-3 py-1.5 mb-3 inline-block">
                  <h2 className="text-2xl font-bold">
                    {currentHeroItem.title}
                  </h2>
                </div>
                
                <div className="flex items-center space-x-4 mb-3">
                  <div className="flex items-center space-x-1">
                    {[1, 2, 3, 4, 5].map((star) => (
                      <Star
                        key={star}
                        size={16}
                        className={`${
                          star <= (currentHeroItem.rating || 0) ? 'text-yellow-400 fill-current' : 'text-white/40'
                        }`}
                      />
                    ))}
                    <span className="ml-2 text-white/90 font-medium">{currentHeroItem.rating || 0}/5</span>
                  </div>
                  
                  <span className="text-white/80">•</span>
                  <span className="text-white/80">{currentHeroItem.year}</span>
                  
                  {currentHeroItem.genre && (
                    <>
                      <span className="text-white/80">•</span>
                      <span className="text-white/80">{currentHeroItem.genre}</span>
                    </>
                  )}
                </div>

                <p className="text-white/90 text-sm leading-relaxed max-w-md">
                  {currentHeroItem.description ? 
                    currentHeroItem.description.substring(0, 120) + (currentHeroItem.description.length > 120 ? '...' : '') :
                    'Discover this amazing content and add it to your library!'
                  }
                </p>
              </div>
            </div>
          </div>
        )}
      </div>

      {/* For You Section with minimum requirement */}
      {library.length >= MIN_LIBRARY_ITEMS ? (
        <div className="px-6 pb-8">
          <div className="mb-4">
            <div className="flex items-center space-x-3">
              <div>
                <h2 className="text-xl font-bold text-gray-900">For You</h2>
                <p className="text-sm text-gray-500">{forYouSection.reasoning}</p>
              </div>
            </div>
          </div>

          {forYouSection.loading ? (
            <div className="flex space-x-4 overflow-x-auto pb-2">
              {[1, 2, 3, 4].map((i) => (
                <div key={i} className="flex-shrink-0 w-32 bg-gray-100 rounded-2xl h-44 animate-pulse"></div>
              ))}
            </div>
          ) : forYouSection.items.length > 0 ? (
            <div className="flex space-x-4 overflow-x-auto pb-2 horizontal-scroll">
              {forYouSection.items.map((item) => (
                <div
                  key={item.id}
                  className="flex-shrink-0 w-32 cursor-pointer"
                  onClick={() => handleItemClick(item)}
                >
                  <div className="relative bg-white rounded-2xl border border-gray-100 hover:border-gray-200 hover:shadow-lg transition-all duration-300 overflow-hidden group">
                    {/* Image */}
                    <div className="relative h-40 overflow-hidden">
                      <img
                        src={item.image || ''}
                        alt={item.title}
                        className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
                      />
                      
                      {/* Add button */}
                      <div className="absolute bottom-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                        {isInLibrary(item.id) ? (
                          <div className="relative">
                            <div className="bg-green-500 text-white p-2 rounded-full shadow-lg flex items-center justify-center">
                              <Check size={14} />
                            </div>
                            <button
                              onClick={(e) => {
                                e.stopPropagation()
                                handleRemoveFromLibrary(item)
                              }}
                              className="absolute -top-1 -right-1 bg-red-500 text-white w-4 h-4 rounded-full flex items-center justify-center text-xs font-bold hover:bg-red-600 transition-colors"
                              title="Remove from library"
                            >
                              ×
                            </button>
                          </div>
                        ) : addingItem === item.id ? (
                          <div className="bg-blue-500 text-white p-2 rounded-full shadow-lg animate-pulse">
                            <Plus size={14} />
                          </div>
                        ) : (
                          <div className="relative">
                            <button 
                              onClick={(e) => {
                                e.stopPropagation()
                                setShowStatusPopup(item.id)
                              }}
                              className="bg-white/90 hover:bg-white text-gray-700 p-2 rounded-full shadow-lg backdrop-blur-sm transition-colors"
                            >
                              <Plus size={14} />
                            </button>

                            {showStatusPopup === item.id && (
                              <>
                                <div 
                                  className="fixed inset-0 z-[998]"
                                  onClick={(e) => {
                                    e.stopPropagation()
                                    setShowStatusPopup(null)
                                  }}
                                />
                                <div 
                                  className="absolute bottom-full right-0 mb-2 bg-white/95 backdrop-blur-xl rounded-xl shadow-lg border border-gray-200 py-2 min-w-36 z-[999]"
                                  onClick={(e) => e.stopPropagation()}
                                >
                                  {getStatusOptions(item.category).map((option) => (
                                    <button
                                      key={option.value}
                                      onClick={(e) => {
                                        e.stopPropagation()
                                        handleAddToLibrary(item, option.value as MediaStatus)
                                        setShowStatusPopup(null)
                                      }}
                                      className="w-full text-left px-3 py-2 text-sm transition-all duration-200 hover:bg-gray-50 text-gray-700 hover:text-gray-900 font-medium"
                                    >
                                      {option.label}
                                    </button>
                                  ))}
                                </div>
                              </>
                            )}
                          </div>
                        )}
                      </div>
                    </div>

                    {/* Content */}
                    <div className="p-3">
                      <h3 className="font-semibold text-gray-900 text-sm line-clamp-1 mb-1">
                        {item.title}
                      </h3>

                      {/* Rating */}
                      <div className="flex items-center space-x-1 mb-1">
                        {[1, 2, 3, 4, 5].map((star) => (
                          <Star
                            key={star}
                            size={10}
                            className={`${
                              star <= (item.rating || 0) ? 'text-yellow-400 fill-current' : 'text-gray-200'
                            }`}
                          />
                        ))}
                        <span className="text-xs text-gray-500 ml-1">{item.rating || 0}/5</span>
                      </div>

                      {/* Meta info */}
                      <div className="flex items-center justify-between text-xs text-gray-500">
                        <span className="truncate">{item.author || item.artist || item.director}</span>
                        <span>{item.year}</span>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8 text-gray-500">
              <p>Add more items to your library for personalized recommendations!</p>
            </div>
          )}
        </div>
      ) : (
        <div className="px-6 pb-8">
          <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-2xl p-6 border border-purple-100">
            <div className="text-center">
              <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <span className="text-2xl">⭐</span>
              </div>
              <h3 className="text-lg font-semibold text-gray-900 mb-2">Personalized Recommendations</h3>
              <p className="text-gray-600 mb-4">
                Please add 10 items to your library to see suggestions tailored to your profile.
              </p>
              <div className="text-sm text-purple-600 bg-purple-100 rounded-lg px-3 py-2 inline-block">
                {library.length}/10 items in your library
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Category Sections - Horizontal Carousels */}
      <div className="space-y-8 pb-24">
        {categorySections
          .filter(section => {
            return visibilitySettings[section.id] !== false
          })
          .map((section) => {
          const colors = getColorClasses(section.color)
          
          return (
            <div key={section.id} className="px-6">
              {/* Section Header */}
              <div className="flex items-center justify-between mb-4">
                <div className="flex items-center space-x-3">
                  <div>
                    <h2 className="text-xl font-bold text-gray-900">{section.title}</h2>
                    <p className="text-sm text-gray-500">{section.subtitle}</p>
                  </div>
                </div>
              </div>

              {/* Horizontal Carousel */}
              {section.loading ? (
                <div className="flex space-x-4 overflow-x-auto pb-2">
                  {[1, 2, 3, 4].map((i) => (
                    <div key={i} className="flex-shrink-0 w-32 bg-gray-100 rounded-2xl h-44 animate-pulse"></div>
                  ))}
                </div>
              ) : (
                <div className="flex space-x-4 overflow-x-auto pb-2 horizontal-scroll">
                  {section.items.map((item) => (
                    <div
                      key={item.id}
                      className="flex-shrink-0 w-32 cursor-pointer"
                      onClick={() => handleItemClick(item)}
                    >
                      <div className="relative bg-white rounded-2xl border border-gray-100 hover:border-gray-200 hover:shadow-lg transition-all duration-300 overflow-hidden group">
                        {/* Image */}
                        <div className="relative h-40 overflow-hidden">
                          <img
                            src={item.image || ''}
                            alt={item.title}
                            className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-500"
                          />
                          
                          {/* Add button */}
                          <div className="absolute bottom-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity">
                            {isInLibrary(item.id) ? (
                              <div className="relative">
                                <div className="bg-green-500 text-white p-2 rounded-full shadow-lg flex items-center justify-center">
                                  <Check size={14} />
                                </div>
                                <button
                                  onClick={(e) => {
                                    e.stopPropagation()
                                    handleRemoveFromLibrary(item)
                                  }}
                                  className="absolute -top-1 -right-1 bg-red-500 text-white w-4 h-4 rounded-full flex items-center justify-center text-xs font-bold hover:bg-red-600 transition-colors"
                                  title="Remove from library"
                                >
                                  ×
                                </button>
                              </div>
                            ) : addingItem === item.id ? (
                              <div className="bg-blue-500 text-white p-2 rounded-full shadow-lg animate-pulse">
                                <Plus size={14} />
                              </div>
                            ) : (
                              <div className="relative">
                                <button 
                                  onClick={(e) => {
                                    e.stopPropagation()
                                    setShowStatusPopup(item.id)
                                  }}
                                  className="bg-white/90 hover:bg-white text-gray-700 p-2 rounded-full shadow-lg backdrop-blur-sm transition-colors"
                                >
                                  <Plus size={14} />
                                </button>

                                {showStatusPopup === item.id && (
                                  <>
                                    <div 
                                      className="fixed inset-0 z-[998]"
                                      onClick={(e) => {
                                        e.stopPropagation()
                                        setShowStatusPopup(null)
                                      }}
                                    />
                                    <div 
                                      className="absolute bottom-full right-0 mb-2 bg-white/95 backdrop-blur-xl rounded-xl shadow-lg border border-gray-200 py-2 min-w-36 z-[999]"
                                      onClick={(e) => e.stopPropagation()}
                                    >
                                      {getStatusOptions(item.category).map((option) => (
                                        <button
                                          key={option.value}
                                          onClick={(e) => {
                                            e.stopPropagation()
                                            handleAddToLibrary(item, option.value as MediaStatus)
                                            setShowStatusPopup(null)
                                          }}
                                          className="w-full text-left px-3 py-2 text-sm transition-all duration-200 hover:bg-gray-50 text-gray-700 hover:text-gray-900 font-medium"
                                        >
                                          {option.label}
                                        </button>
                                      ))}
                                    </div>
                                  </>
                                )}
                              </div>
                            )}
                          </div>
                        </div>

                        {/* Content */}
                        <div className="p-3">
                          <h3 className="font-semibold text-gray-900 text-sm line-clamp-1 mb-1">
                            {item.title}
                          </h3>

                          {/* Rating */}
                          <div className="flex items-center space-x-1 mb-1">
                            {[1, 2, 3, 4, 5].map((star) => (
                              <Star
                                key={star}
                                size={10}
                                className={`${
                                  star <= (item.rating || 0) ? 'text-yellow-400 fill-current' : 'text-gray-200'
                                }`}
                              />
                            ))}
                            <span className="text-xs text-gray-500 ml-1">{item.rating || 0}/5</span>
                          </div>

                          {/* Meta info */}
                          <div className="flex items-center justify-between text-xs text-gray-500">
                            <span className="truncate">{item.author || item.artist || item.director}</span>
                            <span>{item.year}</span>
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          )
        })}
      </div>

      {/* Personalization Modal */}
      {showPersonalization && (
        <>
          <div 
            className="fixed inset-0 bg-black/20 backdrop-blur-sm z-50"
            onClick={() => setShowPersonalization(false)}
          />
          
          <div className="fixed bottom-0 left-0 right-0 bg-white rounded-t-2xl shadow-xl z-50 border-t border-gray-100">
            <div className="flex justify-center pt-4 pb-2">
              <div className="w-8 h-1 bg-gray-200 rounded-full" />
            </div>
            
            <div className="px-6 py-4 border-b border-gray-100">
              <h3 className="text-xl font-semibold text-gray-900">Customize Discover</h3>
              <p className="text-sm text-gray-500 mt-1">Choose what content you want to see</p>
            </div>

            <div className="px-6 py-4 max-h-96 overflow-y-auto">
              <div className="space-y-4">
                {categorySections.map((section) => {
                  const colors = getColorClasses(section.color)
                  return (
                    <div key={section.id} className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <div className={`p-2 rounded-lg ${colors.bg} ${colors.border} border`}>
                          <div className={colors.text}>
                            {section.icon}
                          </div>
                        </div>
                        <div>
                          <h4 className="font-medium text-gray-900">{section.title}</h4>
                          <p className="text-sm text-gray-500">{section.subtitle}</p>
                        </div>
                      </div>
                      
                      <button
                        onClick={() => setVisibilitySettings(prev => ({
                          ...prev,
                          [section.id]: !prev[section.id]
                        }))}
                        className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors ${
                          visibilitySettings[section.id] ? 'bg-blue-600' : 'bg-gray-300'
                        }`}
                      >
                        <span
                          className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                            visibilitySettings[section.id] ? 'translate-x-6' : 'translate-x-1'
                          }`}
                        />
                      </button>
                    </div>
                  )
                })}
              </div>
            </div>

            <div className="px-6 py-4 border-t border-gray-100">
              <button
                onClick={() => setShowPersonalization(false)}
                className="w-full bg-blue-600 hover:bg-blue-700 text-white py-3 rounded-xl font-medium transition-colors"
              >
                Done
              </button>
            </div>

            <div className="h-6 bg-white" />
          </div>
        </>
      )}

      <style jsx>{`
        .line-clamp-1 {
          display: -webkit-box;
          -webkit-line-clamp: 1;
          -webkit-box-orient: vertical;
          overflow: hidden;
        }
        
        .horizontal-scroll {
          -ms-overflow-style: none;
          scrollbar-width: none;
          overflow-x: auto;
          overflow-y: hidden;
          scroll-behavior: smooth;
          scroll-snap-type: x mandatory;
        }
        
        .horizontal-scroll::-webkit-scrollbar {
          display: none;
          height: 0px;
        }
      `}</style>
    </div>
  )
}
</file>

<file path="src/lib/supabase.ts">
// src/lib/supabase.ts
import { createClient } from '@supabase/supabase-js'

// Variables d'environnement chargées de manière sécurisée

// Utilisation des variables d'environnement pour la sécurité
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!

// Vérification que les variables d'environnement sont bien définies
if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase environment variables. Please check your .env.local file.')
}

// Créer le client Supabase
export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false
  }
})

// Test de connexion
export const testSupabaseConnection = async () => {
  try {
    const { data, error } = await supabase.from('library_items').select('*').limit(1)
    if (error && error.code !== 'PGRST116') {
      console.error('❌ Supabase connection error:', error)
      return false
    }
    console.log('✅ Supabase connected successfully!')
    return true
  } catch (error) {
    console.error('❌ Supabase connection failed:', error)
    return false
  }
}
</file>

<file path="src/services/musicService.ts">
// Service pour l'API iTunes/Apple Music - VERSION API COMPLÈTE CORRIGÉE
export interface iTunesAlbum {
  collectionId: number
  artistId: number
  collectionName: string
  artistName: string
  collectionCensoredName?: string
  artistViewUrl?: string
  collectionViewUrl?: string
  artworkUrl30?: string
  artworkUrl60?: string
  artworkUrl100?: string
  collectionPrice?: number
  collectionExplicitness?: string
  trackCount?: number
  copyright?: string
  country?: string
  currency?: string
  releaseDate?: string
  primaryGenreName?: string
  collectionType?: string
  wrapperType: string
  kind?: string
}

export interface iTunesSearchResponse {
  resultCount: number
  results: iTunesAlbum[]
}

class MusicService {
  private readonly baseURL = 'https://itunes.apple.com'
  
  // 🔧 RECHERCHE API PURE AVEC GESTION CORS
  async searchAlbums(query: string, limit: number = 20): Promise<iTunesAlbum[]> {
    const cleanQuery = query.trim()
    
    if (!cleanQuery || cleanQuery.length < 2) {
      console.warn('🎵 Query too short:', cleanQuery)
      return []
    }

    console.log('🎵 iTunes API search for:', cleanQuery, 'Limit:', limit)

    try {
      // 🔧 URL avec paramètres optimisés pour mobile
      const url = `${this.baseURL}/search?` + new URLSearchParams({
        term: cleanQuery,
        media: 'music',
        entity: 'album',
        limit: Math.min(limit, 200).toString(),
        country: 'US',
        explicit: 'Yes'
      }).toString()

      console.log('🎵 iTunes URL:', url)

      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json',
          // 🔧 Headers pour contourner CORS sur mobile
          'User-Agent': 'Mozilla/5.0 (compatible; Music Search)',
        },
        // 🔧 Pas de credentials pour éviter CORS
        mode: 'cors',
        cache: 'default',
        // 🔧 Timeout plus long pour mobile
        signal: AbortSignal.timeout(10000)
      })
      
      console.log('🎵 iTunes response status:', response.status)
      
      if (!response.ok) {
        console.error('🎵 iTunes API Error:', response.status, response.statusText)
        return []
      }
      
      const data: iTunesSearchResponse = await response.json()
      console.log('🎵 iTunes raw response:', data)
      
      if (!data.results || data.results.length === 0) {
        console.log('🎵 No results from iTunes API')
        return []
      }

      // 🔧 Filtrage strict des albums seulement
      const albums = data.results.filter(item => {
        const isValidAlbum = (
          item.wrapperType === 'collection' &&
          item.collectionType === 'Album' &&
          item.collectionName &&
          item.artistName &&
          item.collectionId
        )
        
        if (!isValidAlbum) {
          console.log('🎵 Filtered out invalid item:', item)
        }
        
        return isValidAlbum
      })
      
      console.log('🎵 Filtered albums count:', albums.length)
      albums.slice(0, 5).forEach((album, i) => {
        console.log(`🎵 ${i+1}. ${album.artistName} - ${album.collectionName} (${album.collectionId})`)
      })
      
      // 🔧 Tri par pertinence et date
      const sortedAlbums = this.sortByRelevanceAndDate(albums, cleanQuery)
      
      return sortedAlbums.slice(0, limit)
      
    } catch (err) {
      console.error('🎵 iTunes API search failed:', err)
      
      // 🔧 Diagnostic détaillé de l'erreur avec type safety
      if (err instanceof TypeError && err.message.includes('fetch')) {
        console.error('🎵 Network error - likely CORS or connectivity issue')
      } else if (err instanceof Error && err.name === 'AbortError') {
        console.error('🎵 Request timeout')
      } else if (err instanceof Error) {
        console.error('🎵 Error message:', err.message)
      } else {
        console.error('🎵 Unknown error type:', err)
      }
      
      return []
    }
  }

  // 🔧 TRI PAR PERTINENCE PUIS PAR DATE
  private sortByRelevanceAndDate(albums: iTunesAlbum[], query: string): iTunesAlbum[] {
    const queryLower = query.toLowerCase()
    
    return albums.sort((a, b) => {
      // 1. Correspondance exacte du nom d'artiste
      const aArtistExact = a.artistName.toLowerCase() === queryLower
      const bArtistExact = b.artistName.toLowerCase() === queryLower
      
      if (aArtistExact && !bArtistExact) return -1
      if (!aArtistExact && bArtistExact) return 1
      
      // 2. Correspondance exacte du titre d'album
      const aAlbumExact = a.collectionName.toLowerCase() === queryLower
      const bAlbumExact = b.collectionName.toLowerCase() === queryLower
      
      if (aAlbumExact && !bAlbumExact) return -1
      if (!aAlbumExact && bAlbumExact) return 1
      
      // 3. Correspondance partielle d'artiste
      const aArtistMatch = a.artistName.toLowerCase().includes(queryLower)
      const bArtistMatch = b.artistName.toLowerCase().includes(queryLower)
      
      if (aArtistMatch && !bArtistMatch) return -1
      if (!aArtistMatch && bArtistMatch) return 1
      
      // 4. Correspondance partielle d'album
      const aAlbumMatch = a.collectionName.toLowerCase().includes(queryLower)
      const bAlbumMatch = b.collectionName.toLowerCase().includes(queryLower)
      
      if (aAlbumMatch && !bAlbumMatch) return -1
      if (!aAlbumMatch && bAlbumMatch) return 1
      
      // 5. Date de sortie (plus récent en premier)
      const aYear = new Date(a.releaseDate || '1970').getFullYear()
      const bYear = new Date(b.releaseDate || '1970').getFullYear()
      
      return bYear - aYear
    })
  }

  // 🔧 MÉTHODE ALTERNATIVE AVEC PROXY CORS
  async searchAlbumsWithProxy(query: string, limit: number = 20): Promise<iTunesAlbum[]> {
    try {
      // Option 1: Utiliser un proxy CORS si l'API iTunes est bloquée
      const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(
        `${this.baseURL}/search?term=${encodeURIComponent(query)}&media=music&entity=album&limit=${limit}`
      )}`
      
      console.log('🎵 Using CORS proxy:', proxyUrl)
      
      const response = await fetch(proxyUrl)
      const data = await response.json()
      const iTunesData = JSON.parse(data.contents)
      
      return iTunesData.results || []
      
    } catch (err) {
      console.error('🎵 Proxy search failed:', err)
      return []
    }
  }

  // Test de connectivité iTunes
  async testItunesConnectivity(): Promise<boolean> {
    try {
      console.log('🎵 Testing iTunes API connectivity...')
      
      const testUrl = `${this.baseURL}/search?term=test&media=music&entity=album&limit=1`
      const response = await fetch(testUrl, {
        method: 'GET',
        signal: AbortSignal.timeout(5000)
      })
      
      const isConnected = response.ok
      console.log('🎵 iTunes API connectivity:', isConnected ? 'OK' : 'FAILED')
      
      return isConnected
      
    } catch (err) {
      console.error('🎵 iTunes connectivity test failed:', err)
      return false
    }
  }

  // Obtenir les détails d'un album
  async getAlbumDetails(albumId: string): Promise<iTunesAlbum | null> {
    try {
      const response = await fetch(
        `${this.baseURL}/lookup?id=${albumId}&entity=album`,
        { signal: AbortSignal.timeout(8000) }
      )
      
      if (!response.ok) {
        throw new Error(`iTunes API Error: ${response.status}`)
      }
      
      const data: iTunesSearchResponse = await response.json()
      return data.results?.[0] || null
    } catch (err) {
      console.error('Error fetching album details:', err)
      return null
    }
  }

  // Albums populaires (utilise l'API pour de vrais résultats)
  async getPopularAlbums(): Promise<iTunesAlbum[]> {
    try {
      // Rechercher les artistes populaires actuels
      const popularArtists = ['Taylor Swift', 'Drake', 'Billie Eilish', 'The Weeknd']
      
      const allAlbums: iTunesAlbum[] = []
      
      for (const artist of popularArtists) {
        try {
          const albums = await this.searchAlbums(artist, 3)
          allAlbums.push(...albums.slice(0, 2)) // 2 albums par artiste
        } catch (err) {
          console.warn(`Failed to get albums for ${artist}:`, err)
        }
      }
      
      return allAlbums.slice(0, 8)
      
    } catch (err) {
      console.error('Error getting popular albums:', err)
      return []
    }
  }

  async getTopRatedAlbums(): Promise<iTunesAlbum[]> {
    // Recherche d'albums classiques bien notés
    return this.searchAlbums('greatest albums of all time', 8)
  }

  async getNewReleases(): Promise<iTunesAlbum[]> {
    // Recherche d'albums récents
    const currentYear = new Date().getFullYear()
    return this.searchAlbums(`new albums ${currentYear}`, 8)
  }

  getBestImageURL(album: iTunesAlbum, preferredSize: 'small' | 'medium' | 'large' = 'medium'): string | null {
    const sizePreferences = {
      small: ['artworkUrl60', 'artworkUrl30', 'artworkUrl100'],
      medium: ['artworkUrl100', 'artworkUrl60', 'artworkUrl30'],
      large: ['artworkUrl100', 'artworkUrl60', 'artworkUrl30']
    }

    const preferences = sizePreferences[preferredSize]
    
    for (const size of preferences) {
      const url = album[size as keyof iTunesAlbum] as string
      if (url) {
        // Améliorer la qualité de l'image
        return url.replace('100x100', '400x400').replace('60x60', '400x400').replace('30x30', '400x400')
      }
    }

    return null
  }

  getReleasedYear(album: iTunesAlbum): number {
    if (!album.releaseDate) return new Date().getFullYear()
    return new Date(album.releaseDate).getFullYear()
  }

  cleanAlbumName(name: string): string {
    if (!name) return ''
    return name
      .replace(/\(Explicit\)/gi, '')
      .replace(/\(Clean\)/gi, '')
      .replace(/\(Deluxe\)/gi, '(Deluxe)')
      .trim()
  }

  convertToAppFormat(album: iTunesAlbum): any {
    return {
      id: `music-${album.collectionId}`,
      title: this.cleanAlbumName(album.collectionName || 'Unknown Album'),
      artist: album.artistName || 'Unknown Artist',
      year: this.getReleasedYear(album),
      rating: 0,
      genre: album.primaryGenreName || 'Unknown',
      category: 'music' as const,
      image: this.getBestImageURL(album, 'medium'),
      
      trackCount: album.trackCount || 0,
      copyright: album.copyright,
      collectionPrice: album.collectionPrice,
      currency: album.currency,
      country: album.country,
      releaseDate: album.releaseDate,
      collectionViewUrl: album.collectionViewUrl,
      artistViewUrl: album.artistViewUrl,
      collectionType: album.collectionType || 'Album'
    }
  }

  async getAlbumsByArtist(artistName: string, limit: number = 10): Promise<iTunesAlbum[]> {
    return this.searchAlbums(artistName, limit)
  }

  async getSimilarAlbums(album: iTunesAlbum, limit: number = 6): Promise<iTunesAlbum[]> {
    try {
      const genre = album.primaryGenreName || album.artistName
      const albums = await this.searchAlbums(genre, limit + 5)
      
      return albums
        .filter(a => a.collectionId !== album.collectionId)
        .slice(0, limit)
    } catch (err) {
      console.error('Error fetching similar albums:', err)
      return []
    }
  }
}

export const musicService = new MusicService()

// Fonctions utilitaires
export const formatTrackCount = (trackCount: number): string => {
  if (!trackCount) return 'Unknown'
  return `${trackCount} track${trackCount !== 1 ? 's' : ''}`
}

export const formatPrice = (price: number, currency: string): string => {
  if (!price || !currency) return 'Price not available'
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency || 'USD'
  }).format(price)
}

export const formatDuration = (trackCount: number): string => {
  if (!trackCount) return 'Unknown duration'
  
  const averageTrackDuration = 3.5
  const totalMinutes = Math.round(trackCount * averageTrackDuration)
  
  if (totalMinutes < 60) return `~${totalMinutes} min`
  
  const hours = Math.floor(totalMinutes / 60)
  const minutes = totalMinutes % 60
  
  return `~${hours}h ${minutes}m`
}
</file>

<file path="src/services/omdbService.ts">
// src/services/omdbService.ts - VERSION FINALE SANS ERREURS
export interface OMDBMovie {
  imdbID: string
  Title: string
  Year: string
  Type: string
  Poster: string
  Plot?: string
  Director?: string
  Genre?: string
  imdbRating?: string
  Runtime?: string
  Released?: string
  Actors?: string
  Language?: string
  Country?: string
  Awards?: string
  Response?: string
  Error?: string
  totalSeasons?: string
  Seasons?: string
}

export interface OMDBSearchResponse {
  Search: OMDBMovie[]
  totalResults: string
  Response: string
  Error?: string
}

class OMDBService {
  private readonly apiKey = '649f9a63'
  private readonly baseURL = 'https://www.omdbapi.com'

  // ✅ FONCTION SIMPLE POUR DÉTECTER LES JEUX VIDÉO
  private isVideoGame(item: OMDBMovie): boolean {
    const title = (item.Title || '').toLowerCase()
    
    // Liste simple des jeux à exclure
    const gameList = [
      'assassin\'s creed origins',
      'assassin\'s creed odyssey', 
      'assassin\'s creed valhalla',
      'assassin\'s creed brotherhood',
      'assassin\'s creed revelations',
      'assassin\'s creed unity',
      'assassin\'s creed syndicate'
    ]
    
    // Vérification simple
    for (let i = 0; i < gameList.length; i++) {
      if (title.includes(gameList[i])) {
        return true
      }
    }
    
    return false
  }

  // ✅ VALIDATION SIMPLE
  private isValidMovieOrSeries(item: OMDBMovie): boolean {
    if (!item.Type) return false
    if (item.Type !== 'movie' && item.Type !== 'series') return false
    if (this.isVideoGame(item)) return false
    if (!item.Year || !item.Title) return false
    
    return true
  }

  // ✅ RECHERCHE SIMPLIFIÉE
  private async performSearch(query: string, page: number = 1): Promise<OMDBMovie[]> {
    try {
      const url = `${this.baseURL}/?apikey=${this.apiKey}&s=${encodeURIComponent(query)}&page=${page}`
      
      const response = await fetch(url)
      if (!response.ok) return []
      
      const data: OMDBSearchResponse = await response.json()
      if (data.Response === 'False' || !data.Search) return []
      
      // Filtrer les résultats
      const filtered: OMDBMovie[] = []
      for (let i = 0; i < data.Search.length; i++) {
        const item = data.Search[i]
        if (this.isValidMovieOrSeries(item)) {
          filtered.push(item)
        }
      }
      
      return filtered
      
    } catch (error) {
      console.error('Search error:', error)
      return []
    }
  }

  // ✅ RECHERCHE PRINCIPALE
  async searchMoviesAndSeries(query: string, page: number = 1): Promise<OMDBMovie[]> {
    try {
      if (!query) return []
      
      const results = await this.performSearch(query, page)
      
      // Tri simple par année
      results.sort((a, b) => {
        const yearA = parseInt(a.Year) || 0
        const yearB = parseInt(b.Year) || 0
        return yearB - yearA
      })
      
      return results.slice(0, 10)
      
    } catch (error) {
      console.error('Search movies and series error:', error)
      return []
    }
  }

  // ✅ RECHERCHE FILMS UNIQUEMENT
  async searchMovies(query: string, page: number = 1): Promise<OMDBMovie[]> {
    try {
      const results = await this.searchMoviesAndSeries(query, page)
      const movies: OMDBMovie[] = []
      
      for (let i = 0; i < results.length; i++) {
        if (results[i].Type === 'movie') {
          movies.push(results[i])
        }
      }
      
      return movies
    } catch (error) {
      return []
    }
  }

  // ✅ RECHERCHE SÉRIES UNIQUEMENT
  async searchSeries(query: string, page: number = 1): Promise<OMDBMovie[]> {
    try {
      const results = await this.searchMoviesAndSeries(query, page)
      const series: OMDBMovie[] = []
      
      for (let i = 0; i < results.length; i++) {
        if (results[i].Type === 'series') {
          series.push(results[i])
        }
      }
      
      return series
    } catch (error) {
      return []
    }
  }

  // ✅ DÉTAILS D'UN FILM
  async getMovieDetails(imdbId: string): Promise<OMDBMovie | null> {
    try {
      if (!imdbId) return null
      
      const response = await fetch(`${this.baseURL}/?apikey=${this.apiKey}&i=${imdbId}&plot=full`)
      if (!response.ok) return null
      
      const movie: OMDBMovie = await response.json()
      if (movie.Response === 'False') return null
      
      return movie
    } catch (error) {
      return null
    }
  }

  // ✅ FILMS POPULAIRES
  async getPopularMovies(): Promise<OMDBMovie[]> {
    const ids = [
      'tt0111161', 'tt0068646', 'tt0468569', 'tt0071562',
      'tt0050083', 'tt0108052', 'tt0167260', 'tt0110912'
    ]

    const movies: OMDBMovie[] = []
    
    for (let i = 0; i < ids.length; i++) {
      try {
        const movie = await this.getMovieDetails(ids[i])
        if (movie) movies.push(movie)
      } catch (error) {
        console.warn(`Error fetching movie ${ids[i]}`)
      }
    }
    
    return movies
  }

  // ✅ SÉRIES POPULAIRES
  async getPopularSeries(): Promise<OMDBMovie[]> {
    const ids = [
      'tt0944947', 'tt0903747', 'tt2356777', 'tt1475582',
      'tt0141842', 'tt2395695', 'tt4574334', 'tt0386676'
    ]

    const series: OMDBMovie[] = []
    
    for (let i = 0; i < ids.length; i++) {
      try {
        const show = await this.getMovieDetails(ids[i])
        if (show) series.push(show)
      } catch (error) {
        console.warn(`Error fetching series ${ids[i]}`)
      }
    }
    
    return series
  }

  // ✅ CONTENU POPULAIRE MIXTE
  async getPopularMoviesAndSeries(): Promise<OMDBMovie[]> {
    try {
      const movies = await this.getPopularMovies()
      const series = await this.getPopularSeries()
      
      const combined: OMDBMovie[] = []
      combined.push(...movies.slice(0, 4))
      combined.push(...series.slice(0, 4))
      
      return this.shuffleArray(combined)
    } catch (error) {
      return []
    }
  }

  // ✅ TOP RATED
  async getTopRatedMovies(): Promise<OMDBMovie[]> {
    return this.getPopularMovies()
  }

  // ✅ CONTENU RÉCENT
  async getRecentMovies(): Promise<OMDBMovie[]> {
    const ids = [
      'tt6751668', 'tt7286456', 'tt1950186', 'tt4154756',
      'tt4633694', 'tt4574334', 'tt2380307', 'tt8503618'
    ]

    const items: OMDBMovie[] = []
    
    for (let i = 0; i < ids.length; i++) {
      try {
        const item = await this.getMovieDetails(ids[i])
        if (item) items.push(item)
      } catch (error) {
        console.warn(`Error fetching recent item ${ids[i]}`)
      }
    }
    
    return items
  }

  // ✅ RECHERCHE CONTENU RÉCENT
  async searchRecentContent(query: string): Promise<OMDBMovie[]> {
    const currentYear = new Date().getFullYear()
    const years = [currentYear, currentYear - 1, currentYear - 2]
    
    const allResults: OMDBMovie[] = []
    
    for (let i = 0; i < years.length; i++) {
      try {
        const yearResults = await this.performSearch(`${query} ${years[i]}`)
        allResults.push(...yearResults)
      } catch (error) {
        console.warn(`Error searching ${query} ${years[i]}`)
      }
    }
    
    // Supprimer les doublons
    const unique: OMDBMovie[] = []
    const seen: string[] = []
    
    for (let i = 0; i < allResults.length; i++) {
      const movie = allResults[i]
      if (!seen.includes(movie.imdbID)) {
        seen.push(movie.imdbID)
        unique.push(movie)
      }
    }
    
    return unique
  }

  // ✅ CONVERSION AU FORMAT APP
  convertToAppFormat(item: OMDBMovie): any {
    const isMovie = item.Type === 'movie'
    const isSeries = item.Type === 'series'
    const director = (item.Director && item.Director !== 'N/A') ? item.Director : 'Unknown Director'
    
    return {
      id: `movie-${item.imdbID}`,
      title: item.Title || 'Unknown Title',
      director: director,
      author: director,
      year: parseInt(item.Year) || new Date().getFullYear(),
      rating: item.imdbRating ? Number((parseFloat(item.imdbRating) / 2).toFixed(1)) : 0,
      genre: item.Genre ? item.Genre.split(',')[0].trim() : 'Unknown',
      category: 'movies' as const,
      image: (item.Poster !== 'N/A') ? item.Poster : undefined,
      overview: item.Plot,
      runtime: item.Runtime,
      released: item.Released,
      actors: item.Actors,
      language: item.Language,
      country: item.Country,
      awards: item.Awards,
      type: item.Type,
      isMovie,
      isSeries,
      totalSeasons: item.totalSeasons ? parseInt(item.totalSeasons) : undefined,
      displayTitle: isSeries ? `${item.Title} (TV Series)` : item.Title
    }
  }

  // ✅ MÉLANGER ARRAY - VERSION ULTRA SIMPLE
  private shuffleArray<T>(array: T[]): T[] {
    if (!array || array.length === 0) return []
    
    const result = [...array]
    
    for (let i = result.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1))
      const temp = result[i]
      result[i] = result[j]
      result[j] = temp
    }
    
    return result
  }
}

// Export de l'instance
export const omdbService = new OMDBService()

// ✅ FONCTIONS UTILITAIRES SIMPLES
export const formatRuntime = (runtime: string): string => {
  if (!runtime || runtime === 'N/A') return 'N/A'
  return runtime
}

export const formatRating = (rating: string): number => {
  if (!rating || rating === 'N/A') return 0
  const num = parseFloat(rating)
  if (isNaN(num)) return 0
  return Number((num / 2).toFixed(1))
}

export const getContentTypeLabel = (type: string): string => {
  if (type === 'movie') return 'Film'
  if (type === 'series') return 'Série TV'
  return 'Contenu'
}
</file>

<file path="src/components/CategoryTabs.tsx">
'use client'

interface CategoryTabsProps {
  activeTab: string
  onTabChange: (tab: string) => void
}

export default function CategoryTabs({ activeTab, onTabChange }: CategoryTabsProps) {
  const tabs = [
    { id: 'books', name: 'Books' },
    { id: 'games', name: 'Games' },
    { id: 'movies', name: 'Films & TV' },
    { id: 'music', name: 'Music' },
  ]

  return (
    <div className="flex w-full border-b border-gray-200 mb-0">
      {tabs.map((tab) => (
        <button
          key={tab.id}
          onClick={() => onTabChange(tab.id)}
          className={`flex-1 pb-3 pt-2 text-sm font-medium transition-colors relative text-center whitespace-nowrap ${
            activeTab === tab.id
              ? 'text-gray-900'
              : 'text-gray-500 hover:text-gray-700'
          }`}
        >
          {tab.name}
          {/* Soulignement pour l'onglet actif */}
          {activeTab === tab.id && (
            <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-gray-900 rounded-full" />
          )}
        </button>
      ))}
    </div>
  )
}
</file>

<file path="src/types/index.ts">
// src/types/index.ts - TYPES CORRIGÉS AVEC NOUVELLES PROPRIÉTÉS
/**
 * Types TypeScript centralisés pour toute l'application
 * Assure la cohérence des types et évite la duplication
 */

// Types de base pour les médias
export type MediaCategory = 'games' | 'movies' | 'music' | 'books'
export type MediaStatus = 'want-to-play' | 'currently-playing' | 'completed' | 'paused' | 'dropped'

// Interface pour les items de contenu (recherche, sections, etc.)
export interface ContentItem {
  id: string
  title: string
  year: number
  rating?: number
  genre?: string
  category: MediaCategory
  image?: string
  
  // Créateurs selon le type de média
  author?: string      // Pour les livres
  artist?: string      // Pour la musique
  director?: string    // Pour les films
  developer?: string   // ✅ Pour les jeux
  
  // ✅ NOUVELLES PROPRIÉTÉS POUR LES JEUX
  background_image?: string
  developers?: Array<{ name: string }>
  publishers?: Array<{ name: string }>  // ✅ AJOUTÉ
  genres?: Array<{ name: string }>
  platforms?: Array<{ platform: { name: string } }>
  released?: string
  
  // Propriété alternative pour les noms
  name?: string
  
  // PROPRIÉTÉS pour films/séries
  type?: string        // 'movie' ou 'series'
  isMovie?: boolean    // true si c'est un film
  isSeries?: boolean   // true si c'est une série TV
  totalSeasons?: number // Nombre de saisons pour les séries
  displayTitle?: string // Titre avec indication "(TV Series)" si nécessaire
  overview?: string    // Synopsis/description
  runtime?: string     // Durée
  actors?: string      // Acteurs principaux
  language?: string    // Langue
  country?: string     // Pays
  awards?: string      // Récompenses

  // PROPRIÉTÉS pour Discover Page
  subtitle?: string    // Sous-titre pour hero section
  description?: string // Description détaillée
  trending?: string    // Pourcentage de tendance ex: "+25%"
  status?: 'new' | 'trending' | 'hot' | undefined // Badge status
  callToAction?: string // Texte du bouton d'action
  stats?: {
    users?: string      // Nombre d'utilisateurs ex: "2.5M"
    completion?: string // Pourcentage de completion ex: "85%"
    trending?: string   // Tendance ex: "+15%"
    engagement?: string // Engagement ex: "92%"
  }

  // ✅ PROPRIÉTÉS SUPPLÉMENTAIRES POUR LES JEUX
  description_raw?: string
  metacritic?: number
  esrb_rating?: { name: string }
  tags?: Array<{ name: string }>
  rating_count?: number
  parent_platforms?: Array<{ platform: { name: string } }>
  website?: string
  stores?: Array<{ store: { name: string }, url: string }>
  screenshots?: Array<{ image: string }>

  // ✅ PROPRIÉTÉS SUPPLÉMENTAIRES POUR LA MUSIQUE
  trackCount?: number
  copyright?: string
  collectionPrice?: number
  currency?: string
  collectionViewUrl?: string
  artistViewUrl?: string
  collectionType?: string

  // ✅ PROPRIÉTÉS SUPPLÉMENTAIRES POUR LES LIVRES
  isbn?: string
  pageCount?: number
  publishedDate?: string
  publisher?: string
  previewLink?: string
  infoLink?: string
  canonicalVolumeLink?: string
  isEbook?: boolean
  buyLink?: string
  price?: string
  webReaderLink?: string
  epubAvailable?: boolean
  pdfAvailable?: boolean
}

// ✅ Interface pour les résultats de recherche (hérite de ContentItem)
export interface SearchResult extends ContentItem {
  // Hérite de toutes les propriétés de ContentItem
  // Pas besoin d'ajouter d'autres propriétés spécifiques
}

// Interface pour les items dans la bibliothèque utilisateur
export interface LibraryItem {
  id: string
  title: string
  year: number
  rating?: number
  genre?: string
  category: MediaCategory
  image?: string
  
  // Créateurs selon le type de média
  author?: string      // Pour les livres
  artist?: string      // Pour la musique
  director?: string    // Pour les films
  developer?: string   // ✅ Pour les jeux
  
  // ✅ NOUVELLES PROPRIÉTÉS POUR LES JEUX
  background_image?: string
  developers?: Array<{ name: string }>
  publishers?: Array<{ name: string }>  // ✅ AJOUTÉ
  genres?: Array<{ name: string }>
  released?: string
  
  // Propriété alternative pour les noms
  name?: string
  
  // PROPRIÉTÉS pour films/séries
  type?: string        // 'movie' ou 'series'
  isMovie?: boolean    // true si c'est un film
  isSeries?: boolean   // true si c'est une série TV
  totalSeasons?: number // Nombre de saisons pour les séries
  displayTitle?: string // Titre avec indication "(TV Series)" si nécessaire
  overview?: string    // Synopsis/description
  runtime?: string     // Durée
  actors?: string      // Acteurs principaux
  language?: string    // Langue
  country?: string     // Pays
  awards?: string      // Récompenses

  // Propriétés spécifiques à la bibliothèque
  status: MediaStatus
  addedAt: string
  dateStarted?: string
  dateCompleted?: string
  userRating?: number    // Note utilisateur (1-5)
  progress?: number      // Progression en % (0-100)
  notes?: string         // Notes personnelles
}

// Interface pour les reviews/critiques
export interface Review {
  id: string | number
  username: string
  rating: number
  text?: string
  review?: string  // Alias pour text
  date: string
  helpful?: number
  platform?: string
}

// Options de statut pour les popups
export interface StatusOption {
  value: MediaStatus
  label: string
}
</file>

<file path="src/components/BookDetailModal.tsx">
'use client'
import { useState, useEffect, useRef } from 'react'
import { X, Star, ExternalLink, Calendar, BookOpen, Award, Users, Globe, Eye, Check } from 'lucide-react'
import { googleBooksService, formatPageCount, formatPublisher, getReadingTime } from '@/services/googleBooksService'
import type { LibraryItem, Review, MediaStatus } from '@/types'

interface BookDetailModalProps {
  isOpen: boolean
  onClose: () => void
  bookId: string
  onAddToLibrary: (item: any, status: MediaStatus) => void
  onDeleteItem?: (id: string) => void
  library: LibraryItem[]
  userReviews: Review[]
  goodreadsReviews: Review[]
  onReviewSubmit: (reviewData: any) => void
}

interface BookDetail {
  id: string
  volumeInfo: {
    title: string
    subtitle?: string
    authors?: string[]
    publisher?: string
    publishedDate?: string
    description?: string
    pageCount?: number
    categories?: string[]
    averageRating?: number
    ratingsCount?: number
    imageLinks?: {
      thumbnail?: string
      small?: string
      medium?: string
      large?: string
    }
    language?: string
    previewLink?: string
    infoLink?: string
    canonicalVolumeLink?: string
  }
  saleInfo?: {
    isEbook?: boolean
    buyLink?: string
    listPrice?: { amount: number, currencyCode: string }
  }
  accessInfo?: {
    webReaderLink?: string
    epub?: { isAvailable: boolean }
    pdf?: { isAvailable: boolean }
  }
}

export default function BookDetailModal({ 
  isOpen, 
  onClose, 
  bookId, 
  onAddToLibrary, 
  onDeleteItem,
  library, 
  userReviews, 
  goodreadsReviews, 
  onReviewSubmit 
}: BookDetailModalProps) {
  const [bookDetail, setBookDetail] = useState<BookDetail | null>(null)
  const [loading, setLoading] = useState(false)
  const [activeTab, setActiveTab] = useState<'info' | 'social' | 'more'>('info')
  const [selectedStatus, setSelectedStatus] = useState<MediaStatus | null>(null)
  const [userRating, setUserRating] = useState<number>(0)
  const [hoverRating, setHoverRating] = useState<number>(0)
  const [showReviewBox, setShowReviewBox] = useState(false)
  const [userReview, setUserReview] = useState('')
  const [similarBooks, setSimilarBooks] = useState<any[]>([])
  const [authorBooks, setAuthorBooks] = useState<any[]>([])

  const scrollableRef = useRef<HTMLDivElement>(null)

  const bookStats = {
    'want-to-play': 3241,
    'currently-playing': 1856,
    'completed': 12923
  }

  useEffect(() => {
    if (isOpen) {
      setActiveTab('info')
      setSimilarBooks([])
      setAuthorBooks([])
    }
  }, [isOpen, bookId])

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden'
    } else {
      document.body.style.overflow = 'unset'
    }
    
    return () => {
      document.body.style.overflow = 'unset'
    }
  }, [isOpen])

  useEffect(() => {
    if (isOpen && bookId) {
      fetchBookDetail()
    }
  }, [isOpen, bookId])

  // 🔧 SIMPLIFIÉ: Même logique que GameDetailModal
  useEffect(() => {
    console.log('📚 Simple status check for bookId:', bookId)
    console.log('📚 Library items:', library.map(item => `${item.id} (${item.title})`))
    
    const libraryItem = library.find(item => item.id === bookId)
    if (libraryItem) {
      console.log('📚 ✅ Found in library:', libraryItem)
      setSelectedStatus(libraryItem.status)
    } else {
      console.log('📚 ❌ Not found in library')
      setSelectedStatus(null)
    }
  }, [bookId, library])

  const fetchBookDetail = async () => {
    if (!bookId) return
    
    setLoading(true)
    try {
      let googleBookId = bookId
      
      if (bookId.startsWith('book-')) {
        googleBookId = bookId.replace('book-', '')
      }
      
      console.log('📚 Fetching book details for ID:', googleBookId)
      
      const data = await googleBooksService.getBookDetails(googleBookId)
      setBookDetail(data as BookDetail)
      
      console.log('📚 Book detail fetched:', data)
      
      if (data?.volumeInfo) {
        if (data.volumeInfo.categories?.length) {
          await fetchSimilarBooks(data)
        }
        if (data.volumeInfo.authors?.length) {
          await fetchAuthorBooks(data.volumeInfo.authors[0], data.id)
        }
      }
      
    } catch (error) {
      console.error('Erreur lors du chargement des détails:', error)
      setBookDetail(null)
    } finally {
      setLoading(false)
    }
  }

  const fetchSimilarBooks = async (book: BookDetail) => {
    try {
      const similarBooksData = await googleBooksService.getSimilarBooks(book as any, 6)
      const convertedBooks = similarBooksData.map(book => googleBooksService.convertToAppFormat(book))
      setSimilarBooks(convertedBooks)
    } catch (error) {
      console.error('Error fetching similar books:', error)
      setSimilarBooks([])
    }
  }

  const fetchAuthorBooks = async (author: string, excludeBookId: string) => {
    try {
      const authorBooksData = await googleBooksService.getBooksByAuthor(author, 8)
      const filteredBooks = authorBooksData
        .filter(book => book.id !== excludeBookId)
        .slice(0, 6)
        .map(book => googleBooksService.convertToAppFormat(book))
      
      setAuthorBooks(filteredBooks)
    } catch (error) {
      console.error('Error fetching author books:', error)
      setAuthorBooks([])
    }
  }

  // 🔧 SIMPLIFIÉ: Même logique que GameDetailModal
  const handleStatusSelect = (status: MediaStatus) => {
    if (!bookDetail) return
    
    console.log('📚 Adding book to library with bookId:', bookId)
    
    const bookItem = {
      id: bookId, // 🔑 UTILISE DIRECTEMENT bookId comme GameDetailModal
      title: bookDetail.volumeInfo.title,
      image: googleBooksService.getBestImageURL(bookDetail as any, 'medium'),
      category: 'books' as const,
      year: googleBooksService.getPublicationYear(bookDetail as any),
      rating: bookDetail.volumeInfo.averageRating || 0,
      author: bookDetail.volumeInfo.authors?.[0] || 'Unknown Author'
    }
    
    onAddToLibrary(bookItem, status)
    setSelectedStatus(status)
  }

  const getStatusLabel = (status: MediaStatus) => {
    switch (status) {
      case 'want-to-play': return 'Want to Read'
      case 'currently-playing': return 'Reading'
      case 'completed': return 'Read'
      case 'paused': return 'Paused'
      case 'dropped': return 'Dropped'
      default: return status
    }
  }

  const getStatusColor = (status: MediaStatus) => {
    switch (status) {
      case 'want-to-play': return 'bg-orange-500 hover:bg-orange-600 text-white'
      case 'currently-playing': return 'bg-green-500 hover:bg-green-600 text-white'
      case 'completed': return 'bg-blue-500 hover:bg-blue-600 text-white'
      case 'paused': return 'bg-yellow-500 hover:bg-yellow-600 text-white'
      case 'dropped': return 'bg-red-500 hover:bg-red-600 text-white'
      default: return 'bg-gray-500 hover:bg-gray-600 text-white'
    }
  }

  const handleSubmitReview = () => {
    if (userRating > 0 && userReview.trim()) {
      onReviewSubmit({
        rating: userRating,
        review: userReview.trim()
      })
      
      setShowReviewBox(false)
      setUserReview('')
      setUserRating(0)
    }
  }

  if (!isOpen) return null

  return (
    <div 
      className="fixed inset-0 bg-black/20 backdrop-blur-sm z-50 flex items-center justify-center p-4"
      onClick={(e) => {
        if (e.target === e.currentTarget) {
          onClose()
        }
      }}
    >
      <div 
        className="bg-white rounded-2xl w-full max-w-4xl h-[90vh] overflow-hidden flex flex-col shadow-xl border border-gray-100"
        onClick={(e) => e.stopPropagation()}
      >
        {loading ? (
          <div className="flex items-center justify-center py-20">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          </div>
        ) : bookDetail ? (
          <>
            {/* Header */}
            <div className="relative bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
              <button
                onClick={onClose}
                className="absolute top-4 right-4 text-gray-500 hover:text-gray-700 z-10 p-2 hover:bg-white/80 rounded-full transition-colors"
              >
                <X size={20} />
              </button>
              
              <div className="p-6 flex items-center space-x-4">
                <div className="w-20 h-28 rounded-xl border border-gray-200 shadow-sm overflow-hidden bg-gray-100 flex-shrink-0">
                  {googleBooksService.getBestImageURL(bookDetail as any, 'medium') ? (
                    <img
                      src={googleBooksService.getBestImageURL(bookDetail as any, 'medium')!}
                      alt={bookDetail.volumeInfo.title}
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center text-2xl">
                      📚
                    </div>
                  )}
                </div>
                
                <div className="flex-1">
                  <h1 className="text-2xl font-bold text-gray-900 mb-1">{bookDetail.volumeInfo.title}</h1>
                  {bookDetail.volumeInfo.subtitle && (
                    <h2 className="text-lg text-gray-600 mb-2">{bookDetail.volumeInfo.subtitle}</h2>
                  )}
                  
                  <div className="flex items-center space-x-4 mb-2">
                    <span className="text-gray-700 font-medium">
                      {bookDetail.volumeInfo.authors?.join(', ') || 'Unknown Author'}
                    </span>
                    {bookDetail.volumeInfo.pageCount && (
                      <>
                        <span className="text-gray-600">•</span>
                        <span className="text-gray-600">{formatPageCount(bookDetail.volumeInfo.pageCount)}</span>
                      </>
                    )}
                  </div>
                  
                  <div className="flex items-center space-x-4 text-sm text-gray-600 mb-2">
                    {bookDetail.volumeInfo.publisher && (
                      <span>{formatPublisher(bookDetail.volumeInfo.publisher, bookDetail.volumeInfo.publishedDate || '')}</span>
                    )}
                    {bookDetail.volumeInfo.pageCount && (
                      <>
                        <span>•</span>
                        <span>{getReadingTime(bookDetail.volumeInfo.pageCount)}</span>
                      </>
                    )}
                  </div>
                  
                  {bookDetail.volumeInfo.averageRating && (
                    <div className="flex items-center space-x-2">
                      <div className="flex">
                        {[1, 2, 3, 4, 5].map((star) => (
                          <Star
                            key={star}
                            size={16}
                            className={`${
                              star <= bookDetail.volumeInfo.averageRating! ? 'text-yellow-500 fill-current' : 'text-gray-300'
                            }`}
                          />
                        ))}
                      </div>
                      <span className="text-sm text-gray-600">
                        {bookDetail.volumeInfo.averageRating?.toFixed(1)}/5
                        {bookDetail.volumeInfo.ratingsCount && ` (${bookDetail.volumeInfo.ratingsCount.toLocaleString()} reviews)`}
                      </span>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Content */}
            <div ref={scrollableRef} className="flex-1 overflow-y-auto">
              {/* 🔧 EXACTEMENT comme GameDetailModal */}
              <div className="p-6 border-b border-gray-100">
                <div className="flex space-x-3 mb-4">
                  {(['want-to-play', 'currently-playing', 'completed'] as const).map((status) => (
                    <button
                      key={status}
                      onClick={() => {
                        // 🔑 EXACTEMENT la même logique que GameDetailModal
                        if (selectedStatus === status) {
                          // Si déjà sélectionné, on retire de la bibliothèque
                          if (onDeleteItem) {
                            console.log('🗑️ Removing book with ID:', bookId)
                            onDeleteItem(bookId) // 🔑 UTILISE DIRECTEMENT bookId
                          }
                          setSelectedStatus(null)
                        } else {
                          // Ajouter/Modifier le statut
                          handleStatusSelect(status)
                        }
                      }}
                      className={`flex-1 py-3 px-4 rounded-xl font-medium transition-all shadow-sm ${
                        selectedStatus === status
                          ? `${getStatusColor(status)} ring-2 ring-blue-300`
                          : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                      }`}
                    >
                      <div className="flex items-center justify-center space-x-2">
                        {selectedStatus === status && (
                          <Check size={16} className="text-white" />
                        )}
                        <div>
                          <div className="text-sm font-semibold">{getStatusLabel(status)}</div>
                          <div className="text-xs opacity-80">
                            {bookStats[status].toLocaleString()} readers
                          </div>
                        </div>
                      </div>
                    </button>
                  ))}
                </div>
                
                {/* Message d'état */}
                {selectedStatus ? (
                  <div className="text-sm text-green-600 bg-green-50 border border-green-200 rounded-lg p-3 flex items-center justify-between">
                    <span>✅ Added to your library as "{getStatusLabel(selectedStatus)}"</span>
                    <button 
                      onClick={() => {
                        if (onDeleteItem) {
                          console.log('🗑️ Remove button clicked for bookId:', bookId)
                          onDeleteItem(bookId) // 🔑 UTILISE DIRECTEMENT bookId
                        }
                        setSelectedStatus(null)
                      }}
                      className="text-red-600 hover:text-red-800 text-sm underline"
                    >
                      Remove from library
                    </button>
                  </div>
                ) : (
                  <div className="text-sm text-gray-500 bg-gray-50 border border-gray-200 rounded-lg p-3">
                    💡 Click a status to add this book to your library
                  </div>
                )}

                {/* User rating */}
                <div className="mt-6 pt-6 border-t border-gray-100">
                  <h4 className="text-gray-900 font-semibold mb-3">Rate this book</h4>
                  <div className="flex items-center space-x-2 mb-3">
                    {[1, 2, 3, 4, 5].map((rating) => (
                      <button
                        key={rating}
                        onClick={() => {
                          setUserRating(rating)
                          setShowReviewBox(true)
                        }}
                        onMouseEnter={() => setHoverRating(rating)}
                        onMouseLeave={() => setHoverRating(0)}
                        className="p-1 hover:scale-110 transition-transform"
                      >
                        <Star
                          size={24}
                          className={`transition-colors ${
                            (hoverRating || userRating) >= rating
                              ? 'text-yellow-500 fill-current'
                              : 'text-gray-300 hover:text-yellow-400'
                          }`}
                        />
                      </button>
                    ))}
                    {userRating > 0 && (
                      <span className="text-gray-900 ml-2 font-medium">{userRating}/5</span>
                    )}
                  </div>
                  
                  {showReviewBox && (
                    <div className="mt-4 p-4 bg-gray-50 rounded-xl border border-gray-200">
                      <label className="text-sm text-gray-700 mb-2 block font-medium">Share your thoughts</label>
                      <textarea
                        value={userReview}
                        onChange={(e) => setUserReview(e.target.value)}
                        placeholder="What did you think about this book?"
                        className="w-full h-20 px-3 py-2 bg-white text-gray-900 text-sm rounded-lg resize-none border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                      <div className="flex space-x-2 mt-3">
                        <button 
                          onClick={handleSubmitReview}
                          className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors"
                        >
                          Submit Review
                        </button>
                        <button 
                          onClick={() => {
                            setShowReviewBox(false)
                            setUserReview('')
                          }}
                          className="px-4 py-2 bg-gray-200 text-gray-700 text-sm font-medium rounded-lg hover:bg-gray-300 transition-colors"
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* Reviews Section */}
              <div className="p-6 border-b border-gray-100">
                <h3 className="text-gray-900 font-semibold mb-4">Recent Reviews</h3>
                <div className="flex space-x-4 overflow-x-auto pb-2">
                  {userReviews.map((review) => (
                    <div key={review.id} className="flex-shrink-0 w-64 bg-blue-50 rounded-xl p-4 border border-blue-100">
                      <div className="flex items-center space-x-2 mb-3">
                        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                          <span className="text-blue-600 text-sm">👤</span>
                        </div>
                        <span className="text-gray-900 text-sm font-medium">{review.username}</span>
                        <span className="text-xs text-blue-600 bg-blue-200 px-2 py-1 rounded-full font-medium">You</span>
                      </div>
                      <div className="flex items-center space-x-1 mb-2">
                        {[1, 2, 3, 4, 5].map((star) => (
                          <Star
                            key={star}
                            size={12}
                            className={`${
                              star <= review.rating ? 'text-yellow-500 fill-current' : 'text-gray-300'
                            }`}
                          />
                        ))}
                        <span className="text-xs text-gray-600 ml-1">{review.rating}/5</span>
                      </div>
                      <p className="text-gray-700 text-sm leading-relaxed">
                        {review.review || review.text}
                      </p>
                    </div>
                  ))}
                  
                  {goodreadsReviews.slice(0, 5).map((review) => (
                    <div key={review.id} className="flex-shrink-0 w-64 bg-gray-50 rounded-xl p-4 border border-gray-200">
                      <div className="flex items-center space-x-2 mb-3">
                        <div className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center">
                          <span className="text-gray-600 text-sm">📚</span>
                        </div>
                        <span className="text-gray-900 text-sm font-medium">{review.username}</span>
                        <span className="text-xs text-gray-600 bg-gray-200 px-2 py-1 rounded-full font-medium">Goodreads</span>
                      </div>
                      <div className="flex items-center space-x-1 mb-2">
                        {[1, 2, 3, 4, 5].map((star) => (
                          <Star
                            key={star}
                            size={12}
                            className={`${
                              star <= review.rating ? 'text-yellow-500 fill-current' : 'text-gray-300'
                            }`}
                          />
                        ))}
                        <span className="text-xs text-gray-600 ml-1">{review.rating}/5</span>
                      </div>
                      <p className="text-gray-700 text-sm leading-relaxed">
                        {review.text}
                      </p>
                    </div>
                  ))}
                </div>
              </div>

              {/* Tabs */}
              <div className="sticky top-0 z-10 bg-white border-b border-gray-100">
                <div className="flex px-6">
                  {(['info', 'social', 'more'] as const).map((tab) => (
                    <button
                      key={tab}
                      onClick={() => setActiveTab(tab)}
                      className={`flex-1 py-4 px-4 font-medium transition-colors relative ${
                        activeTab === tab
                          ? 'text-gray-900'
                          : 'text-gray-500 hover:text-gray-700'
                      }`}
                    >
                      {tab.charAt(0).toUpperCase() + tab.slice(1)}
                      {activeTab === tab && (
                        <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-gray-900 rounded-full" />
                      )}
                    </button>
                  ))}
                </div>
              </div>

              {/* Tab content */}
              <div className="p-6">
                {activeTab === 'info' && (
                  <div className="space-y-6">
                    <div>
                      <h4 className="text-gray-900 font-semibold mb-3">Description</h4>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <p className="text-gray-700 leading-relaxed">
                          {googleBooksService.cleanDescription(bookDetail.volumeInfo.description || '') || 'No description available.'}
                        </p>
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-6">
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <h5 className="text-gray-900 font-medium mb-2">Author(s)</h5>
                        <p className="text-gray-600 text-sm">
                          {bookDetail.volumeInfo.authors?.join(', ') || 'Unknown'}
                        </p>
                      </div>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <h5 className="text-gray-900 font-medium mb-2">Publisher</h5>
                        <p className="text-gray-600 text-sm">
                          {bookDetail.volumeInfo.publisher || 'Unknown'}
                        </p>
                      </div>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <h5 className="text-gray-900 font-medium mb-2">Published</h5>
                        <p className="text-gray-600 text-sm">
                          {bookDetail.volumeInfo.publishedDate || 'Unknown'}
                        </p>
                      </div>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <h5 className="text-gray-900 font-medium mb-2">Pages</h5>
                        <p className="text-gray-600 text-sm">
                          {bookDetail.volumeInfo.pageCount ? formatPageCount(bookDetail.volumeInfo.pageCount) : 'Unknown'}
                        </p>
                      </div>
                    </div>

                    {bookDetail.volumeInfo.categories && bookDetail.volumeInfo.categories.length > 0 && (
                      <div>
                        <h4 className="text-gray-900 font-semibold mb-3">Categories</h4>
                        <div className="flex flex-wrap gap-2">
                          {bookDetail.volumeInfo.categories.map((category, index) => (
                            <span
                              key={index}
                              className="inline-flex items-center px-3 py-1.5 rounded-full text-xs font-medium bg-white text-gray-700 border border-gray-200 hover:border-gray-300 transition-colors cursor-pointer shadow-sm"
                            >
                              📖 {category}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {activeTab === 'social' && (
                  <div className="space-y-6">
                    <div>
                      <h4 className="text-gray-900 font-semibold mb-4">Reading Stats</h4>
                      <div className="grid grid-cols-3 gap-4">
                        <div className="bg-orange-50 border border-orange-200 p-4 rounded-xl text-center">
                          <div className="text-2xl font-bold text-orange-600">{bookStats['want-to-play'].toLocaleString()}</div>
                          <div className="text-sm text-orange-700 font-medium">Want to Read</div>
                        </div>
                        <div className="bg-green-50 border border-green-200 p-4 rounded-xl text-center">
                          <div className="text-2xl font-bold text-green-600">{bookStats['currently-playing'].toLocaleString()}</div>
                          <div className="text-sm text-green-700 font-medium">Reading</div>
                        </div>
                        <div className="bg-blue-50 border border-blue-200 p-4 rounded-xl text-center">
                          <div className="text-2xl font-bold text-blue-600">{bookStats['completed'].toLocaleString()}</div>
                          <div className="text-sm text-blue-700 font-medium">Read</div>
                        </div>
                      </div>
                    </div>

                    <div>
                      <h4 className="text-gray-900 font-semibold mb-4">Formats Available</h4>
                      <div className="space-y-3">
                        {bookDetail.accessInfo?.epub?.isAvailable && (
                          <div className="flex items-center space-x-3 p-3 bg-blue-50 rounded-lg border border-blue-200">
                            <BookOpen size={20} className="text-blue-600" />
                            <span className="font-medium text-blue-900">EPUB Available</span>
                          </div>
                        )}
                        {bookDetail.accessInfo?.pdf?.isAvailable && (
                          <div className="flex items-center space-x-3 p-3 bg-red-50 rounded-lg border border-red-200">
                            <BookOpen size={20} className="text-red-600" />
                            <span className="font-medium text-red-900">PDF Available</span>
                          </div>
                        )}
                        {bookDetail.saleInfo?.isEbook && (
                          <div className="flex items-center space-x-3 p-3 bg-purple-50 rounded-lg border border-purple-200">
                            <BookOpen size={20} className="text-purple-600" />
                            <span className="font-medium text-purple-900">E-book Available</span>
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                )}

                {activeTab === 'more' && (
                  <div className="space-y-6">
                    <div>
                      <h4 className="text-gray-900 font-semibold mb-4">External Links</h4>
                      <div className="space-y-3">
                        {bookDetail.volumeInfo.infoLink && (
                          <a 
                            href={bookDetail.volumeInfo.infoLink}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-3 rounded-xl transition-colors shadow-sm font-medium"
                          >
                            <ExternalLink className="w-4 h-4" />
                            View on Google Books
                          </a>
                        )}

                        {bookDetail.volumeInfo.previewLink && (
                          <a
                            href={bookDetail.volumeInfo.previewLink}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center space-x-2 bg-green-600 hover:bg-green-700 text-white px-4 py-3 rounded-xl transition-colors shadow-sm font-medium"
                          >
                            <Eye size={16} />
                            <span>Preview Book</span>
                            <ExternalLink size={12} />
                          </a>
                        )}

                        {bookDetail.accessInfo?.webReaderLink && (
                          <a
                            href={bookDetail.accessInfo.webReaderLink}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center space-x-2 bg-purple-600 hover:bg-purple-700 text-white px-4 py-3 rounded-xl transition-colors shadow-sm font-medium"
                          >
                            <BookOpen size={16} />
                            <span>Read Online</span>
                            <ExternalLink size={12} />
                          </a>
                        )}

                        {bookDetail.saleInfo?.buyLink && (
                          <a
                            href={bookDetail.saleInfo.buyLink}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center space-x-2 bg-orange-600 hover:bg-orange-700 text-white px-4 py-3 rounded-xl transition-colors shadow-sm font-medium"
                          >
                            <Globe size={16} />
                            <span>Buy Book</span>
                            <ExternalLink size={12} />
                          </a>
                        )}
                      </div>
                    </div>

                    {/* More from Author */}
                    {authorBooks.length > 0 && (
                      <div>
                        <h4 className="text-gray-900 font-semibold mb-4">
                          More from {bookDetail.volumeInfo.authors?.[0]}
                        </h4>
                        <div className="flex space-x-3 overflow-x-auto pb-2">
                          {authorBooks.map((book) => (
                            <div key={book.id} className="flex-shrink-0 w-40 bg-white rounded-xl p-3 border border-gray-200 hover:border-gray-300 transition-colors cursor-pointer shadow-sm hover:shadow-md">
                              {book.image && (
                                <img
                                  src={book.image}
                                  alt={book.title}
                                  className="w-full h-20 object-cover rounded-lg mb-2 border border-gray-100"
                                />
                              )}
                              <h5 className="text-sm font-medium text-gray-900 truncate mb-1" title={book.title}>
                                {book.title}
                              </h5>
                              <div className="flex items-center">
                                <Star size={12} className="text-yellow-500 fill-current mr-1" />
                                <span className="text-xs text-gray-600">{book.rating?.toFixed(1) || 'N/A'}</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Similar Books */}
                    {similarBooks.length > 0 && (
                      <div>
                        <h4 className="text-gray-900 font-semibold mb-4">Similar Books</h4>
                        <div className="flex space-x-3 overflow-x-auto pb-2">
                          {similarBooks.map((book) => (
                            <div key={book.id} className="flex-shrink-0 w-40 bg-white rounded-xl p-3 border border-gray-200 hover:border-gray-300 transition-colors cursor-pointer shadow-sm hover:shadow-md">
                              {book.image && (
                                <img
                                  src={book.image}
                                  alt={book.title}
                                  className="w-full h-20 object-cover rounded-lg mb-2 border border-gray-100"
                                />
                              )}
                              <h5 className="text-sm font-medium text-gray-900 truncate mb-1" title={book.title}>
                                {book.title}
                              </h5>
                              <div className="flex items-center">
                                <Star size={12} className="text-yellow-500 fill-current mr-1" />
                                <span className="text-xs text-gray-600">{book.rating?.toFixed(1) || 'N/A'}</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Additional Info */}
                    <div>
                      <h4 className="text-gray-900 font-semibold mb-4">Additional Information</h4>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div className="flex justify-between">
                            <span className="font-medium text-gray-900">Language:</span>
                            <span className="text-gray-600">
                              {bookDetail.volumeInfo.language || 'Unknown'}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="font-medium text-gray-900">ISBN:</span>
                            <span className="text-gray-600">
                              {googleBooksService.getISBN(bookDetail as any) || 'N/A'}
                            </span>
                          </div>
                          {bookDetail.volumeInfo.pageCount && (
                            <div className="flex justify-between col-span-2">
                              <span className="font-medium text-gray-900">Reading Time:</span>
                              <span className="text-gray-600 text-right">
                                {getReadingTime(bookDetail.volumeInfo.pageCount)}
                              </span>
                            </div>
                          )}
                          {bookDetail.saleInfo?.listPrice && (
                            <div className="flex justify-between col-span-2">
                              <span className="font-medium text-gray-900">Price:</span>
                              <span className="text-gray-600 text-right">
                                {bookDetail.saleInfo.listPrice.amount} {bookDetail.saleInfo.listPrice.currencyCode}
                              </span>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </>
        ) : (
          <div className="p-8 text-center text-gray-600">
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-2xl">📚</span>
            </div>
            <p className="text-lg font-medium text-gray-900 mb-2">Book not found</p>
            <p className="text-sm">Unable to load book details. Please try again.</p>
          </div>
        )}
      </div>
    </div>
  )
}
</file>

<file path="src/components/MusicDetailModal.tsx">
'use client'
import { useState, useEffect, useRef } from 'react'
import { X, Star, ExternalLink, Calendar, Music, Award, Users, Globe, Play, HeadphonesIcon, Clock, Check } from 'lucide-react'
import { musicService, formatTrackCount, formatPrice, formatDuration } from '@/services/musicService'
import type { LibraryItem, Review, MediaStatus } from '@/types'

interface MusicDetailModalProps {
  isOpen: boolean
  onClose: () => void
  albumId: string
  onAddToLibrary: (item: any, status: MediaStatus) => void
  onDeleteItem?: (id: string) => void
  library: LibraryItem[]
  userReviews: Review[]
  spotifyReviews: Review[]
  onReviewSubmit: (reviewData: any) => void
}

interface AlbumDetail {
  collectionId: number
  collectionName: string
  artistName: string
  artworkUrl100?: string
  releaseDate?: string
  primaryGenreName?: string
  trackCount?: number
  copyright?: string
  collectionPrice?: number
  currency?: string
  country?: string
  collectionViewUrl?: string
  artistViewUrl?: string
  collectionType?: string
}

export default function MusicDetailModal({ 
  isOpen, 
  onClose, 
  albumId, 
  onAddToLibrary, 
  onDeleteItem,
  library, 
  userReviews, 
  spotifyReviews, 
  onReviewSubmit 
}: MusicDetailModalProps) {
  const [albumDetail, setAlbumDetail] = useState<AlbumDetail | null>(null)
  const [loading, setLoading] = useState(false)
  const [activeTab, setActiveTab] = useState<'info' | 'social' | 'more'>('info')
  const [selectedStatus, setSelectedStatus] = useState<MediaStatus | null>(null)
  const [userRating, setUserRating] = useState<number>(0)
  const [hoverRating, setHoverRating] = useState<number>(0)
  const [showReviewBox, setShowReviewBox] = useState(false)
  const [userReview, setUserReview] = useState('')
  const [similarAlbums, setSimilarAlbums] = useState<any[]>([])
  const [artistAlbums, setArtistAlbums] = useState<any[]>([])

  const scrollableRef = useRef<HTMLDivElement>(null)

  const albumStats = {
    'want-to-play': 1845,
    'currently-playing': 623,
    'completed': 4312
  }

  useEffect(() => {
    if (isOpen) {
      setActiveTab('info')
      setSimilarAlbums([])
      setArtistAlbums([])
    }
  }, [isOpen, albumId])

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden'
    } else {
      document.body.style.overflow = 'unset'
    }
    
    return () => {
      document.body.style.overflow = 'unset'
    }
  }, [isOpen])

  useEffect(() => {
    if (isOpen && albumId) {
      fetchAlbumDetail()
    }
  }, [isOpen, albumId])

  // 🔧 SIMPLIFIÉ: Même logique que GameDetailModal
  useEffect(() => {
    console.log('🎵 Simple status check for albumId:', albumId)
    console.log('🎵 Library items:', library.map(item => `${item.id} (${item.title})`))
    
    const libraryItem = library.find(item => item.id === albumId)
    if (libraryItem) {
      console.log('🎵 ✅ Found in library:', libraryItem)
      setSelectedStatus(libraryItem.status)
    } else {
      console.log('🎵 ❌ Not found in library')
      setSelectedStatus(null)
    }
  }, [albumId, library])

  const fetchAlbumDetail = async () => {
    if (!albumId) return
    
    setLoading(true)
    try {
      let iTunesId = albumId
      
      if (albumId.startsWith('music-')) {
        iTunesId = albumId.replace('music-', '')
      }
      
      console.log('🎵 Fetching album details for ID:', iTunesId)
      
      const data = await musicService.getAlbumDetails(iTunesId)
      setAlbumDetail(data as AlbumDetail)
      
      console.log('🎵 Album detail fetched:', data)
      
      if (data) {
        if (data.primaryGenreName) {
          await fetchSimilarAlbums(data)
        }
        if (data.artistName) {
          await fetchArtistAlbums(data.artistName, data.collectionId)
        }
      }
      
    } catch (error) {
      console.error('Erreur lors du chargement des détails:', error)
      setAlbumDetail(null)
    } finally {
      setLoading(false)
    }
  }

  const fetchSimilarAlbums = async (album: AlbumDetail) => {
    try {
      const similarAlbumsData = await musicService.getSimilarAlbums(album as any, 6)
      const convertedAlbums = similarAlbumsData.map(album => musicService.convertToAppFormat(album))
      setSimilarAlbums(convertedAlbums)
    } catch (error) {
      console.error('Error fetching similar albums:', error)
      setSimilarAlbums([])
    }
  }

  const fetchArtistAlbums = async (artist: string, excludeAlbumId: number) => {
    try {
      const artistAlbumsData = await musicService.getAlbumsByArtist(artist, 8)
      const filteredAlbums = artistAlbumsData
        .filter(album => album.collectionId !== excludeAlbumId)
        .slice(0, 6)
        .map(album => musicService.convertToAppFormat(album))
      
      setArtistAlbums(filteredAlbums)
    } catch (error) {
      console.error('Error fetching artist albums:', error)
      setArtistAlbums([])
    }
  }

  // 🔧 SIMPLIFIÉ: Même logique que GameDetailModal
  const handleStatusSelect = (status: MediaStatus) => {
    if (!albumDetail) return
    
    console.log('🎵 Adding album to library with albumId:', albumId)
    
    const albumItem = {
      id: albumId, // 🔑 UTILISE DIRECTEMENT albumId comme GameDetailModal
      title: albumDetail.collectionName,
      image: musicService.getBestImageURL(albumDetail as any, 'medium'),
      category: 'music' as const,
      year: albumDetail.releaseDate ? new Date(albumDetail.releaseDate).getFullYear() : new Date().getFullYear(),
      rating: 0,
      artist: albumDetail.artistName
    }
    
    onAddToLibrary(albumItem, status)
    setSelectedStatus(status)
  }

  const getStatusLabel = (status: MediaStatus) => {
    switch (status) {
      case 'want-to-play': return 'Want to Listen'
      case 'currently-playing': return 'Listening'
      case 'completed': return 'Listened'
      case 'paused': return 'Paused'
      case 'dropped': return 'Dropped'
      default: return status
    }
  }

  const getStatusColor = (status: MediaStatus) => {
    switch (status) {
      case 'want-to-play': return 'bg-orange-500 hover:bg-orange-600'
      case 'currently-playing': return 'bg-green-500 hover:bg-green-600'
      case 'completed': return 'bg-blue-500 hover:bg-blue-600'
      case 'paused': return 'bg-yellow-500 hover:bg-yellow-600'
      case 'dropped': return 'bg-red-500 hover:bg-red-600'
      default: return 'bg-gray-500 hover:bg-gray-600'
    }
  }

  const handleSubmitReview = () => {
    if (userRating > 0 && userReview.trim()) {
      onReviewSubmit({
        rating: userRating,
        review: userReview.trim()
      })
      
      setShowReviewBox(false)
      setUserReview('')
      setUserRating(0)
    }
  }

  if (!isOpen) return null

  return (
    <div 
      className="fixed inset-0 bg-black/20 backdrop-blur-sm z-50 flex items-center justify-center p-4"
      onClick={(e) => {
        if (e.target === e.currentTarget) {
          onClose()
        }
      }}
    >
      <div 
        className="bg-white rounded-2xl w-full max-w-4xl h-[90vh] overflow-hidden flex flex-col shadow-xl border border-gray-100"
        onClick={(e) => e.stopPropagation()}
      >
        {loading ? (
          <div className="flex items-center justify-center py-20">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          </div>
        ) : albumDetail ? (
          <>
            {/* Header */}
            <div className="relative bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
              <button
                onClick={onClose}
                className="absolute top-4 right-4 text-gray-500 hover:text-gray-700 z-10 p-2 hover:bg-white/80 rounded-full transition-colors"
              >
                <X size={20} />
              </button>
              
              <div className="p-6 flex items-center space-x-4">
                <div className="w-20 h-20 rounded-xl border border-gray-200 shadow-sm overflow-hidden bg-gray-100 flex-shrink-0">
                  {musicService.getBestImageURL(albumDetail as any, 'medium') ? (
                    <img
                      src={musicService.getBestImageURL(albumDetail as any, 'medium')!}
                      alt={albumDetail.collectionName}
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center text-2xl">
                      🎵
                    </div>
                  )}
                </div>
                
                <div className="flex-1">
                  <h1 className="text-2xl font-bold text-gray-900 mb-1">{musicService.cleanAlbumName(albumDetail.collectionName)}</h1>
                  <h2 className="text-lg text-gray-600 mb-2">{albumDetail.artistName}</h2>
                  
                  <div className="flex items-center space-x-4 mb-2">
                    {albumDetail.releaseDate && (
                      <span className="text-gray-600 text-sm">
                        {new Date(albumDetail.releaseDate).getFullYear()}
                      </span>
                    )}
                    {albumDetail.trackCount && (
                      <>
                        <span className="text-gray-600">•</span>
                        <span className="text-gray-600 text-sm">{formatTrackCount(albumDetail.trackCount)}</span>
                      </>
                    )}
                    {albumDetail.primaryGenreName && (
                      <>
                        <span className="text-gray-600">•</span>
                        <span className="text-gray-600 text-sm">{albumDetail.primaryGenreName}</span>
                      </>
                    )}
                  </div>
                  
                  {albumDetail.trackCount && (
                    <div className="text-sm text-gray-600">
                      {formatDuration(albumDetail.trackCount)}
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Content */}
            <div ref={scrollableRef} className="flex-1 overflow-y-auto">
              {/* 🔧 EXACTEMENT comme GameDetailModal */}
              <div className="p-6 border-b border-gray-100">
                <div className="flex space-x-3 mb-4">
                  {(['want-to-play', 'currently-playing', 'completed'] as const).map((status) => (
                    <button
                      key={status}
                      onClick={() => {
                        // 🔑 EXACTEMENT la même logique que GameDetailModal
                        if (selectedStatus === status) {
                          // Si déjà sélectionné, on retire de la bibliothèque
                          if (onDeleteItem) {
                            console.log('🗑️ Removing album with ID:', albumId)
                            onDeleteItem(albumId) // 🔑 UTILISE DIRECTEMENT albumId
                          }
                          setSelectedStatus(null)
                        } else {
                          // Ajouter/Modifier le statut
                          handleStatusSelect(status)
                        }
                      }}
                      className={`flex-1 py-3 px-4 rounded-xl font-medium transition-all shadow-sm ${
                        selectedStatus === status
                          ? `${getStatusColor(status)} ring-2 ring-blue-300 text-white`
                          : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                      }`}
                    >
                      <div className="flex items-center justify-center space-x-2">
                        {selectedStatus === status && (
                          <Check size={16} className="text-white" />
                        )}
                        <div>
                          <div className="text-sm font-semibold">{getStatusLabel(status)}</div>
                          <div className="text-xs opacity-80">
                            {albumStats[status].toLocaleString()} listeners
                          </div>
                        </div>
                      </div>
                    </button>
                  ))}
                </div>
                
                {/* Message d'état */}
                {selectedStatus ? (
                  <div className="text-sm text-green-600 bg-green-50 border border-green-200 rounded-lg p-3 flex items-center justify-between">
                    <span>✅ Added to your library as "{getStatusLabel(selectedStatus)}"</span>
                    <button 
                      onClick={() => {
                        if (onDeleteItem) {
                          console.log('🗑️ Remove button clicked for albumId:', albumId)
                          onDeleteItem(albumId) // 🔑 UTILISE DIRECTEMENT albumId
                        }
                        setSelectedStatus(null)
                      }}
                      className="text-red-600 hover:text-red-800 text-sm underline"
                    >
                      Remove from library
                    </button>
                  </div>
                ) : (
                  <div className="text-sm text-gray-500 bg-gray-50 border border-gray-200 rounded-lg p-3">
                    💡 Click a status to add this album to your library
                  </div>
                )}

                {/* User rating */}
                <div className="mt-6 pt-6 border-t border-gray-100">
                  <h4 className="text-gray-900 font-semibold mb-3">Rate this album</h4>
                  <div className="flex items-center space-x-2 mb-3">
                    {[1, 2, 3, 4, 5].map((rating) => (
                      <button
                        key={rating}
                        onClick={() => {
                          setUserRating(rating)
                          setShowReviewBox(true)
                        }}
                        onMouseEnter={() => setHoverRating(rating)}
                        onMouseLeave={() => setHoverRating(0)}
                        className="p-1 hover:scale-110 transition-transform"
                      >
                        <Star
                          size={24}
                          className={`transition-colors ${
                            (hoverRating || userRating) >= rating
                              ? 'text-yellow-500 fill-current'
                              : 'text-gray-300 hover:text-yellow-400'
                          }`}
                        />
                      </button>
                    ))}
                    {userRating > 0 && (
                      <span className="text-gray-900 ml-2 font-medium">{userRating}/5</span>
                    )}
                  </div>
                  
                  {showReviewBox && (
                    <div className="mt-4 p-4 bg-gray-50 rounded-xl border border-gray-200">
                      <label className="text-sm text-gray-700 mb-2 block font-medium">Share your thoughts</label>
                      <textarea
                        value={userReview}
                        onChange={(e) => setUserReview(e.target.value)}
                        placeholder="What did you think about this album?"
                        className="w-full h-20 px-3 py-2 bg-white text-gray-900 text-sm rounded-lg resize-none border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                      <div className="flex space-x-2 mt-3">
                        <button 
                          onClick={handleSubmitReview}
                          className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors"
                        >
                          Submit Review
                        </button>
                        <button 
                          onClick={() => {
                            setShowReviewBox(false)
                            setUserReview('')
                          }}
                          className="px-4 py-2 bg-gray-200 text-gray-700 text-sm font-medium rounded-lg hover:bg-gray-300 transition-colors"
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* Reviews Section */}
              <div className="p-6 border-b border-gray-100">
                <h3 className="text-gray-900 font-semibold mb-4">Recent Reviews</h3>
                <div className="flex space-x-4 overflow-x-auto pb-2">
                  {userReviews.map((review) => (
                    <div key={review.id} className="flex-shrink-0 w-64 bg-blue-50 rounded-xl p-4 border border-blue-100">
                      <div className="flex items-center space-x-2 mb-3">
                        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                          <span className="text-blue-600 text-sm">👤</span>
                        </div>
                        <span className="text-gray-900 text-sm font-medium">{review.username}</span>
                        <span className="text-xs text-blue-600 bg-blue-200 px-2 py-1 rounded-full font-medium">You</span>
                      </div>
                      <div className="flex items-center space-x-1 mb-2">
                        {[1, 2, 3, 4, 5].map((star) => (
                          <Star
                            key={star}
                            size={12}
                            className={`${
                              star <= review.rating ? 'text-yellow-500 fill-current' : 'text-gray-300'
                            }`}
                          />
                        ))}
                        <span className="text-xs text-gray-600 ml-1">{review.rating}/5</span>
                      </div>
                      <p className="text-gray-700 text-sm leading-relaxed">
                        {review.review || review.text}
                      </p>
                    </div>
                  ))}
                  
                  {spotifyReviews.slice(0, 5).map((review) => (
                    <div key={review.id} className="flex-shrink-0 w-64 bg-gray-50 rounded-xl p-4 border border-gray-200">
                      <div className="flex items-center space-x-2 mb-3">
                        <div className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center">
                          <span className="text-gray-600 text-sm">🎵</span>
                        </div>
                        <span className="text-gray-900 text-sm font-medium">{review.username}</span>
                        <span className="text-xs text-gray-600 bg-gray-200 px-2 py-1 rounded-full font-medium">Music Community</span>
                      </div>
                      <div className="flex items-center space-x-1 mb-2">
                        {[1, 2, 3, 4, 5].map((star) => (
                          <Star
                            key={star}
                            size={12}
                            className={`${
                              star <= review.rating ? 'text-yellow-500 fill-current' : 'text-gray-300'
                            }`}
                          />
                        ))}
                        <span className="text-xs text-gray-600 ml-1">{review.rating}/5</span>
                      </div>
                      <p className="text-gray-700 text-sm leading-relaxed">
                        {review.text}
                      </p>
                    </div>
                  ))}
                </div>
              </div>

              {/* Tabs */}
              <div className="sticky top-0 z-10 bg-white border-b border-gray-100">
                <div className="flex px-6">
                  {(['info', 'social', 'more'] as const).map((tab) => (
                    <button
                      key={tab}
                      onClick={() => setActiveTab(tab)}
                      className={`flex-1 py-4 px-4 font-medium transition-colors relative ${
                        activeTab === tab
                          ? 'text-gray-900'
                          : 'text-gray-500 hover:text-gray-700'
                      }`}
                    >
                      {tab.charAt(0).toUpperCase() + tab.slice(1)}
                      {activeTab === tab && (
                        <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-gray-900 rounded-full" />
                      )}
                    </button>
                  ))}
                </div>
              </div>

              {/* Tab content */}
              <div className="p-6">
                {activeTab === 'info' && (
                  <div className="space-y-6">
                    <div className="grid grid-cols-2 gap-6">
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <h5 className="text-gray-900 font-medium mb-2">Artist</h5>
                        <p className="text-gray-600 text-sm">
                          {albumDetail.artistName}
                        </p>
                      </div>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <h5 className="text-gray-900 font-medium mb-2">Release Date</h5>
                        <p className="text-gray-600 text-sm">
                          {albumDetail.releaseDate ? new Date(albumDetail.releaseDate).toLocaleDateString() : 'Unknown'}
                        </p>
                      </div>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <h5 className="text-gray-900 font-medium mb-2">Genre</h5>
                        <p className="text-gray-600 text-sm">
                          {albumDetail.primaryGenreName || 'Unknown'}
                        </p>
                      </div>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <h5 className="text-gray-900 font-medium mb-2">Tracks</h5>
                        <p className="text-gray-600 text-sm">
                          {albumDetail.trackCount ? formatTrackCount(albumDetail.trackCount) : 'Unknown'}
                        </p>
                      </div>
                    </div>

                    {albumDetail.copyright && (
                      <div>
                        <h4 className="text-gray-900 font-semibold mb-3">Copyright</h4>
                        <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                          <p className="text-gray-700 text-sm">
                            {albumDetail.copyright}
                          </p>
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {activeTab === 'social' && (
                  <div className="space-y-6">
                    <div>
                      <h4 className="text-gray-900 font-semibold mb-4">Listening Stats</h4>
                      <div className="grid grid-cols-3 gap-4">
                        <div className="bg-orange-50 border border-orange-200 p-4 rounded-xl text-center">
                          <div className="text-2xl font-bold text-orange-600">{albumStats['want-to-play'].toLocaleString()}</div>
                          <div className="text-sm text-orange-700 font-medium">Want to Listen</div>
                        </div>
                        <div className="bg-green-50 border border-green-200 p-4 rounded-xl text-center">
                          <div className="text-2xl font-bold text-green-600">{albumStats['currently-playing'].toLocaleString()}</div>
                          <div className="text-sm text-green-700 font-medium">Listening</div>
                        </div>
                        <div className="bg-blue-50 border border-blue-200 p-4 rounded-xl text-center">
                          <div className="text-2xl font-bold text-blue-600">{albumStats['completed'].toLocaleString()}</div>
                          <div className="text-sm text-blue-700 font-medium">Listened</div>
                        </div>
                      </div>
                    </div>

                    <div>
                      <h4 className="text-gray-900 font-semibold mb-4">Album Type</h4>
                      <div className="space-y-3">
                        <div className="flex items-center space-x-3 p-3 bg-purple-50 rounded-lg border border-purple-200">
                          <Music size={20} className="text-purple-600" />
                          <span className="font-medium text-purple-900">
                            {albumDetail.collectionType || 'Album'}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {activeTab === 'more' && (
                  <div className="space-y-6">
                    <div>
                      <h4 className="text-gray-900 font-semibold mb-4">External Links</h4>
                      <div className="space-y-3">
                        {albumDetail.collectionViewUrl && (
                          <a 
                            href={albumDetail.collectionViewUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-3 rounded-xl transition-colors shadow-sm font-medium"
                          >
                            <ExternalLink className="w-4 h-4" />
                            View on iTunes
                          </a>
                        )}

                        {albumDetail.artistViewUrl && (
                          <a
                            href={albumDetail.artistViewUrl}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center space-x-2 bg-purple-600 hover:bg-purple-700 text-white px-4 py-3 rounded-xl transition-colors shadow-sm font-medium"
                          >
                            <Users size={16} />
                            <span>Artist Page</span>
                            <ExternalLink size={12} />
                          </a>
                        )}

                        <a 
                          href={`https://open.spotify.com/search/${encodeURIComponent(albumDetail.artistName + ' ' + albumDetail.collectionName)}`}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="flex items-center gap-2 bg-green-600 hover:bg-green-700 text-white px-4 py-3 rounded-xl transition-colors shadow-sm font-medium"
                        >
                          <Play className="w-4 h-4" />
                          Search on Spotify
                        </a>
                      </div>
                    </div>

                    {/* More from Artist */}
                    {artistAlbums.length > 0 && (
                      <div>
                        <h4 className="text-gray-900 font-semibold mb-4">
                          More from {albumDetail.artistName}
                        </h4>
                        <div className="flex space-x-3 overflow-x-auto pb-2">
                          {artistAlbums.map((album) => (
                            <div key={album.id} className="flex-shrink-0 w-40 bg-white rounded-xl p-3 border border-gray-200 hover:border-gray-300 transition-colors cursor-pointer shadow-sm hover:shadow-md">
                              {album.image && (
                                <img
                                  src={album.image}
                                  alt={album.title}
                                  className="w-full h-20 object-cover rounded-lg mb-2 border border-gray-100"
                                />
                              )}
                              <h5 className="text-sm font-medium text-gray-900 truncate mb-1" title={album.title}>
                                {album.title}
                              </h5>
                              <div className="flex items-center">
                                <Star size={12} className="text-yellow-500 fill-current mr-1" />
                                <span className="text-xs text-gray-600">{album.rating?.toFixed(1) || 'N/A'}</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Similar Albums */}
                    {similarAlbums.length > 0 && (
                      <div>
                        <h4 className="text-gray-900 font-semibold mb-4">Similar Albums</h4>
                        <div className="flex space-x-3 overflow-x-auto pb-2">
                          {similarAlbums.map((album) => (
                            <div key={album.id} className="flex-shrink-0 w-40 bg-white rounded-xl p-3 border border-gray-200 hover:border-gray-300 transition-colors cursor-pointer shadow-sm hover:shadow-md">
                              {album.image && (
                                <img
                                  src={album.image}
                                  alt={album.title}
                                  className="w-full h-20 object-cover rounded-lg mb-2 border border-gray-100"
                                />
                              )}
                              <h5 className="text-sm font-medium text-gray-900 truncate mb-1" title={album.title}>
                                {album.title}
                              </h5>
                              <div className="flex items-center">
                                <Star size={12} className="text-yellow-500 fill-current mr-1" />
                                <span className="text-xs text-gray-600">{album.rating?.toFixed(1) || 'N/A'}</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Additional Info */}
                    <div>
                      <h4 className="text-gray-900 font-semibold mb-4">Additional Information</h4>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div className="flex justify-between">
                            <span className="font-medium text-gray-900">Country:</span>
                            <span className="text-gray-600">
                              {albumDetail.country || 'Unknown'}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="font-medium text-gray-900">Duration:</span>
                            <span className="text-gray-600">
                              {albumDetail.trackCount ? formatDuration(albumDetail.trackCount) : 'Unknown'}
                            </span>
                          </div>
                          {albumDetail.collectionPrice && (
                            <div className="flex justify-between col-span-2">
                              <span className="font-medium text-gray-900">Price:</span>
                              <span className="text-gray-600 text-right">
                                {formatPrice(albumDetail.collectionPrice, albumDetail.currency || 'USD')}
                              </span>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </>
        ) : (
          <div className="p-8 text-center text-gray-600">
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-2xl">🎵</span>
            </div>
            <p className="text-lg font-medium text-gray-900 mb-2">Album not found</p>
            <p className="text-sm">Unable to load album details. Please try again.</p>
          </div>
        )}
      </div>
    </div>
  )
}
</file>

<file path="src/services/rawgService.ts">
// src/services/rawgService.ts - VERSION CORRIGÉE AVEC DIAGNOSTIC COMPLET
export interface RAWGGame {
  id: number
  name: string
  background_image: string
  rating: number
  rating_count: number
  released: string
  platforms: { platform: { name: string } }[]
  developers: { name: string }[]
  publishers: { name: string }[]
  genres: { name: string }[]
  tags: { name: string }[]
  description_raw?: string
  metacritic?: number
  esrb_rating?: { name: string }
  parent_platforms?: { platform: { name: string } }[]
  website?: string
  stores?: { store: { name: string }, url: string }[]
  screenshots?: { image: string }[]
}

export interface RAWGSearchResponse {
  count: number
  next?: string
  previous?: string
  results: RAWGGame[] // ✅ C'est "results" pas "result" !
}

class RAWGService {
  private readonly apiKey = '517c9101ad6b4cb0a1f8cd5c91ce57ec'
  private readonly baseURL = 'https://api.rawg.io/api'
  
  // ✅ TEST DE CONNECTIVITÉ AVEC DIAGNOSTIC COMPLET
  async testConnection(): Promise<{ success: boolean, message: string, data?: any }> {
    try {
      console.log('🔧 [RAWG] Testing API connection...')
      
      const testUrl = `${this.baseURL}/games?key=${this.apiKey}&page_size=1`
      console.log('🔧 [RAWG] Test URL:', testUrl)
      
      const response = await fetch(testUrl, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'User-Agent': 'Stackr/1.0'
        }
      })
      
      console.log('🔧 [RAWG] Response status:', response.status)
      console.log('🔧 [RAWG] Response headers:', Object.fromEntries(response.headers.entries()))
      
      if (!response.ok) {
        const errorText = await response.text()
        console.error('🔧 [RAWG] Error response:', errorText)
        return {
          success: false,
          message: `API Error ${response.status}: ${errorText}`
        }
      }
      
      const data = await response.json()
      console.log('🔧 [RAWG] Response data structure:', {
        count: data.count,
        hasResults: !!data.results,
        resultsLength: data.results?.length || 0,
        firstGame: data.results?.[0]?.name || 'N/A'
      })
      
      return {
        success: true,
        message: `API working! Found ${data.count} games total`,
        data: data
      }
      
    } catch (error) {
      console.error('🔧 [RAWG] Connection test failed:', error)
      return {
        success: false,
        message: `Connection failed: ${error instanceof Error ? error.message : 'Unknown error'}`
      }
    }
  }
  
  // ✅ RECHERCHE AVEC DIAGNOSTIC DÉTAILLÉ
  async searchGames(query: string, pageSize: number = 20): Promise<RAWGGame[]> {
    try {
      console.log('🎮 [RAWG] Starting search for:', query, 'pageSize:', pageSize)
      
      // Test de connectivité d'abord
      const connectionTest = await this.testConnection()
      if (!connectionTest.success) {
        console.error('🎮 [RAWG] Connection test failed:', connectionTest.message)
        throw new Error(`RAWG API unavailable: ${connectionTest.message}`)
      }
      
      console.log('🎮 [RAWG] Connection OK, proceeding with search...')
      
      // URL de recherche
      const searchUrl = `${this.baseURL}/games?key=${this.apiKey}&search=${encodeURIComponent(query)}&page_size=${Math.min(pageSize, 40)}&ordering=-released`
      console.log('🎮 [RAWG] Search URL:', searchUrl)
      
      const response = await fetch(searchUrl, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'User-Agent': 'Stackr/1.0'
        }
      })
      
      console.log('🎮 [RAWG] Search response status:', response.status)
      
      if (!response.ok) {
        const errorText = await response.text()
        console.error('🎮 [RAWG] Search error response:', errorText)
        throw new Error(`RAWG Search API Error: ${response.status} - ${errorText}`)
      }
      
      const data: RAWGSearchResponse = await response.json()
      console.log('🎮 [RAWG] Search response data:', {
        count: data.count,
        hasResults: !!data.results,
        resultsLength: data.results?.length || 0,
        next: !!data.next,
        previous: !!data.previous
      })
      
      if (!data.results) {
        console.error('🎮 [RAWG] No results array in response:', data)
        throw new Error('RAWG API returned invalid response structure')
      }
      
      if (data.results.length === 0) {
        console.log('🎮 [RAWG] No games found for query:', query)
        return []
      }
      
      // Log des premiers résultats
      console.log('🎮 [RAWG] First 3 results:')
      data.results.slice(0, 3).forEach((game, index) => {
        console.log(`  ${index + 1}. ${game.name} (${game.id}) - ${game.released || 'No date'}`)
      })
      
      return data.results
      
    } catch (error) {
      console.error('🎮 [RAWG] Search failed:', error)
      
      // Tentative de fallback avec des jeux statiques pour le debug
      console.log('🎮 [RAWG] Returning fallback data for debugging...')
      return this.getFallbackGames(query)
    }
  }
  
  // ✅ DONNÉES DE FALLBACK POUR DEBUG
  private getFallbackGames(query: string): RAWGGame[] {
    const fallbackGames: RAWGGame[] = [
      {
        id: 22511,
        name: "Elden Ring",
        background_image: "https://media.rawg.io/media/games/5eb/5eb49eb2fa0738fdb5bacea557b1bc57.jpg",
        rating: 4.8,
        rating_count: 500000,
        released: "2022-02-25",
        platforms: [{ platform: { name: "PlayStation 5" } }],
        developers: [{ name: "FromSoftware" }],
        publishers: [{ name: "Bandai Namco Entertainment" }],
        genres: [{ name: "Action" }, { name: "RPG" }],
        tags: [{ name: "RPG" }, { name: "Action" }]
      },
      {
        id: 41494,
        name: "Cyberpunk 2077",
        background_image: "https://media.rawg.io/media/games/26d/26d4437715bee60138dab4a7c8c59c92.jpg",
        rating: 4.1,
        rating_count: 300000,
        released: "2020-12-10",
        platforms: [{ platform: { name: "PC" } }],
        developers: [{ name: "CD PROJEKT RED" }],
        publishers: [{ name: "CD PROJEKT RED" }],
        genres: [{ name: "RPG" }, { name: "Adventure" }],
        tags: [{ name: "Cyberpunk" }, { name: "RPG" }]
      },
      {
        id: 3328,
        name: "The Witcher 3: Wild Hunt",
        background_image: "https://media.rawg.io/media/games/618/618c2031a07bbff6b4f611f10b6bcdbc.jpg",
        rating: 4.9,
        rating_count: 800000,
        released: "2015-05-18",
        platforms: [{ platform: { name: "PC" } }],
        developers: [{ name: "CD PROJEKT RED" }],
        publishers: [{ name: "CD PROJEKT RED" }],
        genres: [{ name: "RPG" }, { name: "Adventure" }],
        tags: [{ name: "Fantasy" }, { name: "RPG" }]
      }
    ]
    
    // Filtrer selon la requête
    const queryLower = query.toLowerCase()
    const filtered = fallbackGames.filter(game => 
      game.name.toLowerCase().includes(queryLower)
    )
    
    console.log('🎮 [RAWG] Fallback filtered results:', filtered.length, 'games')
    return filtered.length > 0 ? filtered : fallbackGames.slice(0, 3)
  }
  
  // ✅ AUTRES MÉTHODES AVEC ERROR HANDLING
  async getPopularGames(): Promise<RAWGGame[]> {
    try {
      const response = await fetch(
        `${this.baseURL}/games?key=${this.apiKey}&page_size=20&ordering=-rating&dates=2020-01-01,2025-12-31&metacritic=80,100`
      )
      
      if (!response.ok) {
        throw new Error(`RAWG API Error: ${response.status}`)
      }
      
      const data: RAWGSearchResponse = await response.json()
      return data.results || []
    } catch (error) {
      console.error('Error fetching popular games:', error)
      return this.getFallbackGames('popular')
    }
  }

  async getTopRatedGames(): Promise<RAWGGame[]> {
    try {
      const response = await fetch(
        `${this.baseURL}/games?key=${this.apiKey}&page_size=20&ordering=-rating&metacritic=90,100`
      )
      
      if (!response.ok) {
        throw new Error(`RAWG API Error: ${response.status}`)
      }
      
      const data: RAWGSearchResponse = await response.json()
      return data.results || []
    } catch (error) {
      console.error('Error fetching top rated games:', error)
      return this.getFallbackGames('top rated')
    }
  }

  async getNewReleases(): Promise<RAWGGame[]> {
    try {
      const currentDate = new Date()
      const threeMonthsAgo = new Date(currentDate.getFullYear(), currentDate.getMonth() - 3, currentDate.getDate())
      const sixMonthsLater = new Date(currentDate.getFullYear(), currentDate.getMonth() + 6, currentDate.getDate())
      
      const response = await fetch(
        `${this.baseURL}/games?key=${this.apiKey}&page_size=20&ordering=-released&dates=${threeMonthsAgo.toISOString().split('T')[0]},${sixMonthsLater.toISOString().split('T')[0]}`
      )
      
      if (!response.ok) {
        throw new Error(`RAWG API Error: ${response.status}`)
      }
      
      const data: RAWGSearchResponse = await response.json()
      return data.results || []
    } catch (error) {
      console.error('Error fetching new releases:', error)
      return this.getFallbackGames('new releases')
    }
  }

  async getGameDetails(gameId: string | number): Promise<RAWGGame | null> {
    try {
      const response = await fetch(
        `${this.baseURL}/games/${gameId}?key=${this.apiKey}`
      )
      
      if (!response.ok) {
        throw new Error(`RAWG API Error: ${response.status}`)
      }
      
      const game: RAWGGame = await response.json()
      return game
    } catch (error) {
      console.error('Error fetching game details:', error)
      return null
    }
  }

  convertToAppFormat(game: RAWGGame): any {
    let developer = 'Unknown Developer'
    let finalDeveloper = 'Unknown Developer'
    
    if (game.developers && game.developers.length > 0) {
      developer = game.developers[0].name
      finalDeveloper = developer
      console.log('🎮 Using primary developer:', developer)
    }
    else if (game.publishers && game.publishers.length > 0) {
      developer = game.publishers[0].name
      finalDeveloper = `${developer} (Publisher)`
      console.log('🎮 Using publisher as developer fallback:', developer)
    }
    
    console.log('🎮 Converting game:', game.name, '→ Developer:', finalDeveloper)
    
    const converted = {
      id: `game-${game.id}`,
      title: game.name || 'Unknown Game',
      name: game.name || 'Unknown Game',
      author: finalDeveloper,
      developer: finalDeveloper,
      year: game.released ? new Date(game.released).getFullYear() : new Date().getFullYear(),
      rating: game.rating ? Number(game.rating.toFixed(1)) : 0,
      genre: game.genres?.[0]?.name || 'Unknown',
      category: 'games' as const,
      image: game.background_image,
      background_image: game.background_image,
      released: game.released,
      developers: game.developers || [],
      publishers: game.publishers || [],
      genres: game.genres || [],
      
      description_raw: game.description_raw,
      metacritic: game.metacritic,
      esrb_rating: game.esrb_rating,
      platforms: game.platforms || [],
      tags: game.tags || [],
      rating_count: game.rating_count || 0,
      parent_platforms: game.parent_platforms || [],
      website: game.website,
      stores: game.stores || [],
      screenshots: game.screenshots || []
    }
    
    console.log('🎮 Converted result:', {
      title: converted.title,
      developer: converted.developer,
      author: converted.author,
      year: converted.year,
      rating: converted.rating
    })
    
    return converted
  }

  async getSimilarGames(game: RAWGGame, limit: number = 6): Promise<RAWGGame[]> {
    try {
      if (!game.genres || game.genres.length === 0) {
        return []
      }
      
      const genre = game.genres[0].name
      const response = await fetch(
        `${this.baseURL}/games?key=${this.apiKey}&genres=${genre}&page_size=${limit + 5}&ordering=-rating`
      )
      
      if (!response.ok) {
        throw new Error(`RAWG API Error: ${response.status}`)
      }
      
      const data: RAWGSearchResponse = await response.json()
      
      return (data.results || [])
        .filter(g => g.id !== game.id)
        .slice(0, limit)
    } catch (error) {
      console.error('Error fetching similar games:', error)
      return []
    }
  }

  async getGamesByDeveloper(developerId: number, excludeGameId: number, limit: number = 6): Promise<RAWGGame[]> {
    try {
      const response = await fetch(
        `${this.baseURL}/games?key=${this.apiKey}&developers=${developerId}&page_size=${limit + 5}&ordering=-rating`
      )
      
      if (!response.ok) {
        throw new Error(`RAWG API Error: ${response.status}`)
      }
      
      const data: RAWGSearchResponse = await response.json()
      
      return (data.results || [])
        .filter(g => g.id !== excludeGameId)
        .slice(0, limit)
    } catch (error) {
      console.error('Error fetching games by developer:', error)
      return []
    }
  }
}

export const rawgService = new RAWGService()
</file>

<file path="src/components/LibrarySection.tsx">
'use client'
import { useState, useEffect } from 'react'
import { Filter, Grid, List, Search, Star, Calendar, Clock, CheckCircle, Heart, Trash2, Edit3, MoreVertical, Plus, X, Sparkles, Gamepad2, Film, Music, BookOpen, Library } from 'lucide-react'

// Types
type MediaCategory = 'games' | 'movies' | 'music' | 'books'
type MediaStatus = 'want-to-play' | 'currently-playing' | 'completed' | 'paused' | 'dropped'

interface LibraryItem {
  id: string
  title: string
  year: number
  rating?: number
  genre?: string
  category: MediaCategory
  image?: string
  author?: string
  artist?: string
  director?: string
  status: MediaStatus
  addedAt: string
  dateStarted?: string
  dateCompleted?: string
  userRating?: number
  progress?: number
  notes?: string
}

// Utility functions
const normalizeId = (id: string): string => {
  if (!id) return ''
  return id.toString().replace(/^(game-|movie-|music-|book-)/, '')
}

const idsMatch = (id1: string, id2: string): boolean => {
  return normalizeId(id1) === normalizeId(id2)
}

// WelcomePopup Component
const WelcomePopup = ({ isOpen, onClose, onOpenSearch, onScanLibrary }: {
  isOpen: boolean
  onClose: () => void
  onOpenSearch: () => void
  onScanLibrary?: () => void
}) => {
  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black/20 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-gradient-to-br from-blue-600 to-purple-700 rounded-2xl w-full max-w-md shadow-2xl border border-white/20 overflow-hidden">
        <button
          onClick={onClose}
          className="absolute top-4 right-4 text-white/80 hover:text-white z-10 p-2 hover:bg-white/10 rounded-full transition-colors"
        >
          <X size={20} />
        </button>

        <div className="p-8 text-white">
          <div className="text-center mb-6">
            <div className="flex justify-center items-center space-x-2 mb-4">
              <Sparkles className="text-yellow-300" size={24} />
              <h1 className="text-2xl font-bold">Welcome to Stackr!</h1>
              <Sparkles className="text-yellow-300" size={24} />
            </div>
            
            <div className="flex justify-center space-x-4 mb-4 opacity-80">
              <Gamepad2 size={20} className="text-green-300" />
              <Film size={20} className="text-blue-300" />
              <Music size={20} className="text-purple-300" />
              <BookOpen size={20} className="text-orange-300" />
            </div>
          </div>

          <div className="space-y-4 text-center text-white/90">
            <p className="text-lg leading-relaxed">
              Track all your entertainment in one place! Games, movies, music, and books.
            </p>
            
            <p className="text-sm leading-relaxed opacity-90">
              Content you rate, review, or add to your library will automatically be saved here.
            </p>
            
            <p className="text-sm leading-relaxed opacity-90">
              Let's get you started by adding items to your collection.
            </p>
          </div>

          <div className="space-y-3 mt-8">
            <button
              onClick={() => {
                onOpenSearch()
                onClose()
              }}
              className="w-full bg-white hover:bg-gray-100 text-gray-900 py-3 px-6 rounded-xl font-semibold transition-all duration-200 flex items-center justify-center space-x-2 shadow-lg hover:shadow-xl"
            >
              <Search size={18} />
              <span>Search & Add Content</span>
            </button>
            
            {onScanLibrary && (
              <button
                onClick={() => {
                  onScanLibrary()
                  onClose()
                }}
                className="w-full bg-white/10 hover:bg-white/20 backdrop-blur-sm text-white py-3 px-6 rounded-xl font-semibold transition-all duration-200 flex items-center justify-center space-x-2 border border-white/20"
              >
                <Library size={18} />
                <span>Import from Other Apps</span>
              </button>
            )}
            
            <button
              onClick={onClose}
              className="w-full text-white/80 hover:text-white py-2 px-6 rounded-xl font-medium transition-colors text-sm"
            >
              I'll explore on my own
            </button>
          </div>

          <div className="mt-6 p-4 bg-white/10 backdrop-blur-sm rounded-xl border border-white/20">
            <div className="flex items-start space-x-3">
              <Sparkles size={16} className="text-yellow-300 mt-0.5 flex-shrink-0" />
              <p className="text-xs text-white/90 leading-relaxed">
                <span className="font-semibold">Pro tip:</span> Use the search to find and add your favorite games, movies, albums, and books. You can track what you want to experience, what you're currently enjoying, and what you've completed!
              </p>
            </div>
          </div>
        </div>

        <div className="h-2 bg-gradient-to-r from-yellow-400 via-pink-400 to-purple-400"></div>
      </div>
    </div>
  )
}

// ContentCard Component
const ContentCard = ({ 
  item, 
  category, 
  onAddToLibrary, 
  library, 
  onOpenGameDetail, 
  onOpenMovieDetail, 
  onOpenBookDetail, 
  onOpenMusicDetail 
}: {
  item: LibraryItem
  category: MediaCategory
  onAddToLibrary: (item: any, status: MediaStatus) => void
  library: LibraryItem[]
  onOpenGameDetail?: (gameId: string) => void
  onOpenMovieDetail?: (movieId: string) => void
  onOpenBookDetail?: (bookId: string) => void
  onOpenMusicDetail?: (musicId: string) => void
}) => {
  const [showActions, setShowActions] = useState(false)
  
  const safeLibrary = Array.isArray(library) ? library : []
  const libraryItem = safeLibrary.find((libItem: LibraryItem) => idsMatch(libItem.id, item.id))
  const isInLibrary = !!libraryItem
  const currentStatus = libraryItem?.status

  const handleAdd = (status: MediaStatus) => {
    onAddToLibrary(item, status)
    setShowActions(false)
  }

  const handleCardClick = () => {
    if (category === 'games' && onOpenGameDetail) {
      onOpenGameDetail(item.id)
    } else if (category === 'movies' && onOpenMovieDetail) {
      onOpenMovieDetail(item.id)
    } else if (category === 'books' && onOpenBookDetail) {
      onOpenBookDetail(item.id)
    } else if (category === 'music' && onOpenMusicDetail) {
      onOpenMusicDetail(item.id)
    }
  }

  const getCategoryGradient = (category: MediaCategory) => {
    switch (category) {
      case 'games': return 'from-green-400 to-blue-500'
      case 'movies': return 'from-purple-400 to-pink-500'
      case 'music': return 'from-orange-400 to-red-500'
      case 'books': return 'from-blue-400 to-purple-500'
      default: return 'from-gray-400 to-gray-600'
    }
  }

  const getCategoryEmoji = (category: MediaCategory) => {
    switch (category) {
      case 'games': return '🎮'
      case 'movies': return '🎬'
      case 'music': return '🎵'
      case 'books': return '📚'
      default: return '📄'
    }
  }

  const getActionLabel = (status: MediaStatus, category: MediaCategory) => {
    switch (status) {
      case 'want-to-play':
        switch (category) {
          case 'games': return 'Want to Play'
          case 'movies': return 'Want to Watch'
          case 'music': return 'Want to Listen'
          case 'books': return 'Want to Read'
          default: return 'Want to Play'
        }
      case 'currently-playing':
        switch (category) {
          case 'games': return 'Playing'
          case 'movies': return 'Watching'
          case 'music': return 'Listening'
          case 'books': return 'Reading'
          default: return 'Playing'
        }
      case 'completed': return 'Completed'
      default: return 'Add'
    }
  }

  return (
    <div className="group cursor-pointer">
      <div 
        className="relative w-full h-40 bg-white rounded-lg overflow-hidden border border-gray-200 hover:border-gray-300 transition-all duration-200 shadow-sm hover:shadow-md"
        onClick={handleCardClick}
      >
        {item.image ? (
          <img 
            src={item.image} 
            alt={item.title} 
            className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300" 
          />
        ) : (
          <div className={`w-full h-full bg-gradient-to-br ${getCategoryGradient(category)} flex items-center justify-center`}>
            <span className="text-white text-2xl">
              {getCategoryEmoji(category)}
            </span>
          </div>
        )}
        
        <div className="absolute top-2 right-2">
          {isInLibrary ? (
            <div className="bg-green-500 text-white px-2 py-1 rounded-full text-xs font-medium">
              {getActionLabel(currentStatus!, category).split(' ')[0]}
            </div>
          ) : (
            <div className="relative">
              <button
                onClick={(e) => {
                  e.stopPropagation()
                  setShowActions(!showActions)
                }}
                className="w-7 h-7 bg-blue-500 hover:bg-blue-600 text-white rounded-full flex items-center justify-center transition-colors shadow-md hover:shadow-lg"
              >
                <Plus size={14} />
              </button>
              {showActions && (
                <div className="absolute top-8 right-0 bg-white/95 backdrop-blur-sm rounded-lg p-2 z-20 min-w-32 border border-gray-200 shadow-lg">
                  <button 
                    onClick={(e) => {
                      e.stopPropagation()
                      handleAdd('want-to-play')
                    }} 
                    className="block text-gray-700 text-xs p-2 hover:bg-gray-100 w-full text-left rounded transition-colors font-medium"
                  >
                    {getActionLabel('want-to-play', category)}
                  </button>
                  <button 
                    onClick={(e) => {
                      e.stopPropagation()
                      handleAdd('currently-playing')
                    }} 
                    className="block text-gray-700 text-xs p-2 hover:bg-gray-100 w-full text-left rounded transition-colors font-medium"
                  >
                    {getActionLabel('currently-playing', category)}
                  </button>
                  <button 
                    onClick={(e) => {
                      e.stopPropagation()
                      handleAdd('completed')
                    }} 
                    className="block text-gray-700 text-xs p-2 hover:bg-gray-100 w-full text-left rounded transition-colors font-medium"
                  >
                    Completed
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      <div className="mt-3 px-1">
        <div className="flex items-center justify-between mb-1">
          <h3 className="text-gray-900 text-sm font-semibold truncate leading-tight flex-1">
            {item.title}
          </h3>
        </div>
        
        <div className="flex justify-between items-center text-xs text-gray-500">
          <span>{item.year}</span>
          {item.rating && item.rating > 0 && (
            <span className="flex items-center">
              <Star size={10} className="text-yellow-500 mr-1 fill-current" />
              {item.rating.toFixed(1)}
            </span>
          )}
        </div>
        
        {isInLibrary && (
          <div className="mt-2">
            <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
              currentStatus === 'want-to-play' ? 'bg-orange-100 text-orange-700' :
              currentStatus === 'currently-playing' ? 'bg-green-100 text-green-700' :
              currentStatus === 'completed' ? 'bg-blue-100 text-blue-700' :
              'bg-gray-100 text-gray-700'
            }`}>
              {getActionLabel(currentStatus!, category)}
            </span>
          </div>
        )}
      </div>

      {showActions && (
        <div 
          className="fixed inset-0 z-10" 
          onClick={() => setShowActions(false)}
        />
      )}
    </div>
  )
}

interface LibrarySectionProps {
  library: LibraryItem[]
  onAddToLibrary: (item: any, status: MediaStatus) => void
  onUpdateItem?: (id: string, updates: Partial<LibraryItem>) => void
  onDeleteItem?: (id: string) => void
  onOpenGameDetail?: (gameId: string) => void
  onOpenMovieDetail?: (movieId: string) => void
  onOpenBookDetail?: (bookId: string) => void
  onOpenMusicDetail?: (musicId: string) => void
  onOpenSearch?: () => void
}

export default function LibrarySection({
  library = [],
  onAddToLibrary,
  onUpdateItem,
  onDeleteItem,
  onOpenGameDetail,
  onOpenMovieDetail,
  onOpenBookDetail,
  onOpenMusicDetail,
  onOpenSearch
}: LibrarySectionProps) {
  const [activeFilter, setActiveFilter] = useState('all')
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid')
  const [searchQuery, setSearchQuery] = useState('')
  const [editingItem, setEditingItem] = useState<string | null>(null)
  const [showWelcomePopup, setShowWelcomePopup] = useState(false)

  // Ensure library is always an array
  const safeLibrary = Array.isArray(library) ? library : []

  // Check if user should see welcome popup
  useEffect(() => {
    const hasSeenWelcome = localStorage.getItem('stackr_welcome_seen')
    
    if (!hasSeenWelcome && safeLibrary.length === 0) {
      setShowWelcomePopup(true)
    }
  }, [safeLibrary.length])

  // Function to close welcome popup and mark as seen
  const handleCloseWelcome = () => {
    localStorage.setItem('stackr_welcome_seen', 'true')
    setShowWelcomePopup(false)
  }

  // Filter library by status and search
  const filteredLibrary = safeLibrary.filter(item => {
    if (!item) return false
    
    // Status filter
    if (activeFilter !== 'all' && item.status !== activeFilter) return false
    
    // Search filter
    if (searchQuery) {
      const query = searchQuery.toLowerCase()
      return (
        (item.title || '').toLowerCase().includes(query) ||
        (item.author || '').toLowerCase().includes(query) ||
        (item.artist || '').toLowerCase().includes(query) ||
        (item.director || '').toLowerCase().includes(query) ||
        (item.genre || '').toLowerCase().includes(query)
      )
    }

    return true
  })

  // Get status count
  const getStatusCount = (status: string) => {
    if (status === 'all') return safeLibrary.length
    return safeLibrary.filter(item => item && item.status === status).length
  }

  // Get status display info
  const getStatusInfo = (status: string) => {
    switch (status) {
      case 'want-to-play': return { label: 'Wishlist', color: 'status-want', icon: 'Heart' }
      case 'currently-playing': return { label: 'Playing', color: 'status-playing', icon: 'Clock' }
      case 'completed': return { label: 'Completed', color: 'status-completed', icon: 'CheckCircle' }
      case 'dropped': return { label: 'Dropped', color: 'status-dropped', icon: 'Trash2' }
      case 'paused': return { label: 'Paused', color: 'status-paused', icon: 'Clock' }
      default: return { label: status, color: 'bg-gray-100 text-gray-600 border-gray-200', icon: 'Clock' }
    }
  }

  const getCategoryInfo = (category: string) => {
    switch (category) {
      case 'games': return { label: 'Games', icon: '🎮', color: 'text-green-600' }
      case 'movies': return { label: 'Movies', icon: '🎬', color: 'text-blue-600' }
      case 'music': return { label: 'Music', icon: '🎵', color: 'text-purple-600' }
      case 'books': return { label: 'Books', icon: '📚', color: 'text-orange-600' }
      default: return { label: category, icon: '📄', color: 'text-gray-600' }
    }
  }

  const getCreator = (item: LibraryItem) => {
    return item.author || item.artist || item.director || 'Unknown'
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    })
  }

  const handleStatusChange = (itemId: string, newStatus: MediaStatus) => {
    if (!onUpdateItem || !itemId) return
    
    const updates: Partial<LibraryItem> = { status: newStatus }

    if (newStatus === 'completed' && !safeLibrary.find(i => i && i.id === itemId)?.dateCompleted) {
      updates.dateCompleted = new Date().toISOString()
    }
    if (newStatus === 'currently-playing' && !safeLibrary.find(i => i && i.id === itemId)?.dateStarted) {
      updates.dateStarted = new Date().toISOString()
    }

    onUpdateItem(itemId, updates)
  }

  // Fonction pour ouvrir les détails selon le type d'item
  const handleOpenItemDetail = (item: LibraryItem) => {
    if (item.category === 'games' && onOpenGameDetail) {
      onOpenGameDetail(item.id)
    } else if (item.category === 'movies' && onOpenMovieDetail) {
      onOpenMovieDetail(item.id)
    } else if (item.category === 'books' && onOpenBookDetail) {
      onOpenBookDetail(item.id)
    } else if (item.category === 'music' && onOpenMusicDetail) {
      onOpenMusicDetail(item.id)
    }
  }

  // Quick Edit Modal Component
  const QuickEditModal = ({ item }: { item: LibraryItem }) => {
    if (!item) return null
    
    return (
      <div className="fixed inset-0 bg-black/20 backdrop-blur-sm z-50 flex items-center justify-center p-4">
        <div className="bg-white rounded-xl w-full max-w-md border border-gray-200 shadow-lg">
          <div className="p-4 border-b border-gray-100">
            <h3 className="text-gray-900 font-medium">Edit {item.title || 'Item'}</h3>
          </div>
        
        <div className="p-4 space-y-4">
          {/* Status */}
          <div>
            <label className="block text-gray-700 text-sm mb-2 font-medium">Status</label>
            <select
              value={item.status}
              onChange={(e) => handleStatusChange(item.id, e.target.value as MediaStatus)}
              className="w-full bg-white text-gray-900 rounded-lg px-3 py-2 border border-gray-300 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 outline-none"
            >
              <option value="want-to-play">Wishlist</option>
              <option value="currently-playing">Playing</option>
              <option value="paused">Paused</option>
              <option value="completed">Completed</option>
              <option value="dropped">Dropped</option>
            </select>
          </div>

          {/* Rating */}
          <div>
            <label className="block text-gray-700 text-sm mb-2 font-medium">Rating</label>
            <div className="flex space-x-1">
              {[1, 2, 3, 4, 5].map((star) => (
                <button
                  key={star}
                  onClick={() => onUpdateItem?.(item.id, { userRating: star })}
                  className={`p-1 transition-colors ${(item.userRating || 0) >= star ? 'text-yellow-500' : 'text-gray-300 hover:text-yellow-400'}`}
                >
                  <Star size={20} fill={(item.userRating || 0) >= star ? 'currentColor' : 'none'} />
                </button>
              ))}
            </div>
          </div>

          {/* Progress */}
          {item.status === 'currently-playing' && (
            <div>
              <label className="block text-gray-700 text-sm mb-2 font-medium">Progress (%)</label>
              <input
                type="range"
                min="0"
                max="100"
                value={item.progress || 0}
                onChange={(e) => onUpdateItem?.(item.id, { progress: parseInt(e.target.value) })}
                className="w-full accent-blue-500"
              />
              <div className="text-center text-gray-600 text-sm mt-1">{item.progress || 0}%</div>
            </div>
          )}
        </div>

        <div className="p-4 border-t border-gray-100 flex justify-end space-x-2">
          <button
            onClick={() => setEditingItem(null)}
            className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors"
          >
            Close
          </button>
          {onDeleteItem && (
            <button
              onClick={() => {
                onDeleteItem(item.id)
                setEditingItem(null)
              }}
              className="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors"
            >
              Delete
            </button>
          )}
        </div>
      </div>
    </div>
  )
}

  if (safeLibrary.length === 0) {
    return (
      <section className="mt-12 mb-8">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-2xl font-bold text-gray-900">Your Library</h2>
        </div>
        
        <div className="text-center py-12 bg-gray-50 rounded-xl border-2 border-dashed border-gray-300">
          <div className="text-6xl mb-4">📚</div>
          <h3 className="text-xl font-semibold text-gray-900 mb-2">Your library is empty</h3>
          <p className="text-gray-600 mb-6">Start adding games, movies, music, and books to track your collection!</p>
          {onOpenSearch && (
            <button 
              onClick={onOpenSearch}
              className="btn-primary"
            >
              Add Your First Item
            </button>
          )}
        </div>

        {/* Welcome Popup */}
        <WelcomePopup
          isOpen={showWelcomePopup}
          onClose={handleCloseWelcome}
          onOpenSearch={onOpenSearch || (() => {})}
          onScanLibrary={() => {
            console.log('Import feature coming soon!')
            handleCloseWelcome()
          }}
        />
      </section>
    )
  }

  return (
    <section className="mt-12 mb-8">
      {/* Header with title and controls */}
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-gray-900">
          Your Library
          <span className="text-lg font-normal text-gray-500 ml-2">
            ({safeLibrary.length} items)
          </span>
        </h2>
        
        <div className="flex items-center space-x-2">
          {/* Search button */}
          {onOpenSearch && (
            <button
              onClick={onOpenSearch}
              className="btn-primary flex items-center space-x-2"
            >
              <Search size={16} />
              <span>Add Items</span>
            </button>
          )}
          
          {/* View Mode Toggle */}
          <div className="flex items-center space-x-2 bg-gray-100 rounded-lg p-1 border border-gray-200">
            <button
              onClick={() => setViewMode('grid')}
              className={`p-2 rounded transition-colors ${
                viewMode === 'grid' 
                  ? 'bg-white text-blue-600 shadow-sm' 
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              <Grid size={16} />
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={`p-2 rounded transition-colors ${
                viewMode === 'list' 
                  ? 'bg-white text-blue-600 shadow-sm' 
                  : 'text-gray-500 hover:text-gray-700'
              }`}
            >
              <List size={16} />
            </button>
          </div>
        </div>
      </div>

      {/* Search */}
      <div className="relative mb-4">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={16} />
        <input
          type="text"
          placeholder="Search your library..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="w-full bg-white text-gray-900 pl-10 pr-4 py-2 rounded-lg border border-gray-300 focus:border-blue-500 focus:ring-1 focus:ring-blue-500 outline-none"
        />
      </div>

      {/* Status filters */}
      <div className="flex flex-wrap gap-2 mb-6">
        {[
          { key: 'all', label: 'All', icon: '📚' },
          { key: 'want-to-play', label: 'Wishlist', icon: '❤️' },
          { key: 'currently-playing', label: 'Playing', icon: '🎮' },
          { key: 'completed', label: 'Completed', icon: '✅' },
          { key: 'paused', label: 'Paused', icon: '⏸️' },
          { key: 'dropped', label: 'Dropped', icon: '🗑️' }
        ].map(({ key, label, icon }) => (
          <button
            key={key}
            onClick={() => setActiveFilter(key)}
            className={`flex items-center space-x-2 px-4 py-2 rounded-lg text-sm font-medium transition-colors border ${
              activeFilter === key
                ? 'bg-blue-600 text-white border-blue-600 shadow-sm'
                : 'bg-white text-gray-700 hover:bg-gray-50 hover:text-gray-900 border-gray-200'
            }`}
          >
            <span>{icon}</span>
            <span>{label}</span>
            <span className="text-xs opacity-75 bg-white/20 px-1.5 py-0.5 rounded">
              ({getStatusCount(key)})
            </span>
          </button>
        ))}
      </div>

      {/* Content */}
      {filteredLibrary.length === 0 ? (
        <div className="text-center py-8 bg-gray-50 rounded-xl border border-gray-200">
          <div className="text-4xl mb-3">🔍</div>
          <p className="text-gray-600">
            {searchQuery 
              ? `No items found for "${searchQuery}"` 
              : `No items found for "${activeFilter === 'all' ? 'all' : activeFilter.replace('-', ' ')}" filter`
            }
          </p>
        </div>
      ) : (
        <>
          {/* Grid View */}
          {viewMode === 'grid' && (
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-3 sm:gap-4 mb-8">
              {filteredLibrary.map((item) => (
                <div key={item.id} className="group relative">
                  <ContentCard
                    item={item}
                    category={item.category}
                    onAddToLibrary={onAddToLibrary}
                    library={safeLibrary}
                    onOpenGameDetail={onOpenGameDetail}
                    onOpenMovieDetail={onOpenMovieDetail}
                    onOpenBookDetail={onOpenBookDetail}
                    onOpenMusicDetail={onOpenMusicDetail}
                  />
                  
                  {/* Edit button overlay */}
                  <button
                    onClick={() => setEditingItem(item.id)}
                    className="absolute bottom-2 right-2 bg-black/70 hover:bg-black/90 text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-all z-10"
                  >
                    <Edit3 size={14} />
                  </button>
                </div>
              ))}
            </div>
          )}

          {/* List View */}
          {viewMode === 'list' && (
            <div className="space-y-3 mb-8">
              {filteredLibrary.map((item) => {
                const statusInfo = getStatusInfo(item.status)
                const categoryInfo = getCategoryInfo(item.category)
                
                return (
                  <div key={item.id} className="library-card p-4">
                    <div className="flex items-center space-x-4">
                      {/* Image */}
                      <div 
                        className="w-16 h-20 rounded-lg bg-gray-100 flex-shrink-0 overflow-hidden border border-gray-200 cursor-pointer hover:opacity-80 transition-opacity"
                        onClick={() => handleOpenItemDetail(item)}
                      >
                        {item.image ? (
                          <img
                            src={item.image}
                            alt={item.title}
                            className="w-full h-full object-cover"
                          />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center text-lg">
                            {categoryInfo.icon}
                          </div>
                        )}
                      </div>

                      {/* Content */}
                      <div className="flex-1 min-w-0">
                        <div className="flex items-start justify-between">
                          <div>
                            <h3 
                              className="text-gray-900 font-medium cursor-pointer hover:text-blue-600 transition-colors"
                              onClick={() => handleOpenItemDetail(item)}
                            >
                              {item.title}
                            </h3>
                            <p className="text-gray-600 text-sm">{getCreator(item)}</p>
                            <div className="flex items-center space-x-2 mt-1">
                              <span className={`text-xs ${categoryInfo.color}`}>
                                {categoryInfo.icon} {categoryInfo.label}
                              </span>
                              {item.year && (
                                <>
                                  <span className="text-gray-400">•</span>
                                  <span className="text-gray-500 text-xs">{item.year}</span>
                                </>
                              )}
                            </div>
                          </div>

                          <button
                            onClick={() => setEditingItem(item.id)}
                            className="text-gray-400 hover:text-gray-600 p-1"
                          >
                            <MoreVertical size={16} />
                          </button>
                        </div>

                        {/* Status and Progress */}
                        <div className="flex items-center justify-between mt-3">
                          <div className="flex items-center space-x-3">
                            <span className={`status-badge ${statusInfo.color} flex items-center space-x-1`}>
                              {statusInfo.icon === 'Heart' && <Heart size={12} />}
                              {statusInfo.icon === 'Clock' && <Clock size={12} />}
                              {statusInfo.icon === 'CheckCircle' && <CheckCircle size={12} />}
                              {statusInfo.icon === 'Trash2' && <Trash2 size={12} />}
                              <span>{statusInfo.label}</span>
                            </span>

                            {item.userRating && (
                              <div className="flex items-center space-x-1">
                                <Star size={12} className="text-yellow-500" fill="currentColor" />
                                <span className="text-sm text-gray-700">{item.userRating}/5</span>
                              </div>
                            )}

                            {item.status === 'currently-playing' && item.progress && (
                              <div className="flex items-center space-x-2">
                                <div className="w-20 h-2 bg-gray-200 rounded-full overflow-hidden">
                                  <div 
                                    className="h-full bg-blue-500 transition-all"
                                    style={{ width: `${item.progress}%` }}
                                  />
                                </div>
                                <span className="text-xs text-gray-500">{item.progress}%</span>
                              </div>
                            )}
                          </div>

                          <div className="text-xs text-gray-500">
                            Added {formatDate(item.addedAt)}
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                )
              })}
            </div>
          )}
        </>
      )}

      {/* Quick stats */}
      <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
        <div className="bg-white border border-gray-200 rounded-lg p-4 text-center">
          <div className="text-2xl font-bold text-orange-600">{getStatusCount('want-to-play')}</div>
          <div className="text-sm text-gray-600">Wishlist</div>
        </div>
        <div className="bg-white border border-gray-200 rounded-lg p-4 text-center">
          <div className="text-2xl font-bold text-green-600">{getStatusCount('currently-playing')}</div>
          <div className="text-sm text-gray-600">Playing</div>
        </div>
        <div className="bg-white border border-gray-200 rounded-lg p-4 text-center">
          <div className="text-2xl font-bold text-blue-600">{getStatusCount('completed')}</div>
          <div className="text-sm text-gray-600">Completed</div>
        </div>
        <div className="bg-white border border-gray-200 rounded-lg p-4 text-center">
          <div className="text-2xl font-bold text-gray-900">{safeLibrary.length}</div>
          <div className="text-sm text-gray-600">Total Items</div>
        </div>
      </div>

      {/* Edit Modal */}
      {editingItem && filteredLibrary.find(i => i && i.id === editingItem) && (
        <QuickEditModal item={filteredLibrary.find(i => i && i.id === editingItem)!} />
      )}

      {/* Welcome Popup */}
      <WelcomePopup
        isOpen={showWelcomePopup}
        onClose={handleCloseWelcome}
        onOpenSearch={onOpenSearch || (() => {})}
        onScanLibrary={() => {
          console.log('Import feature coming soon!')
          handleCloseWelcome()
        }}
      />
    </section>
  )
}
</file>

<file path="src/components/MovieDetailModal.tsx">
'use client'
import { useState, useEffect, useRef } from 'react'
import { X, Star, ExternalLink, Calendar, Clock, Award, Users, Globe, Check } from 'lucide-react'
import { omdbService } from '@/services/omdbService'
import type { LibraryItem, Review, MediaStatus } from '@/types'

interface MovieDetailModalProps {
  isOpen: boolean
  onClose: () => void
  movieId: string
  onAddToLibrary: (item: any, status: MediaStatus) => void
  onDeleteItem?: (id: string) => void
  library: LibraryItem[]
  userReviews: Review[]
  imdbReviews: Review[]
  onReviewSubmit: (reviewData: any) => void
}

interface MovieDetail {
  imdbID: string
  Title: string
  Year: string
  Rated: string
  Released: string
  Runtime: string
  Genre: string
  Director: string
  Writer: string
  Actors: string
  Plot: string
  Language: string
  Country: string
  Awards: string
  Poster: string
  Ratings: { Source: string, Value: string }[]
  Metascore: string
  imdbRating: string
  imdbVotes: string
  Type: string
  DVD: string
  BoxOffice: string
  Production: string
  Website: string
}

export default function MovieDetailModal({ 
  isOpen, 
  onClose, 
  movieId, 
  onAddToLibrary, 
  onDeleteItem,
  library, 
  userReviews, 
  imdbReviews, 
  onReviewSubmit 
}: MovieDetailModalProps) {
  const [movieDetail, setMovieDetail] = useState<MovieDetail | null>(null)
  const [loading, setLoading] = useState(false)
  const [activeTab, setActiveTab] = useState<'info' | 'social' | 'more'>('info')
  const [selectedStatus, setSelectedStatus] = useState<MediaStatus | null>(null)
  const [userRating, setUserRating] = useState<number>(0)
  const [hoverRating, setHoverRating] = useState<number>(0)
  const [showReviewBox, setShowReviewBox] = useState(false)
  const [userReview, setUserReview] = useState('')
  const [similarMovies, setSimilarMovies] = useState<any[]>([])

  const scrollableRef = useRef<HTMLDivElement>(null)

  const movieStats = {
    'want-to-play': 2341,
    'currently-playing': 1156,
    'completed': 8923
  }

  useEffect(() => {
    if (isOpen) {
      setActiveTab('info')
      setSimilarMovies([])
    }
  }, [isOpen, movieId])

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden'
    } else {
      document.body.style.overflow = 'unset'
    }
    
    return () => {
      document.body.style.overflow = 'unset'
    }
  }, [isOpen])

  useEffect(() => {
    if (isOpen && movieId) {
      fetchMovieDetail()
    }
  }, [isOpen, movieId])

  // 🔧 SIMPLIFIÉ: Même logique que GameDetailModal
  useEffect(() => {
    console.log('🎬 Simple status check for movieId:', movieId)
    console.log('🎬 Library items:', library.map(item => `${item.id} (${item.title})`))
    
    const libraryItem = library.find(item => item.id === movieId)
    if (libraryItem) {
      console.log('🎬 ✅ Found in library:', libraryItem)
      setSelectedStatus(libraryItem.status)
    } else {
      console.log('🎬 ❌ Not found in library')
      setSelectedStatus(null)
    }
  }, [movieId, library])

  const fetchMovieDetail = async () => {
    if (!movieId) return
    
    setLoading(true)
    try {
      let imdbId = movieId
      
      if (movieId.startsWith('movie-')) {
        imdbId = movieId.replace('movie-', '')
      }
      
      console.log('🎬 Fetching movie details for ID:', imdbId)
      
      const data = await omdbService.getMovieDetails(imdbId)
      setMovieDetail(data as MovieDetail)
      
      if (data?.Genre) {
        await fetchSimilarMovies(data.Genre.split(',')[0].trim())
      }
      
    } catch (error) {
      console.error('Error loading movie details:', error)
      setMovieDetail(null)
    } finally {
      setLoading(false)
    }
  }

  const fetchSimilarMovies = async (genre: string) => {
    try {
      const searchResults = await omdbService.searchMovies(genre)
      const similarMoviesData = searchResults
        .filter(movie => movie.imdbID !== movieId)
        .slice(0, 6)
        .map(movie => omdbService.convertToAppFormat(movie))
      
      setSimilarMovies(similarMoviesData)
    } catch (error) {
      console.error('Error fetching similar movies:', error)
      setSimilarMovies([])
    }
  }

  // 🔧 SIMPLIFIÉ: Même logique que GameDetailModal
  const handleStatusSelect = (status: MediaStatus) => {
    if (!movieDetail) return
    
    console.log('🎬 Adding movie to library with movieId:', movieId)
    
    const movieItem = {
      id: movieId, // 🔑 UTILISE DIRECTEMENT movieId comme GameDetailModal
      title: movieDetail.Title,
      image: movieDetail.Poster !== 'N/A' ? movieDetail.Poster : undefined,
      category: 'movies' as const,
      year: parseInt(movieDetail.Year) || new Date().getFullYear(),
      rating: movieDetail.imdbRating ? Number((parseFloat(movieDetail.imdbRating) / 2).toFixed(1)) : 0,
      director: movieDetail.Director
    }
    
    onAddToLibrary(movieItem, status)
    setSelectedStatus(status)
  }

  const getStatusLabel = (status: MediaStatus) => {
    switch (status) {
      case 'want-to-play': return 'Want to Watch'
      case 'currently-playing': return 'Watching'
      case 'completed': return 'Watched'
      case 'paused': return 'Paused'
      case 'dropped': return 'Dropped'
      default: return status
    }
  }

  const getStatusColor = (status: MediaStatus) => {
    switch (status) {
      case 'want-to-play': return 'bg-orange-500 hover:bg-orange-600 text-white'
      case 'currently-playing': return 'bg-green-500 hover:bg-green-600 text-white'
      case 'completed': return 'bg-blue-500 hover:bg-blue-600 text-white'
      case 'paused': return 'bg-yellow-500 hover:bg-yellow-600 text-white'
      case 'dropped': return 'bg-red-500 hover:bg-red-600 text-white'
      default: return 'bg-gray-500 hover:bg-gray-600 text-white'
    }
  }

  const handleSubmitReview = () => {
    if (userRating > 0 && userReview.trim()) {
      onReviewSubmit({
        rating: userRating,
        review: userReview.trim()
      })
      
      setShowReviewBox(false)
      setUserReview('')
      setUserRating(0)
    }
  }

  if (!isOpen) return null

  return (
    <div 
      className="fixed inset-0 bg-black/20 backdrop-blur-sm z-50 flex items-center justify-center p-4"
      onClick={(e) => {
        if (e.target === e.currentTarget) {
          onClose()
        }
      }}
    >
      <div 
        className="bg-white rounded-2xl w-full max-w-4xl h-[90vh] overflow-hidden flex flex-col shadow-xl border border-gray-100"
        onClick={(e) => e.stopPropagation()}
      >
        {loading ? (
          <div className="flex items-center justify-center py-20">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          </div>
        ) : movieDetail ? (
          <>
            {/* Header */}
            <div className="relative bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
              <button
                onClick={onClose}
                className="absolute top-4 right-4 text-gray-500 hover:text-gray-700 z-10 p-2 hover:bg-white/80 rounded-full transition-colors"
              >
                <X size={20} />
              </button>
              
              <div className="p-6 flex items-center space-x-4">
                <div className="w-20 h-28 rounded-xl border border-gray-200 shadow-sm overflow-hidden bg-gray-100 flex-shrink-0">
                  {movieDetail.Poster !== 'N/A' ? (
                    <img
                      src={movieDetail.Poster}
                      alt={movieDetail.Title}
                      className="w-full h-full object-cover"
                    />
                  ) : (
                    <div className="w-full h-full flex items-center justify-center text-2xl">
                      🎬
                    </div>
                  )}
                </div>
                
                <div className="flex-1">
                  <h1 className="text-2xl font-bold text-gray-900 mb-2">{movieDetail.Title}</h1>
                  
                  <div className="flex items-center space-x-4 mb-2">
                    <span className="text-gray-600">{movieDetail.Year}</span>
                    <span className="text-gray-600">•</span>
                    <span className="text-gray-600">{movieDetail.Runtime}</span>
                    {movieDetail.Rated && (
                      <>
                        <span className="text-gray-600">•</span>
                        <span className="bg-gray-200 text-gray-700 px-2 py-1 rounded text-sm font-medium">
                          {movieDetail.Rated}
                        </span>
                      </>
                    )}
                  </div>
                  
                  {movieDetail.imdbRating && movieDetail.imdbRating !== 'N/A' && (
                    <div className="flex items-center space-x-2">
                      <div className="flex">
                        {[1, 2, 3, 4, 5].map((star) => (
                          <Star
                            key={star}
                            size={16}
                            className={`${
                              star <= (parseFloat(movieDetail.imdbRating) / 2) ? 'text-yellow-500 fill-current' : 'text-gray-300'
                            }`}
                          />
                        ))}
                      </div>
                      <span className="text-sm text-gray-600">
                        {(parseFloat(movieDetail.imdbRating) / 2).toFixed(1)}/5 • IMDb {movieDetail.imdbRating}/10
                      </span>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Content */}
            <div ref={scrollableRef} className="flex-1 overflow-y-auto">
              {/* 🔧 EXACTEMENT comme GameDetailModal */}
              <div className="p-6 border-b border-gray-100">
                <div className="flex space-x-3 mb-4">
                  {(['want-to-play', 'currently-playing', 'completed'] as const).map((status) => (
                    <button
                      key={status}
                      onClick={() => {
                        // 🔑 EXACTEMENT la même logique que GameDetailModal
                        if (selectedStatus === status) {
                          // Si déjà sélectionné, on retire de la bibliothèque
                          if (onDeleteItem) {
                            console.log('🗑️ Removing movie with ID:', movieId)
                            onDeleteItem(movieId) // 🔑 UTILISE DIRECTEMENT movieId
                          }
                          setSelectedStatus(null)
                        } else {
                          // Ajouter/Modifier le statut
                          handleStatusSelect(status)
                        }
                      }}
                      className={`flex-1 py-3 px-4 rounded-xl font-medium transition-all shadow-sm ${
                        selectedStatus === status
                          ? `${getStatusColor(status)} ring-2 ring-blue-300`
                          : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                      }`}
                    >
                      <div className="flex items-center justify-center space-x-2">
                        {selectedStatus === status && (
                          <Check size={16} className="text-white" />
                        )}
                        <div>
                          <div className="text-sm font-semibold">{getStatusLabel(status)}</div>
                          <div className="text-xs opacity-80">
                            {movieStats[status].toLocaleString()} users
                          </div>
                        </div>
                      </div>
                    </button>
                  ))}
                </div>
                
                {/* Message d'état */}
                {selectedStatus ? (
                  <div className="text-sm text-green-600 bg-green-50 border border-green-200 rounded-lg p-3 flex items-center justify-between">
                    <span>✅ Added to your library as "{getStatusLabel(selectedStatus)}"</span>
                    <button 
                      onClick={() => {
                        if (onDeleteItem) {
                          console.log('🗑️ Remove button clicked for movieId:', movieId)
                          onDeleteItem(movieId) // 🔑 UTILISE DIRECTEMENT movieId
                        }
                        setSelectedStatus(null)
                      }}
                      className="text-red-600 hover:text-red-800 text-sm underline"
                    >
                      Remove from library
                    </button>
                  </div>
                ) : (
                  <div className="text-sm text-gray-500 bg-gray-50 border border-gray-200 rounded-lg p-3">
                    💡 Click a status to add this movie to your library
                  </div>
                )}

                {/* User rating */}
                <div className="mt-6 pt-6 border-t border-gray-100">
                  <h4 className="text-gray-900 font-semibold mb-3">Rate this movie</h4>
                  <div className="flex items-center space-x-2 mb-3">
                    {[1, 2, 3, 4, 5].map((rating) => (
                      <button
                        key={rating}
                        onClick={() => {
                          setUserRating(rating)
                          setShowReviewBox(true)
                        }}
                        onMouseEnter={() => setHoverRating(rating)}
                        onMouseLeave={() => setHoverRating(0)}
                        className="p-1 hover:scale-110 transition-transform"
                      >
                        <Star
                          size={24}
                          className={`transition-colors ${
                            (hoverRating || userRating) >= rating
                              ? 'text-yellow-500 fill-current'
                              : 'text-gray-300 hover:text-yellow-400'
                          }`}
                        />
                      </button>
                    ))}
                    {userRating > 0 && (
                      <span className="text-gray-900 ml-2 font-medium">{userRating}/5</span>
                    )}
                  </div>
                  
                  {showReviewBox && (
                    <div className="mt-4 p-4 bg-gray-50 rounded-xl border border-gray-200">
                      <label className="text-sm text-gray-700 mb-2 block font-medium">Share your thoughts</label>
                      <textarea
                        value={userReview}
                        onChange={(e) => setUserReview(e.target.value)}
                        placeholder="What did you think about this movie?"
                        className="w-full h-20 px-3 py-2 bg-white text-gray-900 text-sm rounded-lg resize-none border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                      <div className="flex space-x-2 mt-3">
                        <button 
                          onClick={handleSubmitReview}
                          className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors"
                        >
                          Submit Review
                        </button>
                        <button 
                          onClick={() => {
                            setShowReviewBox(false)
                            setUserReview('')
                          }}
                          className="px-4 py-2 bg-gray-200 text-gray-700 text-sm font-medium rounded-lg hover:bg-gray-300 transition-colors"
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* Reviews Section */}
              <div className="p-6 border-b border-gray-100">
                <h3 className="text-gray-900 font-semibold mb-4">Recent Reviews</h3>
                <div className="flex space-x-4 overflow-x-auto pb-2">
                  {userReviews.map((review) => (
                    <div key={review.id} className="flex-shrink-0 w-64 bg-blue-50 rounded-xl p-4 border border-blue-100">
                      <div className="flex items-center space-x-2 mb-3">
                        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                          <span className="text-blue-600 text-sm">👤</span>
                        </div>
                        <span className="text-gray-900 text-sm font-medium">{review.username}</span>
                        <span className="text-xs text-blue-600 bg-blue-200 px-2 py-1 rounded-full font-medium">You</span>
                      </div>
                      <div className="flex items-center space-x-1 mb-2">
                        {[1, 2, 3, 4, 5].map((star) => (
                          <Star
                            key={star}
                            size={12}
                            className={`${
                              star <= review.rating ? 'text-yellow-500 fill-current' : 'text-gray-300'
                            }`}
                          />
                        ))}
                        <span className="text-xs text-gray-600 ml-1">{review.rating}/5</span>
                      </div>
                      <p className="text-gray-700 text-sm leading-relaxed">
                        {review.review || review.text}
                      </p>
                    </div>
                  ))}
                  
                  {imdbReviews.slice(0, 5).map((review) => (
                    <div key={review.id} className="flex-shrink-0 w-64 bg-gray-50 rounded-xl p-4 border border-gray-200">
                      <div className="flex items-center space-x-2 mb-3">
                        <div className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center">
                          <span className="text-gray-600 text-sm">🎬</span>
                        </div>
                        <span className="text-gray-900 text-sm font-medium">{review.username}</span>
                        <span className="text-xs text-gray-600 bg-gray-200 px-2 py-1 rounded-full font-medium">IMDb</span>
                      </div>
                      <div className="flex items-center space-x-1 mb-2">
                        {[1, 2, 3, 4, 5].map((star) => (
                          <Star
                            key={star}
                            size={12}
                            className={`${
                              star <= review.rating ? 'text-yellow-500 fill-current' : 'text-gray-300'
                            }`}
                          />
                        ))}
                        <span className="text-xs text-gray-600 ml-1">{review.rating}/5</span>
                      </div>
                      <p className="text-gray-700 text-sm leading-relaxed">
                        {review.text}
                      </p>
                    </div>
                  ))}
                </div>
              </div>

              {/* Tabs */}
              <div className="sticky top-0 z-10 bg-white border-b border-gray-100">
                <div className="flex px-6">
                  {(['info', 'social', 'more'] as const).map((tab) => (
                    <button
                      key={tab}
                      onClick={() => setActiveTab(tab)}
                      className={`flex-1 py-4 px-4 font-medium transition-colors relative ${
                        activeTab === tab
                          ? 'text-gray-900'
                          : 'text-gray-500 hover:text-gray-700'
                      }`}
                    >
                      {tab.charAt(0).toUpperCase() + tab.slice(1)}
                      {activeTab === tab && (
                        <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-gray-900 rounded-full" />
                      )}
                    </button>
                  ))}
                </div>
              </div>

              {/* Tab content */}
              <div className="p-6">
                {activeTab === 'info' && (
                  <div className="space-y-6">
                    <div>
                      <h4 className="text-gray-900 font-semibold mb-3">Plot</h4>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <p className="text-gray-700 leading-relaxed">
                          {movieDetail.Plot || 'No plot available.'}
                        </p>
                      </div>
                    </div>

                    <div className="grid grid-cols-2 gap-6">
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <h5 className="text-gray-900 font-medium mb-2">Director</h5>
                        <p className="text-gray-600 text-sm">
                          {movieDetail.Director || 'N/A'}
                        </p>
                      </div>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <h5 className="text-gray-900 font-medium mb-2">Release Date</h5>
                        <p className="text-gray-600 text-sm">
                          {movieDetail.Released || 'N/A'}
                        </p>
                      </div>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <h5 className="text-gray-900 font-medium mb-2">Genre</h5>
                        <p className="text-gray-600 text-sm">
                          {movieDetail.Genre || 'N/A'}
                        </p>
                      </div>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <h5 className="text-gray-900 font-medium mb-2">Runtime</h5>
                        <p className="text-gray-600 text-sm">
                          {movieDetail.Runtime || 'N/A'}
                        </p>
                      </div>
                    </div>

                    <div>
                      <h4 className="text-gray-900 font-semibold mb-3">Cast</h4>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <p className="text-gray-700 text-sm">
                          {movieDetail.Actors || 'Cast information not available.'}
                        </p>
                      </div>
                    </div>

                    {movieDetail.Awards && movieDetail.Awards !== 'N/A' && (
                      <div>
                        <h4 className="text-gray-900 font-semibold mb-3">Awards</h4>
                        <div className="bg-yellow-50 rounded-xl p-4 border border-yellow-200">
                          <p className="text-yellow-800 text-sm">
                            {movieDetail.Awards}
                          </p>
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {activeTab === 'social' && (
                  <div className="space-y-6">
                    <div>
                      <h4 className="text-gray-900 font-semibold mb-4">Community Stats</h4>
                      <div className="grid grid-cols-3 gap-4">
                        <div className="bg-orange-50 border border-orange-200 p-4 rounded-xl text-center">
                          <div className="text-2xl font-bold text-orange-600">{movieStats['want-to-play'].toLocaleString()}</div>
                          <div className="text-sm text-orange-700 font-medium">Want to Watch</div>
                        </div>
                        <div className="bg-green-50 border border-green-200 p-4 rounded-xl text-center">
                          <div className="text-2xl font-bold text-green-600">{movieStats['currently-playing'].toLocaleString()}</div>
                          <div className="text-sm text-green-700 font-medium">Watching</div>
                        </div>
                        <div className="bg-blue-50 border border-blue-200 p-4 rounded-xl text-center">
                          <div className="text-2xl font-bold text-blue-600">{movieStats['completed'].toLocaleString()}</div>
                          <div className="text-sm text-blue-700 font-medium">Watched</div>
                        </div>
                      </div>
                    </div>

                    <div>
                      <h4 className="text-gray-900 font-semibold mb-4">Ratings</h4>
                      <div className="space-y-3">
                        {movieDetail.Ratings?.map((rating, index) => (
                          <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg border border-gray-200">
                            <span className="font-medium text-gray-900">{rating.Source}</span>
                            <span className="text-gray-600">{rating.Value}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {activeTab === 'more' && (
                  <div className="space-y-6">
                    <div>
                      <h4 className="text-gray-900 font-semibold mb-4">External Links</h4>
                      <div className="space-y-3">
                        <a 
                          href={`https://www.imdb.com/title/${movieDetail.imdbID}/`}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="flex items-center gap-2 bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-3 rounded-xl transition-colors shadow-sm font-medium"
                        >
                          <ExternalLink className="w-4 h-4" />
                          View on IMDb
                        </a>

                        {movieDetail.Website && movieDetail.Website !== 'N/A' && (
                          <a
                            href={movieDetail.Website}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center space-x-2 bg-gray-50 hover:bg-gray-100 p-4 rounded-xl text-gray-700 hover:text-gray-900 transition-colors border border-gray-200"
                          >
                            <Globe size={16} />
                            <span className="font-medium">Official Website</span>
                            <ExternalLink size={12} />
                          </a>
                        )}
                      </div>
                    </div>

                    {similarMovies.length > 0 && (
                      <div>
                        <h4 className="text-gray-900 font-semibold mb-4">Similar Movies</h4>
                        <div className="flex space-x-3 overflow-x-auto pb-2">
                          {similarMovies.map((movie) => (
                            <div key={movie.id} className="flex-shrink-0 w-40 bg-white rounded-xl p-3 border border-gray-200 hover:border-gray-300 transition-colors cursor-pointer shadow-sm hover:shadow-md">
                              {movie.image && (
                                <img
                                  src={movie.image}
                                  alt={movie.title}
                                  className="w-full h-20 object-cover rounded-lg mb-2 border border-gray-100"
                                />
                              )}
                              <h5 className="text-sm font-medium text-gray-900 truncate mb-1" title={movie.title}>
                                {movie.title}
                              </h5>
                              <div className="flex items-center">
                                <Star size={12} className="text-yellow-500 fill-current mr-1" />
                                <span className="text-xs text-gray-600">{movie.rating?.toFixed(1) || 'N/A'}</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    <div>
                      <h4 className="text-gray-900 font-semibold mb-4">Additional Information</h4>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div className="flex justify-between">
                            <span className="font-medium text-gray-900">Language:</span>
                            <span className="text-gray-600">
                              {movieDetail.Language || 'N/A'}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="font-medium text-gray-900">Country:</span>
                            <span className="text-gray-600">
                              {movieDetail.Country || 'N/A'}
                            </span>
                          </div>
                          {movieDetail.BoxOffice && movieDetail.BoxOffice !== 'N/A' && (
                            <div className="flex justify-between col-span-2">
                              <span className="font-medium text-gray-900">Box Office:</span>
                              <span className="text-gray-600 text-right">
                                {movieDetail.BoxOffice}
                              </span>
                            </div>
                          )}
                          {movieDetail.Production && movieDetail.Production !== 'N/A' && (
                            <div className="flex justify-between col-span-2">
                              <span className="font-medium text-gray-900">Production:</span>
                              <span className="text-gray-600 text-right">
                                {movieDetail.Production}
                              </span>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </>
        ) : (
          <div className="p-8 text-center text-gray-600">
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-2xl">🎬</span>
            </div>
            <p className="text-lg font-medium text-gray-900 mb-2">Movie not found</p>
            <p className="text-sm">Unable to load movie details. Please try again.</p>
          </div>
        )}
      </div>
    </div>
  )
}
</file>

<file path="src/components/ContentSection.tsx">
'use client'
import ContentCard from './ContentCard'
import type { ContentItem, LibraryItem, MediaCategory, MediaStatus } from '@/types'

interface ContentSectionProps {
  title: string
  items: ContentItem[]
  category: MediaCategory
  onAddToLibrary: (item: ContentItem | LibraryItem, status: MediaStatus) => void
  onDeleteItem?: (id: string) => void // ✅ NOUVELLE PROP
  library: LibraryItem[]
  onOpenGameDetail?: (gameId: string) => void
  onOpenMovieDetail?: (movieId: string) => void
  onOpenBookDetail?: (bookId: string) => void
  onOpenMusicDetail?: (musicId: string) => void
}

export default function ContentSection({ 
  title, 
  items, 
  category, 
  onAddToLibrary, 
  onDeleteItem, // ✅ NOUVELLE PROP
  library, 
  onOpenGameDetail,
  onOpenMovieDetail,
  onOpenBookDetail,
  onOpenMusicDetail
}: ContentSectionProps) {
  return (
    <section className="mb-8">
      {/* Section Header */}
      <div className="flex items-center justify-between mb-4 px-1">
        <h2 className="text-xl font-bold text-gray-900">{title}</h2>
        <button className="text-blue-600 text-sm font-medium hover:text-blue-700 transition-colors">
          See all
        </button>
      </div>
      
      {/* Carrousel horizontal */}
      <div className="flex space-x-4 overflow-x-auto pb-4 horizontal-scroll">
        {items.map((item) => (
          <div key={item.id} className="flex-shrink-0 w-32">
            <ContentCard
              item={item}
              category={category}
              onAddToLibrary={onAddToLibrary}
              onDeleteItem={onDeleteItem} // ✅ NOUVELLE PROP PASSÉE
              library={library}
              onOpenGameDetail={onOpenGameDetail}
              onOpenMovieDetail={onOpenMovieDetail}
              onOpenBookDetail={onOpenBookDetail}
              onOpenMusicDetail={onOpenMusicDetail}
            />
          </div>
        ))}
      </div>
    </section>
  )
}
</file>

<file path="src/components/GameDetailModal.tsx">
'use client'
import { useState, useEffect, useRef } from 'react'
import { X, Star, ExternalLink, Tag, Globe, Check } from 'lucide-react'
import type { LibraryItem, Review, MediaStatus } from '@/types'

interface GameDetailModalProps {
  isOpen: boolean
  onClose: () => void
  gameId: string
  onAddToLibrary: (item: any, status: MediaStatus) => void
  onDeleteItem?: (id: string) => void // ✅ NOUVELLE PROP
  library: LibraryItem[]
  userReviews: Review[]
  googleReviews: Review[]
  onReviewSubmit: (reviewData: any) => void
}

interface GameDetail {
  id: number
  name: string
  background_image: string
  description_raw: string
  rating: number
  rating_count: number
  released: string
  platforms: { platform: { name: string } }[]
  developers: { name: string }[]
  publishers: { name: string }[]
  genres: { name: string }[]
  tags: { name: string }[]
  website: string
  stores: { store: { name: string }, url: string }[]
  screenshots: { image: string }[]
  metacritic: number
  esrb_rating: { name: string }
  parent_platforms: { platform: { name: string } }[]
}

export default function GameDetailModal({ 
  isOpen, 
  onClose, 
  gameId, 
  onAddToLibrary, 
  onDeleteItem, // ✅ NOUVELLE PROP
  library, 
  userReviews, 
  googleReviews, 
  onReviewSubmit 
}: GameDetailModalProps) {
  const [gameDetail, setGameDetail] = useState<GameDetail | null>(null)
  const [loading, setLoading] = useState(false)
  const [activeTab, setActiveTab] = useState<'info' | 'social' | 'more'>('info')
  const [selectedStatus, setSelectedStatus] = useState<MediaStatus | null>(null)
  const [userRating, setUserRating] = useState<number>(0)
  const [hoverRating, setHoverRating] = useState<number>(0)
  const [showReviewBox, setShowReviewBox] = useState(false)
  const [userReview, setUserReview] = useState('')
  const [similarGames, setSimilarGames] = useState<any[]>([])
  const [developerGames, setDeveloperGames] = useState<any[]>([])
  const [similarGamesLoading, setSimilarGamesLoading] = useState(true)

  const scrollableRef = useRef<HTMLDivElement>(null)

  const gameStats = {
    'want-to-play': 1247,
    'currently-playing': 856,
    'completed': 3421
  }

  const RAWG_API_KEY = '517c9101ad6b4cb0a1f8cd5c91ce57ec'

  // Steam Reviews
  const steamReviews = [
    { id: 1, username: 'SteamMaster', rating: 5, text: 'Absolutely incredible! Best game I\'ve played this year.', date: '2024-01-15' },
    { id: 2, username: 'GameReviewer', rating: 4, text: 'Great storyline and graphics. Minor bugs but overall excellent.', date: '2024-01-12' },
    { id: 3, username: 'RPGLover', rating: 5, text: 'Perfect RPG experience. Hours of entertainment guaranteed.', date: '2024-01-10' },
    { id: 4, username: 'CasualGamer', rating: 4, text: 'Fun and engaging. Worth the money spent.', date: '2024-01-08' },
    { id: 5, username: 'ProPlayer', rating: 5, text: 'Masterpiece! Revolutionary gameplay mechanics.', date: '2024-01-05' }
  ]

  useEffect(() => {
    if (isOpen) {
      setActiveTab('info')
      setSimilarGames([])
      setDeveloperGames([])
      setSimilarGamesLoading(true)
    }
  }, [isOpen, gameId])

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden'
    } else {
      document.body.style.overflow = 'unset'
    }
    
    return () => {
      document.body.style.overflow = 'unset'
    }
  }, [isOpen])

  useEffect(() => {
    if (isOpen && gameId) {
      fetchGameDetail()
    }
  }, [isOpen, gameId])

  useEffect(() => {
    const libraryItem = library.find(item => item.id === gameId)
    if (libraryItem) {
      setSelectedStatus(libraryItem.status)
    } else {
      setSelectedStatus(null)
    }
  }, [gameId, library])

  const fetchGameDetail = async () => {
    if (!gameId) return
    
    setLoading(true)
    try {
      let rawgId = gameId
      
      if (gameId.startsWith('game-')) {
        rawgId = gameId.replace('game-', '')
      }
      
      if (isNaN(Number(rawgId))) {
        const searchResponse = await fetch(
          `https://api.rawg.io/api/games?key=${RAWG_API_KEY}&search=${encodeURIComponent(rawgId)}&page_size=1`
        )
        const searchData = await searchResponse.json()
        
        if (searchData.results && searchData.results.length > 0) {
          rawgId = searchData.results[0].id.toString()
        } else {
          throw new Error('Game not found in search')
        }
      }
      
      const response = await fetch(
        `https://api.rawg.io/api/games/${rawgId}?key=${RAWG_API_KEY}`
      )
      
      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`)
      }
      
      const data = await response.json()
      setGameDetail(data)
      
      // Fetch similar games and developer games avec les IDs
      if (data.genres && data.genres.length > 0) {
        await fetchSimilarGames(data.genres[0].id, data.id) // Passer l'ID du genre et exclure le jeu actuel
      }
      if (data.developers && data.developers.length > 0) {
        await fetchDeveloperGames(data.developers[0].id, data.id) // Passer l'ID du développeur et exclure le jeu actuel
      }
      
      setSimilarGamesLoading(false)
      
    } catch (error) {
      console.error('Erreur lors du chargement des détails:', error)
      setGameDetail(null)
    } finally {
      setLoading(false)
    }
  }

  const fetchSimilarGames = async (genreId: number, excludeGameId: number) => {
    try {
      console.log('Fetching similar games for genre ID:', genreId, 'excluding game:', excludeGameId)
      
      // Essayer d'abord avec une requête générale sans filtre spécifique
      const response = await fetch(
        `https://api.rawg.io/api/games?key=${RAWG_API_KEY}&page_size=20&ordering=-rating&metacritic=80,100`
      )
      
      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`)
      }
      
      const data = await response.json()
      console.log('Similar games response (fallback):', data)
      
      // Prendre les jeux populaires et exclure le jeu actuel
      const filteredGames = (data.results || [])
        .filter((game: any) => game.id !== excludeGameId)
        .slice(0, 6)
      
      console.log('Filtered similar games:', filteredGames)
      setSimilarGames(filteredGames)
    } catch (error) {
      console.error('Error fetching similar games:', error)
      // Utiliser les données de fallback statiques
      const fallbackGames = [
        {
          id: 3498,
          name: "Grand Theft Auto V",
          background_image: "https://media.rawg.io/media/games/20a/20aa03a10cda45239fe22d035c0ebe64.jpg",
          rating: 4.47
        },
        {
          id: 5286,
          name: "Tomb Raider",
          background_image: "https://media.rawg.io/media/games/021/021c4e21a1824d2526f925eff6324653.jpg",
          rating: 4.05
        },
        {
          id: 13536,
          name: "Portal",
          background_image: "https://media.rawg.io/media/games/7fa/7fa0b586293c5861ee32490e953a4996.jpg",
          rating: 4.51
        },
        {
          id: 12020,
          name: "Left 4 Dead 2",
          background_image: "https://media.rawg.io/media/games/d58/d588947d4286e7b5e0e12e1bea7d9844.jpg",
          rating: 4.09
        },
        {
          id: 5679,
          name: "The Elder Scrolls V: Skyrim",
          background_image: "https://media.rawg.io/media/games/7cf/7cfc9220b401b7a300e409e539c9afd5.jpg",
          rating: 4.42
        },
        {
          id: 58175,
          name: "God of War",
          background_image: "https://media.rawg.io/media/games/4be/4be6a6ad0364751a96229c56bf69be59.jpg",
          rating: 4.56
        }
      ].filter(game => game.id !== excludeGameId).slice(0, 6)
      setSimilarGames(fallbackGames)
    }
  }

  const fetchDeveloperGames = async (developerId: number, excludeGameId: number) => {
    try {
      console.log('Fetching developer games for developer ID:', developerId, 'excluding game:', excludeGameId)
      
      // Essayer d'abord avec une requête générale pour les jeux récents populaires
      const response = await fetch(
        `https://api.rawg.io/api/games?key=${RAWG_API_KEY}&page_size=20&ordering=-released&dates=2020-01-01,2024-12-31`
      )
      
      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`)
      }
      
      const data = await response.json()
      console.log('Developer games response (fallback):', data)
      
      // Prendre les jeux récents et exclure le jeu actuel
      const filteredGames = (data.results || [])
        .filter((game: any) => game.id !== excludeGameId)
        .slice(0, 6)
      
      console.log('Filtered developer games:', filteredGames)
      setDeveloperGames(filteredGames)
    } catch (error) {
      console.error('Error fetching developer games:', error)
      // Utiliser les données de fallback statiques
      const fallbackGames = [
        {
          id: 4200,
          name: "Portal 2",
          background_image: "https://media.rawg.io/media/games/2ba/2bac0e87cf45e5b508f227d281c9252a.jpg",
          rating: 4.61
        },
        {
          id: 9767,
          name: "Hollow Knight",
          background_image: "https://media.rawg.io/media/games/4cf/4cfc6b7f1850590a4634b08bfab308ab.jpg",
          rating: 4.64
        },
        {
          id: 1030,
          name: "Limbo",
          background_image: "https://media.rawg.io/media/games/942/9424d6bb763dc38d9378b488603c87fa.jpg",
          rating: 4.15
        },
        {
          id: 422,
          name: "Baldur's Gate 3",
          background_image: "https://media.rawg.io/media/games/699/69993db1cfcaf895c8b22603ee1aae62.jpg",
          rating: 4.63
        },
        {
          id: 41494,
          name: "Cyberpunk 2077",
          background_image: "https://media.rawg.io/media/games/26d/26d4437715bee60138dab4a7c8c59c92.jpg",
          rating: 4.13
        },
        {
          id: 28,
          name: "Red Dead Redemption 2",
          background_image: "https://media.rawg.io/media/games/511/5118aff5091cb3efec399c808f8c598f.jpg",
          rating: 4.54
        }
      ].filter(game => game.id !== excludeGameId).slice(0, 6)
      setDeveloperGames(fallbackGames)
    }
  }

  const handleStatusSelect = (status: MediaStatus) => {
    if (!gameDetail) return
    
    const gameItem = {
      id: gameId,
      title: gameDetail.name,
      image: gameDetail.background_image,
      category: 'games' as const,
      year: gameDetail.released ? new Date(gameDetail.released).getFullYear() : 2024,
      rating: gameDetail.rating
    }
    
    onAddToLibrary(gameItem, status)
    setSelectedStatus(status)
  }

  const getStatusLabel = (status: MediaStatus) => {
    switch (status) {
      case 'want-to-play': return 'Want to Play'
      case 'currently-playing': return 'Playing'
      case 'completed': return 'Completed'
      case 'paused': return 'Paused'
      case 'dropped': return 'Dropped'
      default: return status
    }
  }

  const getStatusColor = (status: MediaStatus) => {
    switch (status) {
      case 'want-to-play': return 'bg-orange-500 hover:bg-orange-600 text-white'
      case 'currently-playing': return 'bg-green-500 hover:bg-green-600 text-white'
      case 'completed': return 'bg-blue-500 hover:bg-blue-600 text-white'
      case 'paused': return 'bg-yellow-500 hover:bg-yellow-600 text-white'
      case 'dropped': return 'bg-red-500 hover:bg-red-600 text-white'
      default: return 'bg-gray-500 hover:bg-gray-600 text-white'
    }
  }

  const handleSubmitReview = () => {
    if (userRating > 0 && userReview.trim()) {
      onReviewSubmit({
        rating: userRating,
        review: userReview.trim()
      })
      
      setShowReviewBox(false)
      setUserReview('')
      setUserRating(0)
    }
  }

  if (!isOpen) return null

  return (
    <div 
      className="fixed inset-0 bg-black/20 backdrop-blur-sm z-50 flex items-center justify-center p-4"
      onClick={(e) => {
        if (e.target === e.currentTarget) {
          onClose()
        }
      }}
    >
      <div 
        className="bg-white rounded-2xl w-full max-w-4xl h-[90vh] overflow-hidden flex flex-col shadow-xl border border-gray-100"
        onClick={(e) => e.stopPropagation()}
      >
        {loading ? (
          <div className="flex items-center justify-center py-20">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          </div>
        ) : gameDetail ? (
          <>
            {/* Header épuré */}
            <div className="relative bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
              <button
                onClick={onClose}
                className="absolute top-4 right-4 text-gray-500 hover:text-gray-700 z-10 p-2 hover:bg-white/80 rounded-full transition-colors"
              >
                <X size={20} />
              </button>
              
              <div className="p-6 flex items-center space-x-4">
                <img
                  src={gameDetail.background_image}
                  alt={gameDetail.name}
                  className="w-20 h-20 object-cover rounded-xl border border-gray-200 shadow-sm"
                />
                <div className="flex-1">
                  <h1 className="text-2xl font-bold text-gray-900 mb-2">{gameDetail.name}</h1>
                  
                  {gameDetail.rating_count >= 10 && (
                    <div className="flex items-center space-x-2">
                      <div className="flex">
                        {[1, 2, 3, 4, 5].map((star) => (
                          <Star
                            key={star}
                            size={16}
                            className={`${
                              star <= gameDetail.rating ? 'text-yellow-500 fill-current' : 'text-gray-300'
                            }`}
                          />
                        ))}
                      </div>
                      <span className="text-sm text-gray-600">
                        {gameDetail.rating.toFixed(1)} ({gameDetail.rating_count.toLocaleString()} reviews)
                      </span>
                    </div>
                  )}
                </div>
              </div>
            </div>

            {/* Content */}
            <div ref={scrollableRef} className="flex-1 overflow-y-auto">
              {/* ✅ Action buttons avec possibilité de décocher */}
              <div className="p-6 border-b border-gray-100">
                <div className="flex space-x-3 mb-4">
                  {(['want-to-play', 'currently-playing', 'completed'] as const).map((status) => (
                    <button
                      key={status}
                      onClick={() => {
                        // ✅ NOUVELLE LOGIQUE : Si déjà sélectionné, on retire de la bibliothèque
                        if (selectedStatus === status) {
                          // Retirer de la bibliothèque
                          if (onDeleteItem) {
                            onDeleteItem(gameId)
                          }
                          setSelectedStatus(null)
                        } else {
                          // Ajouter/Modifier le statut
                          handleStatusSelect(status)
                        }
                      }}
                      className={`flex-1 py-3 px-4 rounded-xl font-medium transition-all shadow-sm ${
                        selectedStatus === status
                          ? `${getStatusColor(status)} ring-2 ring-blue-300` // ✅ Indication visuelle forte
                          : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                      }`}
                    >
                      <div className="flex items-center justify-center space-x-2">
                        {selectedStatus === status && (
                          <Check size={16} className="text-white" />
                        )}
                        <div>
                          <div className="text-sm font-semibold">{getStatusLabel(status)}</div>
                          <div className="text-xs opacity-80">
                            {gameStats[status].toLocaleString()} users
                          </div>
                        </div>
                      </div>
                    </button>
                  ))}
                </div>
                
                {/* Message d'état */}
                {selectedStatus ? (
                  <div className="text-sm text-green-600 bg-green-50 border border-green-200 rounded-lg p-3 flex items-center justify-between">
                    <span>✅ Added to your library as "{getStatusLabel(selectedStatus)}"</span>
                    <button 
                      onClick={() => {
                        if (onDeleteItem) {
                          onDeleteItem(gameId)
                        }
                        setSelectedStatus(null)
                      }}
                      className="text-red-600 hover:text-red-800 text-sm underline"
                    >
                      Remove from library
                    </button>
                  </div>
                ) : (
                  <div className="text-sm text-gray-500 bg-gray-50 border border-gray-200 rounded-lg p-3">
                    💡 Click a status to add this game to your library
                  </div>
                )}

                {/* User rating */}
                <div className="mt-6 pt-6 border-t border-gray-100">
                  <h4 className="text-gray-900 font-semibold mb-3">Rate this game</h4>
                  <div className="flex items-center space-x-2 mb-3">
                    {[1, 2, 3, 4, 5].map((rating) => (
                      <button
                        key={rating}
                        onClick={() => {
                          setUserRating(rating)
                          setShowReviewBox(true)
                        }}
                        onMouseEnter={() => setHoverRating(rating)}
                        onMouseLeave={() => setHoverRating(0)}
                        className="p-1 hover:scale-110 transition-transform"
                      >
                        <Star
                          size={24}
                          className={`transition-colors ${
                            (hoverRating || userRating) >= rating
                              ? 'text-yellow-500 fill-current'
                              : 'text-gray-300 hover:text-yellow-400'
                          }`}
                        />
                      </button>
                    ))}
                    {userRating > 0 && (
                      <span className="text-gray-900 ml-2 font-medium">{userRating}/5</span>
                    )}
                  </div>
                  
                  {showReviewBox && (
                    <div className="mt-4 p-4 bg-gray-50 rounded-xl border border-gray-200">
                      <label className="text-sm text-gray-700 mb-2 block font-medium">Share your thoughts</label>
                      <textarea
                        value={userReview}
                        onChange={(e) => setUserReview(e.target.value)}
                        placeholder="What did you think about this game?"
                        className="w-full h-20 px-3 py-2 bg-white text-gray-900 text-sm rounded-lg resize-none border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      />
                      <div className="flex space-x-2 mt-3">
                        <button 
                          onClick={handleSubmitReview}
                          className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors"
                        >
                          Submit Review
                        </button>
                        <button 
                          onClick={() => {
                            setShowReviewBox(false)
                            setUserReview('')
                          }}
                          className="px-4 py-2 bg-gray-200 text-gray-700 text-sm font-medium rounded-lg hover:bg-gray-300 transition-colors"
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  )}
                </div>
              </div>

              {/* Reviews Section */}
              <div className="p-6 border-b border-gray-100">
                <h3 className="text-gray-900 font-semibold mb-4">Recent Reviews</h3>
                <div className="flex space-x-4 overflow-x-auto pb-2">
                  {/* User reviews first */}
                  {userReviews.map((review) => (
                    <div key={review.id} className="flex-shrink-0 w-64 bg-blue-50 rounded-xl p-4 border border-blue-100">
                      <div className="flex items-center space-x-2 mb-3">
                        <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                          <span className="text-blue-600 text-sm">👤</span>
                        </div>
                        <span className="text-gray-900 text-sm font-medium">{review.username}</span>
                        <span className="text-xs text-blue-600 bg-blue-200 px-2 py-1 rounded-full font-medium">You</span>
                      </div>
                      <div className="flex items-center space-x-1 mb-2">
                        {[1, 2, 3, 4, 5].map((star) => (
                          <Star
                            key={star}
                            size={12}
                            className={`${
                              star <= review.rating ? 'text-yellow-500 fill-current' : 'text-gray-300'
                            }`}
                          />
                        ))}
                        <span className="text-xs text-gray-600 ml-1">{review.rating}/5</span>
                      </div>
                      <p className="text-gray-700 text-sm leading-relaxed">
                        {review.review || review.text}
                      </p>
                    </div>
                  ))}
                  
                  {/* Steam reviews */}
                  {steamReviews.slice(0, 5).map((review) => (
                    <div key={review.id} className="flex-shrink-0 w-64 bg-gray-50 rounded-xl p-4 border border-gray-200">
                      <div className="flex items-center space-x-2 mb-3">
                        <div className="w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center">
                          <span className="text-gray-600 text-sm">🎮</span>
                        </div>
                        <span className="text-gray-900 text-sm font-medium">{review.username}</span>
                        <span className="text-xs text-gray-600 bg-gray-200 px-2 py-1 rounded-full font-medium">Steam</span>
                      </div>
                      <div className="flex items-center space-x-1 mb-2">
                        {[1, 2, 3, 4, 5].map((star) => (
                          <Star
                            key={star}
                            size={12}
                            className={`${
                              star <= review.rating ? 'text-yellow-500 fill-current' : 'text-gray-300'
                            }`}
                          />
                        ))}
                        <span className="text-xs text-gray-600 ml-1">{review.rating}/5</span>
                      </div>
                      <p className="text-gray-700 text-sm leading-relaxed">
                        {review.text}
                      </p>
                    </div>
                  ))}
                </div>
              </div>

              {/* Tabs */}
              <div className="sticky top-0 z-10 bg-white border-b border-gray-100">
                <div className="flex px-6">
                  {(['info', 'social', 'more'] as const).map((tab) => (
                    <button
                      key={tab}
                      onClick={() => setActiveTab(tab)}
                      className={`flex-1 py-4 px-4 font-medium transition-colors relative ${
                        activeTab === tab
                          ? 'text-gray-900'
                          : 'text-gray-500 hover:text-gray-700'
                      }`}
                    >
                      {tab.charAt(0).toUpperCase() + tab.slice(1)}
                      {activeTab === tab && (
                        <div className="absolute bottom-0 left-0 right-0 h-0.5 bg-gray-900 rounded-full" />
                      )}
                    </button>
                  ))}
                </div>
              </div>

              {/* Tab content */}
              <div className="p-6">
                {activeTab === 'info' && (
                  <div className="space-y-6">
                    <div>
                      <h4 className="text-gray-900 font-semibold mb-3">About</h4>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <p className="text-gray-700 leading-relaxed">
                          {gameDetail.description_raw || 'No description available.'}
                        </p>
                      </div>
                    </div>

                    {gameDetail.tags && gameDetail.tags.length > 0 && (
                      <div>
                        <h4 className="text-gray-900 font-semibold mb-3">Tags</h4>
                        <div className="flex flex-wrap gap-2">
                          {gameDetail.tags.slice(0, 12).map((tag, index) => (
                            <span
                              key={index}
                              className="inline-flex items-center px-3 py-1.5 rounded-full text-xs font-medium bg-white text-gray-700 border border-gray-200 hover:border-gray-300 transition-colors cursor-pointer shadow-sm"
                            >
                              <Tag size={12} className="mr-1" />
                              {tag.name}
                            </span>
                          ))}
                        </div>
                      </div>
                    )}

                    <div className="grid grid-cols-2 gap-6">
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <h5 className="text-gray-900 font-medium mb-2">Platforms</h5>
                        <p className="text-gray-600 text-sm">
                          {gameDetail.platforms?.map(p => p.platform.name).join(', ') || 'N/A'}
                        </p>
                      </div>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <h5 className="text-gray-900 font-medium mb-2">Release Date</h5>
                        <p className="text-gray-600 text-sm">
                          {gameDetail.released ? new Date(gameDetail.released).toLocaleDateString() : 'N/A'}
                        </p>
                      </div>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <h5 className="text-gray-900 font-medium mb-2">Developer</h5>
                        <p className="text-gray-600 text-sm">
                          {gameDetail.developers?.[0]?.name || 'N/A'}
                        </p>
                      </div>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <h5 className="text-gray-900 font-medium mb-2">Publisher</h5>
                        <p className="text-gray-600 text-sm">
                          {gameDetail.publishers?.[0]?.name || 'N/A'}
                        </p>
                      </div>
                    </div>
                  </div>
                )}

                {activeTab === 'social' && (
                  <div className="space-y-6">
                    <div>
                      <h4 className="text-gray-900 font-semibold mb-4">Community Stats</h4>
                      <div className="grid grid-cols-3 gap-4">
                        <div className="bg-orange-50 border border-orange-200 p-4 rounded-xl text-center">
                          <div className="text-2xl font-bold text-orange-600">{gameStats['want-to-play'].toLocaleString()}</div>
                          <div className="text-sm text-orange-700 font-medium">Want to Play</div>
                        </div>
                        <div className="bg-green-50 border border-green-200 p-4 rounded-xl text-center">
                          <div className="text-2xl font-bold text-green-600">{gameStats['currently-playing'].toLocaleString()}</div>
                          <div className="text-sm text-green-700 font-medium">Currently Playing</div>
                        </div>
                        <div className="bg-blue-50 border border-blue-200 p-4 rounded-xl text-center">
                          <div className="text-2xl font-bold text-blue-600">{gameStats['completed'].toLocaleString()}</div>
                          <div className="text-sm text-blue-700 font-medium">Completed</div>
                        </div>
                      </div>
                    </div>

                    <div>
                      <h4 className="text-gray-900 font-semibold mb-4">Recent Activity</h4>
                      <div className="space-y-3">
                        {[
                          { user: 'Alex_Gamer', action: 'completed this game', time: '2 hours ago', type: 'completed' },
                          { user: 'Sarah_RPG', action: 'added to Want to Play', time: '4 hours ago', type: 'want' },
                          { user: 'Mike_Pro', action: 'rated 5 stars', time: '6 hours ago', type: 'rating' },
                          { user: 'Jenny_Fun', action: 'started playing', time: '8 hours ago', type: 'playing' }
                        ].map((activity, index) => (
                          <div key={index} className="flex items-center space-x-3 p-4 bg-gray-50 rounded-xl border border-gray-200">
                            <div className="w-10 h-10 bg-white rounded-full flex items-center justify-center border border-gray-200 shadow-sm">
                              <span className="text-sm">
                                {activity.type === 'completed' && '✅'}
                                {activity.type === 'want' && '❤️'}
                                {activity.type === 'rating' && '⭐'}
                                {activity.type === 'playing' && '🎮'}
                              </span>
                            </div>
                            <div className="flex-1">
                              <p className="text-sm">
                                <span className="font-medium text-gray-900">{activity.user}</span>{' '}
                                <span className="text-gray-600">{activity.action}</span>
                              </p>
                              <p className="text-xs text-gray-500">{activity.time}</p>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}

                {activeTab === 'more' && (
                  <div className="space-y-6">
                    <div>
                      <h4 className="text-gray-900 font-semibold mb-4">External Links</h4>
                      <div className="space-y-3">
                        <div className="flex flex-wrap gap-3">
                          <a 
                            href={`https://store.steampowered.com/search/?term=${encodeURIComponent(gameDetail.name)}`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 text-white px-4 py-3 rounded-xl transition-colors shadow-sm font-medium"
                          >
                            <ExternalLink className="w-4 h-4" />
                            Steam Store
                          </a>
                          <a 
                            href={`https://www.metacritic.com/search/game/${encodeURIComponent(gameDetail.name)}/results`}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center gap-2 bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-3 rounded-xl transition-colors shadow-sm font-medium"
                          >
                            <ExternalLink className="w-4 h-4" />
                            Metacritic
                          </a>
                        </div>

                        {gameDetail.website && (
                          <a
                            href={gameDetail.website}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center space-x-2 bg-gray-50 hover:bg-gray-100 p-4 rounded-xl text-gray-700 hover:text-gray-900 transition-colors border border-gray-200"
                          >
                            <Globe size={16} />
                            <span className="font-medium">Official Website</span>
                            <ExternalLink size={12} />
                          </a>
                        )}
                      </div>
                    </div>

                    {/* Similar Games by Genre */}
                    {!similarGamesLoading && similarGames.length > 0 && (
                      <div>
                        <h4 className="text-gray-900 font-semibold mb-4">
                          Similar Games {gameDetail.genres?.[0]?.name && `(${gameDetail.genres[0].name})`}
                        </h4>
                        <div className="flex space-x-3 overflow-x-auto pb-2">
                          {similarGames.slice(0, 6).map((game) => (
                            <div key={game.id} className="flex-shrink-0 w-40 bg-white rounded-xl p-3 border border-gray-200 hover:border-gray-300 transition-colors cursor-pointer shadow-sm hover:shadow-md">
                              {game.background_image && (
                                <img
                                  src={game.background_image}
                                  alt={game.name}
                                  className="w-full h-20 object-cover rounded-lg mb-2 border border-gray-100"
                                />
                              )}
                              <h5 className="text-sm font-medium text-gray-900 truncate mb-1" title={game.name}>
                                {game.name}
                              </h5>
                              <div className="flex items-center">
                                <Star size={12} className="text-yellow-500 fill-current mr-1" />
                                <span className="text-xs text-gray-600">{game.rating?.toFixed(1) || 'N/A'}</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* More from Developer */}
                    {!similarGamesLoading && developerGames.length > 0 && gameDetail.developers?.[0] && (
                      <div>
                        <h4 className="text-gray-900 font-semibold mb-4">
                          More from {gameDetail.developers[0].name}
                        </h4>
                        <div className="flex space-x-3 overflow-x-auto pb-2">
                          {developerGames.slice(0, 6).map((game) => (
                            <div key={game.id} className="flex-shrink-0 w-40 bg-white rounded-xl p-3 border border-gray-200 hover:border-gray-300 transition-colors cursor-pointer shadow-sm hover:shadow-md">
                              {game.background_image && (
                                <img
                                  src={game.background_image}
                                  alt={game.name}
                                  className="w-full h-20 object-cover rounded-lg mb-2 border border-gray-100"
                                />
                              )}
                              <h5 className="text-sm font-medium text-gray-900 truncate mb-1" title={game.name}>
                                {game.name}
                              </h5>
                              <div className="flex items-center">
                                <Star size={12} className="text-yellow-500 fill-current mr-1" />
                                <span className="text-xs text-gray-600">{game.rating?.toFixed(1) || 'N/A'}</span>
                              </div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Loading state pour les jeux similaires */}
                    {similarGamesLoading && (
                      <div>
                        <h4 className="text-gray-900 font-semibold mb-4">Loading similar games...</h4>
                        <div className="flex space-x-3 overflow-x-auto pb-2">
                          {[1, 2, 3, 4, 5, 6].map((i) => (
                            <div key={i} className="flex-shrink-0 w-40 bg-gray-100 rounded-xl p-3 border border-gray-200 animate-pulse">
                              <div className="w-full h-20 bg-gray-200 rounded-lg mb-2"></div>
                              <div className="h-4 bg-gray-200 rounded mb-1"></div>
                              <div className="h-3 bg-gray-200 rounded w-1/2"></div>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Technical Info */}
                    <div>
                      <h4 className="text-gray-900 font-semibold mb-4">Technical Information</h4>
                      <div className="bg-gray-50 rounded-xl p-4 border border-gray-200">
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div className="flex justify-between">
                            <span className="font-medium text-gray-900">ESRB Rating:</span>
                            <span className="text-gray-600">
                              {gameDetail.esrb_rating?.name || 'Not Rated'}
                            </span>
                          </div>
                          <div className="flex justify-between">
                            <span className="font-medium text-gray-900">Metacritic:</span>
                            <span className="text-gray-600">
                              {gameDetail.metacritic ? `${gameDetail.metacritic}/100` : 'N/A'}
                            </span>
                          </div>
                          <div className="flex justify-between col-span-2">
                            <span className="font-medium text-gray-900">Genres:</span>
                            <span className="text-gray-600 text-right">
                              {gameDetail.genres?.map(g => g.name).join(', ') || 'N/A'}
                            </span>
                          </div>
                          <div className="flex justify-between col-span-2">
                            <span className="font-medium text-gray-900">Platforms:</span>
                            <span className="text-gray-600 text-right">
                              {gameDetail.parent_platforms?.map(p => p.platform.name).join(', ') || 'N/A'}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>

                    {/* Available Stores */}
                    {gameDetail.stores && gameDetail.stores.length > 0 && (
                      <div>
                        <h4 className="text-gray-900 font-semibold mb-4">Available Stores</h4>
                        <div className="grid grid-cols-2 gap-3">
                          {gameDetail.stores.slice(0, 6).map((store, index) => (
                            <a
                              key={index}
                              href={store.url}
                              target="_blank"
                              rel="noopener noreferrer"
                              className="flex items-center space-x-2 bg-white hover:bg-gray-50 p-3 rounded-xl text-gray-700 hover:text-gray-900 transition-colors border border-gray-200 shadow-sm text-sm font-medium"
                            >
                              <ExternalLink size={14} />
                              <span>{store.store.name}</span>
                            </a>
                          ))}
                        </div>
                      </div>
                    )}

                    {/* Screenshots */}
                    {gameDetail.screenshots && gameDetail.screenshots.length > 0 && (
                      <div>
                        <h4 className="text-gray-900 font-semibold mb-4">Screenshots</h4>
                        <div className="grid grid-cols-2 gap-4">
                          {gameDetail.screenshots.slice(0, 4).map((screenshot, index) => (
                            <div key={index} className="relative group">
                              <img
                                src={screenshot.image}
                                alt={`Screenshot ${index + 1}`}
                                className="w-full h-32 object-cover rounded-xl border border-gray-200 group-hover:opacity-90 transition-opacity cursor-pointer shadow-sm"
                              />
                              <div className="absolute inset-0 bg-black/0 group-hover:bg-black/10 rounded-xl transition-colors" />
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          </>
        ) : (
          <div className="p-8 text-center text-gray-600">
            <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <span className="text-2xl">🎮</span>
            </div>
            <p className="text-lg font-medium text-gray-900 mb-2">Game not found</p>
            <p className="text-sm">Unable to load game details. Please try again.</p>
          </div>
        )}
      </div>
    </div>
  )
}
</file>

<file path="src/components/ContentCard.tsx">
'use client'
import { useState } from 'react'
import { Plus, Check, Star, Edit } from 'lucide-react'
import { idsMatch } from '@/utils/idNormalizer'
import type { ContentItem, LibraryItem, MediaCategory, MediaStatus } from '@/types'

interface ContentCardProps {
  item: ContentItem | LibraryItem
  category: MediaCategory
  onAddToLibrary: (item: ContentItem | LibraryItem, status: MediaStatus) => void
  onDeleteItem?: (id: string) => void // ✅ NOUVELLE PROP pour retirer
  library: LibraryItem[]
  onOpenGameDetail?: (gameId: string) => void
  onOpenMovieDetail?: (movieId: string) => void
  onOpenBookDetail?: (bookId: string) => void
  onOpenMusicDetail?: (musicId: string) => void
}

export default function ContentCard({
  item,
  category,
  onAddToLibrary,
  onDeleteItem,
  library = [],
  onOpenGameDetail,
  onOpenMovieDetail,
  onOpenBookDetail,
  onOpenMusicDetail
}: ContentCardProps) {
  const [showActions, setShowActions] = useState(false)

  // ✅ NOUVELLE LOGIQUE : Récupérer l'item exact de la bibliothèque
  const safeLibrary = Array.isArray(library) ? library : []
  const libraryItem = safeLibrary.find((libItem: LibraryItem) => idsMatch(libItem.id, item.id))
  const isInLibrary = !!libraryItem
  const currentStatus = libraryItem?.status

  const handleAdd = (status: MediaStatus) => {
    onAddToLibrary(item, status)
    setShowActions(false)
  }

  // ✅ NOUVELLE FONCTION : Gérer le clic sur le statut actuel
  const handleStatusClick = () => {
    if (isInLibrary && onDeleteItem) {
      // Si déjà dans la bibliothèque, proposer de retirer ou changer
      setShowActions(true)
    } else {
      // Sinon, ouvrir les options d'ajout
      setShowActions(true)
    }
  }

  const handleCardClick = () => {
    if (category === 'games' && onOpenGameDetail) {
      onOpenGameDetail(item.id)
    } else if (category === 'movies' && onOpenMovieDetail) {
      onOpenMovieDetail(item.id)
    } else if (category === 'books' && onOpenBookDetail) {
      onOpenBookDetail(item.id)
    } else if (category === 'music' && onOpenMusicDetail) {
      onOpenMusicDetail(item.id)
    }
  }

  const getCategoryGradient = (category: MediaCategory) => {
    switch (category) {
      case 'games': return 'from-green-400 to-blue-500'
      case 'movies': return 'from-purple-400 to-pink-500'
      case 'music': return 'from-orange-400 to-red-500'
      case 'books': return 'from-blue-400 to-purple-500'
      default: return 'from-gray-400 to-gray-600'
    }
  }

  const getCategoryEmoji = (category: MediaCategory) => {
    switch (category) {
      case 'games': return '🎮'
      case 'movies': return '🎬'
      case 'music': return '🎵'
      case 'books': return '📚'
      default: return '📄'
    }
  }

  const getActionLabel = (status: MediaStatus, category: MediaCategory) => {
    switch (status) {
      case 'want-to-play':
        switch (category) {
          case 'games': return 'Want to Play'
          case 'movies': return 'Want to Watch'
          case 'music': return 'Want to Listen'
          case 'books': return 'Want to Read'
          default: return 'Want to Play'
        }
      case 'currently-playing':
        switch (category) {
          case 'games': return 'Playing'
          case 'movies': return 'Watching'
          case 'music': return 'Listening'
          case 'books': return 'Reading'
          default: return 'Playing'
        }
      case 'completed': return 'Completed'
      default: return 'Add'
    }
  }

  // ✅ NOUVELLE FONCTION : Couleur du statut
  const getStatusColor = (status: MediaStatus) => {
    switch (status) {
      case 'want-to-play': return 'bg-orange-500'
      case 'currently-playing': return 'bg-green-500'
      case 'completed': return 'bg-blue-500'
      case 'paused': return 'bg-yellow-500'
      case 'dropped': return 'bg-red-500'
      default: return 'bg-gray-500'
    }
  }

  return (
    <div className="group cursor-pointer">
      <div 
        className="relative w-full h-40 bg-white rounded-lg overflow-hidden border border-gray-200 hover:border-gray-300 transition-all duration-200 shadow-sm hover:shadow-md"
        onClick={handleCardClick}
      >
        {item.image ? (
          <img 
            src={item.image} 
            alt={item.title} 
            className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300" 
          />
        ) : (
          <div className={`w-full h-full bg-gradient-to-br ${getCategoryGradient(category)} flex items-center justify-center`}>
            <span className="text-white text-2xl">
              {getCategoryEmoji(category)}
            </span>
          </div>
        )}
        
        <div className="absolute top-2 right-2">
          {isInLibrary ? (
            // ✅ NOUVEAU : Affichage du statut actuel avec possibilité de modifier
            <div className="relative">
              <button
                onClick={(e) => {
                  e.stopPropagation()
                  handleStatusClick()
                }}
                className={`w-auto px-2 h-7 ${getStatusColor(currentStatus!)} text-white rounded-full flex items-center justify-center text-xs font-medium shadow-md hover:shadow-lg transition-all`}
              >
                <Check size={12} className="mr-1" />
                <span>{getActionLabel(currentStatus!, category).split(' ')[0]}</span>
              </button>

              {showActions && (
                <div className="absolute top-8 right-0 bg-white/95 backdrop-blur-sm rounded-lg p-2 z-20 min-w-44 border border-gray-200 shadow-lg">
                  {/* Options de changement de statut */}
                  {(['want-to-play', 'currently-playing', 'completed'] as const).map((status) => (
                    <button 
                      key={status}
                      onClick={(e) => {
                        e.stopPropagation()
                        if (status === currentStatus) {
                          // Si même statut, retirer de la bibliothèque
                          if (onDeleteItem) {
                            onDeleteItem(item.id)
                          }
                        } else {
                          // Sinon, changer le statut
                          handleAdd(status)
                        }
                        setShowActions(false)
                      }} 
                      className={`block text-gray-700 text-xs p-2 hover:bg-gray-100 w-full text-left rounded transition-colors font-medium flex items-center justify-between ${
                        status === currentStatus ? 'bg-red-50 text-red-700 hover:bg-red-100' : ''
                      }`}
                    >
                      <span>
                        {status === currentStatus ? `Remove from ${getActionLabel(status, category)}` : getActionLabel(status, category)}
                      </span>
                      {status === currentStatus && <span className="text-red-500">×</span>}
                    </button>
                  ))}
                </div>
              )}
            </div>
          ) : (
            // Bouton d'ajout classique
            <div className="relative">
              <button
                onClick={(e) => {
                  e.stopPropagation()
                  setShowActions(!showActions)
                }}
                className="w-7 h-7 bg-blue-500 hover:bg-blue-600 text-white rounded-full flex items-center justify-center transition-colors shadow-md hover:shadow-lg"
              >
                <Plus size={14} />
              </button>
              {showActions && (
                <div className="absolute top-8 right-0 bg-white/95 backdrop-blur-sm rounded-lg p-2 z-20 min-w-32 border border-gray-200 shadow-lg">
                  <button 
                    onClick={(e) => {
                      e.stopPropagation()
                      handleAdd('want-to-play')
                    }} 
                    className="block text-gray-700 text-xs p-2 hover:bg-gray-100 w-full text-left rounded transition-colors font-medium"
                  >
                    {getActionLabel('want-to-play', category)}
                  </button>
                  <button 
                    onClick={(e) => {
                      e.stopPropagation()
                      handleAdd('currently-playing')
                    }} 
                    className="block text-gray-700 text-xs p-2 hover:bg-gray-100 w-full text-left rounded transition-colors font-medium"
                  >
                    {getActionLabel('currently-playing', category)}
                  </button>
                  <button 
                    onClick={(e) => {
                      e.stopPropagation()
                      handleAdd('completed')
                    }} 
                    className="block text-gray-700 text-xs p-2 hover:bg-gray-100 w-full text-left rounded transition-colors font-medium"
                  >
                    Completed
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      <div className="mt-3 px-1">
        <div className="flex items-center justify-between mb-1">
          <h3 className="text-gray-900 text-sm font-semibold truncate leading-tight flex-1">
            {item.title}
          </h3>
          {/* Indicateur série TV */}
          {item.isSeries && (
            <span className="ml-2 px-1.5 py-0.5 bg-purple-100 text-purple-700 text-xs rounded font-medium flex-shrink-0">
              TV
            </span>
          )}
        </div>
        
        <div className="flex justify-between items-center text-xs text-gray-500">
          <span>{item.year}</span>
          {item.rating && item.rating > 0 && (
            <span className="flex items-center">
              <Star size={10} className="text-yellow-500 mr-1 fill-current" />
              {item.rating.toFixed(1)}
            </span>
          )}
        </div>
        
        {/* ✅ NOUVEAU : Affichage du statut sous la carte */}
        {isInLibrary && (
          <div className="mt-2">
            <span className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
              currentStatus === 'want-to-play' ? 'bg-orange-100 text-orange-700' :
              currentStatus === 'currently-playing' ? 'bg-green-100 text-green-700' :
              currentStatus === 'completed' ? 'bg-blue-100 text-blue-700' :
              'bg-gray-100 text-gray-700'
            }`}>
              {getActionLabel(currentStatus!, category)}
            </span>
          </div>
        )}
        
        {/* Afficher le nombre de saisons pour les séries */}
        {item.isSeries && item.totalSeasons && (
          <div className="text-xs text-gray-500 mt-1">
            {item.totalSeasons} season{item.totalSeasons > 1 ? 's' : ''}
          </div>
        )}
      </div>

      {showActions && (
        <div 
          className="fixed inset-0 z-10" 
          onClick={() => setShowActions(false)}
        />
      )}
    </div>
  )
}
</file>

<file path="src/app/page.tsx">
'use client'
import { useState, useEffect } from 'react'
import { Search } from 'lucide-react'
import CategoryTabs from '@/components/CategoryTabs'
import ContentSection from '@/components/ContentSection'
import LibrarySection from '@/components/LibrarySection'
import GameDetailModal from '@/components/GameDetailModal'
import MovieDetailModal from '@/components/MovieDetailModal'
import BookDetailModal from '@/components/BookDetailModal'
import MusicDetailModal from '@/components/MusicDetailModal'
import SearchModal from '@/components/SearchModal'
import BottomNavigation from '@/components/BottomNavigation'
import RoadmapPage from '@/components/RoadmapPage'
import DiscoverPage from '@/components/DiscoverPage'
import { sampleContent } from '@/data/sampleContent'
import { omdbService } from '@/services/omdbService'
import { googleBooksService } from '@/services/googleBooksService'
import { musicService } from '@/services/musicService'
import { rawgService } from '@/services/rawgService'
import { LibraryService } from '@/services/libraryService'
import { normalizeId, idsMatch } from '@/utils/idNormalizer'
import type { LibraryItem, Review, MediaCategory, MediaStatus, ContentItem } from '@/types'

export default function Home() {
  const [activeTab, setActiveTab] = useState<MediaCategory>('games')
  const [activeMainTab, setActiveMainTab] = useState('home')
  const [library, setLibrary] = useState<LibraryItem[]>([])
  const [selectedGameId, setSelectedGameId] = useState<string | null>(null)
  const [selectedMovieId, setSelectedMovieId] = useState<string | null>(null)
  const [selectedBookId, setSelectedBookId] = useState<string | null>(null)
  const [selectedMusicId, setSelectedMusicId] = useState<string | null>(null)
  const [isSearchOpen, setIsSearchOpen] = useState(false)
  
  // State pour le contenu dynamique des jeux
  const [gameContent, setGameContent] = useState<{
    popular: ContentItem[]
    topRated: ContentItem[]
    newReleases: ContentItem[]
  }>({
    popular: [],
    topRated: [],
    newReleases: []
  })
  const [gamesLoading, setGamesLoading] = useState(false)
  
  // State pour le contenu dynamique des films
  const [movieContent, setMovieContent] = useState<{
    popular: ContentItem[]
    topRated: ContentItem[]
    recent: ContentItem[]
  }>({
    popular: [],
    topRated: [],
    recent: []
  })
  const [moviesLoading, setMoviesLoading] = useState(false)

  // State pour le contenu dynamique des livres
  const [bookContent, setBookContent] = useState<{
    fiction: ContentItem[]
    nonFiction: ContentItem[]
    newReleases: ContentItem[]
  }>({
    fiction: [],
    nonFiction: [],
    newReleases: []
  })
  const [booksLoading, setBooksLoading] = useState(false)

  // State pour le contenu dynamique de la musique
  const [musicContent, setMusicContent] = useState<{
    popular: ContentItem[]
    topRated: ContentItem[]
    newReleases: ContentItem[]
  }>({
    popular: [],
    topRated: [],
    newReleases: []
  })
  const [musicLoading, setMusicLoading] = useState(false)

  // User reviews state
  const [userReviews, setUserReviews] = useState<{[itemId: string]: Review[]}>({})

  // Charger la bibliothèque au démarrage
  useEffect(() => {
    const loadSavedLibrary = async () => {
      try {
        const savedLibrary = await LibraryService.getLibrary()
        setLibrary(savedLibrary)
        
        // Test optionnel de connexion Supabase
        await LibraryService.testSupabaseConnection()
      } catch (error) {
        console.error('Error loading saved library:', error)
      }
    }
    loadSavedLibrary()
  }, [])

  // Charger le contenu selon la catégorie active
  useEffect(() => {
    if (activeTab === 'games') {
      loadGameContent()
    } else if (activeTab === 'movies') {
      loadMovieContent()
    } else if (activeTab === 'books') {
      loadBookContent()
    } else if (activeTab === 'music') {
      loadMusicContent()
    }
  }, [activeTab])

  const loadGameContent = async () => {
    try {
      setGamesLoading(true)

      const [popularGames, topRatedGames, newReleaseGames] = await Promise.all([
        rawgService.getPopularGames().then(games => 
          games.slice(0, 8).map(game => rawgService.convertToAppFormat(game))
        ),
        rawgService.getTopRatedGames().then(games => 
          games.slice(0, 8).map(game => rawgService.convertToAppFormat(game))
        ),
        rawgService.getNewReleases().then(games => 
          games.slice(0, 8).map(game => rawgService.convertToAppFormat(game))
        )
      ])

      setGameContent({
        popular: popularGames,
        topRated: topRatedGames,
        newReleases: newReleaseGames
      })
    } catch (error) {
      console.error('Error loading game content:', error)
      
      // Fallback vers les données statiques
      setGameContent({
        popular: sampleContent.games.slice(0, 4),
        topRated: sampleContent.games.slice(4, 8),
        newReleases: sampleContent.games.slice(0, 4)
      })
    } finally {
      setGamesLoading(false)
    }
  }

  const loadMovieContent = async () => {
    try {
      setMoviesLoading(true)

      const [popularMovies, topRatedMovies, recentMovies] = await Promise.all([
        omdbService.getPopularMovies().then(movies => 
          movies.slice(0, 8).map(movie => omdbService.convertToAppFormat(movie))
        ),
        omdbService.getTopRatedMovies().then(movies => 
          movies.slice(0, 8).map(movie => omdbService.convertToAppFormat(movie))
        ),
        omdbService.getRecentMovies().then(movies => 
          movies.slice(0, 8).map(movie => omdbService.convertToAppFormat(movie))
        )
      ])

      setMovieContent({
        popular: popularMovies,
        topRated: topRatedMovies,
        recent: recentMovies
      })
    } catch (error) {
      console.error('Error loading movie content:', error)
      
      // Fallback vers les données statiques
      setMovieContent({
        popular: sampleContent.movies.slice(0, 4),
        topRated: sampleContent.movies.slice(4, 8),
        recent: sampleContent.movies.slice(0, 4)
      })
    } finally {
      setMoviesLoading(false)
    }
  }

  const loadBookContent = async () => {
    try {
      setBooksLoading(true)

      const [fictionBooks, nonFictionBooks, newReleaseBooks] = await Promise.all([
        googleBooksService.getFictionBooks().then(books => 
          books.slice(0, 8).map(book => googleBooksService.convertToAppFormat(book))
        ),
        googleBooksService.getNonFictionBooks().then(books => 
          books.slice(0, 8).map(book => googleBooksService.convertToAppFormat(book))
        ),
        googleBooksService.getNewReleases().then(books => 
          books.slice(0, 8).map(book => googleBooksService.convertToAppFormat(book))
        )
      ])

      setBookContent({
        fiction: fictionBooks,
        nonFiction: nonFictionBooks,
        newReleases: newReleaseBooks
      })
    } catch (error) {
      console.error('Error loading book content:', error)
      
      // Fallback vers les données statiques
      setBookContent({
        fiction: sampleContent.books.slice(0, 4),
        nonFiction: sampleContent.books.slice(4, 8),
        newReleases: sampleContent.books.slice(0, 4)
      })
    } finally {
      setBooksLoading(false)
    }
  }

  const loadMusicContent = async () => {
    try {
      setMusicLoading(true)

      const [popularAlbums, topRatedAlbums, newReleaseAlbums] = await Promise.all([
        musicService.getPopularAlbums().then(albums => 
          albums.slice(0, 8).map(album => musicService.convertToAppFormat(album))
        ),
        musicService.getTopRatedAlbums().then(albums => 
          albums.slice(0, 8).map(album => musicService.convertToAppFormat(album))
        ),
        musicService.getNewReleases().then(albums => 
          albums.slice(0, 8).map(album => musicService.convertToAppFormat(album))
        )
      ])

      setMusicContent({
        popular: popularAlbums,
        topRated: topRatedAlbums,
        newReleases: newReleaseAlbums
      })
    } catch (error) {
      console.error('Error loading music content:', error)
      
      // Fallback vers les données statiques
      setMusicContent({
        popular: sampleContent.music.slice(0, 4),
        topRated: sampleContent.music.slice(4, 8),
        newReleases: sampleContent.music.slice(0, 4)
      })
    } finally {
      setMusicLoading(false)
    }
  }

  // Fonction modifiée pour ajouter à la bibliothèque avec Supabase
  const handleAddToLibrary = async (item: any, status: MediaStatus) => {
    const normalizedId = normalizeId(item.id)
    
    const newItem: LibraryItem = {
      id: normalizedId,
      title: item.title,
      category: item.category || activeTab,
      status,
      addedAt: new Date().toISOString(),
      year: item.year || new Date().getFullYear(),
      rating: item.rating || 0,
      image: item.image || item.background_image,
      author: item.author,
      artist: item.artist,
      director: item.director,
      genre: item.genre
    }

    // Sauvegarder avec le service
    const success = await LibraryService.addToLibrary(newItem, status)
    
    if (success) {
      // Mettre à jour l'état local
      setLibrary(prev => {
        const existingIndex = prev.findIndex((libItem: LibraryItem) => 
          idsMatch(libItem.id, normalizedId)
        )
        
        if (existingIndex !== -1) {
          const updated = [...prev]
          updated[existingIndex] = { 
            ...updated[existingIndex], 
            status, 
            addedAt: new Date().toISOString() 
          }
          return updated
        }
        
        return [newItem, ...prev] // Ajouter en premier
      })
    }
  }

  const handleUpdateItem = async (id: string, updates: Partial<LibraryItem>) => {
    const success = await LibraryService.updateLibraryItem(id, updates)
    
    if (success) {
      setLibrary(prev =>
        prev.map(item =>
          idsMatch(item.id, id)
            ? { ...item, ...updates }
            : item
        )
      )
    }
  }

  const handleDeleteItem = async (id: string) => {
    const success = await LibraryService.removeFromLibrary(id)
    
    if (success) {
      setLibrary(prev => prev.filter(item => !idsMatch(item.id, id)))
    }
  }

  const handleOpenGameDetail = (gameId: string) => {
    const normalizedGameId = normalizeId(gameId)
    setSelectedGameId(normalizedGameId)
  }

  const handleOpenMovieDetail = (movieId: string) => {
    const normalizedMovieId = normalizeId(movieId)
    setSelectedMovieId(normalizedMovieId)
  }

  const handleOpenBookDetail = (bookId: string) => {
    const normalizedBookId = normalizeId(bookId)
    setSelectedBookId(normalizedBookId)
  }

  const handleOpenMusicDetail = (musicId: string) => {
    const normalizedMusicId = normalizeId(musicId)
    setSelectedMusicId(normalizedMusicId)
  }

  const handleOpenSearch = () => {
    setIsSearchOpen(true)
  }

  const handleReviewSubmit = (reviewData: any) => {
    const currentItemId = selectedGameId || selectedMovieId || selectedBookId || selectedMusicId
    if (!currentItemId) return

    const newReview: Review = {
      id: Date.now(),
      username: "CurrentUser",
      rating: reviewData.rating,
      review: reviewData.review,
      date: new Date().toISOString().split('T')[0]
    }

    setUserReviews(prev => ({
      ...prev,
      [currentItemId]: [...(prev[currentItemId] || []), newReview]
    }))
  }

  // Générer des reviews pour différentes plateformes
  const generateSteamReviews = (gameId: number): Review[] => {
    const reviewTemplates = [
      { rating: 5, text: "Absolutely incredible! Best game I've played this year. The graphics and gameplay are top-notch.", author: "SteamMaster", helpful: 124 },
      { rating: 4, text: "Great storyline and graphics. Minor bugs but overall excellent experience.", author: "GameReviewer", helpful: 89 },
      { rating: 5, text: "Perfect RPG experience. Hours of entertainment guaranteed. Highly recommended!", author: "RPGLover", helpful: 156 },
      { rating: 3, text: "Good but could use more content. Worth it on sale, not at full price.", author: "CasualGamer", helpful: 45 },
      { rating: 4, text: "Solid experience overall. Great value for money. Some performance issues on older hardware.", author: "ValueHunter", helpful: 78 }
    ]

    const seed = gameId
    const selectedReviews = []
    const numReviews = 5

    for (let i = 0; i < numReviews; i++) {
      const index = (seed * 17 + i * 23 + gameId * 7) % reviewTemplates.length
      const template = reviewTemplates[index]
      
      const gameSpecificVariations = {
        helpful: Math.max(1, template.helpful + (seed * i % 50) - 25),
        daysAgo: (seed * i * 3) % 180 + 1,
      }
      
      selectedReviews.push({
        id: `steam_${gameId}_${i}`,
        username: template.author,
        rating: template.rating,
        text: template.text,
        helpful: gameSpecificVariations.helpful,
        date: new Date(Date.now() - gameSpecificVariations.daysAgo * 24 * 60 * 60 * 1000)
          .toISOString().split('T')[0],
        platform: 'Steam'
      })
    }

    return selectedReviews.sort((a, b) => (b.helpful || 0) - (a.helpful || 0))
  }

  const generateGoodreadsReviews = (bookId: string): Review[] => {
    const reviewTemplates = [
      { rating: 5, text: "Absolutely loved this book! Couldn't put it down. The characters were so well developed and the plot was engaging throughout.", author: "BookLover", helpful: 156 },
      { rating: 4, text: "Really enjoyed this read. Great writing style and interesting themes. A few slow parts but overall fantastic.", author: "AvidReader", helpful: 89 },
      { rating: 5, text: "One of my favorite books this year! Beautiful prose and such an emotional journey. Highly recommend!", author: "BookwormLife", helpful: 234 },
      { rating: 3, text: "Good book but not amazing. The story was decent but felt a bit predictable at times.", author: "CasualReader", helpful: 45 },
      { rating: 4, text: "Solid storytelling and great character development. Would definitely read more from this author.", author: "LitCritic", helpful: 112 }
    ]

    const seed = bookId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0)
    const selectedReviews = []
    
    for (let i = 0; i < 5; i++) {
      const index = (seed * 11 + i * 17) % reviewTemplates.length
      const template = reviewTemplates[index]
      
      const bookSpecificVariations = {
        helpful: Math.max(1, template.helpful + (seed * i % 50) - 25),
        daysAgo: (seed * i * 4) % 90 + 1,
      }
      
      selectedReviews.push({
        id: `goodreads_${bookId}_${i}`,
        username: template.author,
        rating: template.rating,
        text: template.text,
        helpful: bookSpecificVariations.helpful,
        date: new Date(Date.now() - bookSpecificVariations.daysAgo * 24 * 60 * 60 * 1000)
          .toISOString().split('T')[0],
        platform: 'Goodreads'
      })
    }

    return selectedReviews.sort((a, b) => (b.helpful || 0) - (a.helpful || 0))
  }

  const generateIMDBReviews = (movieId: string): Review[] => {
    const reviewTemplates = [
      { rating: 5, text: "A masterpiece! Brilliant acting and cinematography. This film will be remembered for years.", author: "CinemaLover", helpful: 89 },
      { rating: 4, text: "Excellent storytelling and character development. Minor pacing issues but overall fantastic.", author: "FilmCritic", helpful: 156 },
      { rating: 5, text: "One of the best films I've seen. Perfect blend of drama and emotion. Highly recommended!", author: "MovieBuff", helpful: 234 },
      { rating: 3, text: "Good but not great. Some brilliant moments but overall feels uneven.", author: "CasualViewer", helpful: 45 },
      { rating: 4, text: "Strong performances and great direction. A solid addition to the genre.", author: "FilmStudent", helpful: 78 }
    ]

    const seed = movieId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0)
    const selectedReviews = []
    
    for (let i = 0; i < 5; i++) {
      const index = (seed * 13 + i * 19) % reviewTemplates.length
      const template = reviewTemplates[index]
      
      const movieSpecificVariations = {
        helpful: Math.max(1, template.helpful + (seed * i % 40) - 20),
        daysAgo: (seed * i * 2) % 120 + 1,
      }
      
      selectedReviews.push({
        id: `imdb_${movieId}_${i}`,
        username: template.author,
        rating: template.rating,
        text: template.text,
        helpful: movieSpecificVariations.helpful,
        date: new Date(Date.now() - movieSpecificVariations.daysAgo * 24 * 60 * 60 * 1000)
          .toISOString().split('T')[0],
        platform: 'IMDb'
      })
    }

    return selectedReviews.sort((a, b) => (b.helpful || 0) - (a.helpful || 0))
  }

  const generateSpotifyReviews = (musicId: string): Review[] => {
    const reviewTemplates = [
      { rating: 5, text: "This album is absolutely phenomenal! Every track is a masterpiece. Can't stop listening!", author: "MusicLover99", helpful: 201 },
      { rating: 4, text: "Really solid album with great production. A few tracks could be stronger but overall fantastic.", author: "IndieHead", helpful: 134 },
      { rating: 5, text: "Pure genius! The way they blend genres is incredible. This will be on repeat for months.", author: "VinylCollector", helpful: 187 },
      { rating: 3, text: "Good but not groundbreaking. Some nice moments but doesn't live up to the hype.", author: "CasualListener", helpful: 67 },
      { rating: 4, text: "Excellent songwriting and vocals. The production quality is top-notch throughout.", author: "AudioPhile", helpful: 145 }
    ]

    const seed = musicId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0)
    const selectedReviews = []
    
    for (let i = 0; i < 5; i++) {
      const index = (seed * 7 + i * 11) % reviewTemplates.length
      const template = reviewTemplates[index]
      
      const musicSpecificVariations = {
        helpful: Math.max(1, template.helpful + (seed * i % 60) - 30),
        daysAgo: (seed * i * 5) % 200 + 1,
      }
      
      selectedReviews.push({
        id: `spotify_${musicId}_${i}`,
        username: template.author,
        rating: template.rating,
        text: template.text,
        helpful: musicSpecificVariations.helpful,
        date: new Date(Date.now() - musicSpecificVariations.daysAgo * 24 * 60 * 60 * 1000)
          .toISOString().split('T')[0],
        platform: 'Music Community'
      })
    }

    return selectedReviews.sort((a, b) => (b.helpful || 0) - (a.helpful || 0))
  }

  const getSections = () => {
    if (activeTab === 'games') {
      return [
        { title: 'Popular this week', items: gameContent.popular },
        { title: 'Top rated of all time', items: gameContent.topRated },
        { title: 'New releases', items: gameContent.newReleases }
      ]
    }
    
    if (activeTab === 'movies') {
      return [
        { title: 'Popular classics', items: movieContent.popular },
        { title: 'Top rated of all time', items: movieContent.topRated },
        { title: 'Recent favorites', items: movieContent.recent }
      ]
    }
    
    if (activeTab === 'books') {
      return [
        { title: 'Fiction favorites', items: bookContent.fiction },
        { title: 'Non-fiction highlights', items: bookContent.nonFiction },
        { title: 'New releases', items: bookContent.newReleases }
      ]
    }

    if (activeTab === 'music') {
      return [
        { title: 'Popular albums', items: musicContent.popular },
        { title: 'Classic masterpieces', items: musicContent.topRated },
        { title: 'Latest releases', items: musicContent.newReleases }
      ]
    }
    
    const allContent = getCurrentContent()
    const popularItems = allContent.slice(0, 4)
    const topRatedItems = allContent.slice(4, 8) 
    const editorPicksItems = allContent.slice(0, 4)

    const sectionConfig = {
      games: [
        { title: 'Popular this week', items: popularItems },
        { title: 'Top rated of all time', items: topRatedItems },
        { title: "Editor's Choice", items: editorPicksItems }
      ],
      music: [
        { title: 'Popular this week', items: popularItems },
        { title: 'Top albums', items: topRatedItems },
        { title: 'Hidden gems', items: editorPicksItems }
      ],
      books: [
        { title: 'Popular this week', items: popularItems },
        { title: 'Bestsellers', items: topRatedItems },
        { title: 'Must reads', items: editorPicksItems }
      ]
    }

    return sectionConfig[activeTab] || sectionConfig.games
  }

  const getCurrentContent = (): ContentItem[] => {
    switch (activeTab) {
      case 'games': return sampleContent.games
      case 'movies': return sampleContent.movies
      case 'music': return sampleContent.music
      case 'books': return sampleContent.books
      default: return sampleContent.games
    }
  }

  // Rendu selon l'onglet principal actif
  const renderMainContent = () => {
    switch (activeMainTab) {
      case 'home':
        return renderHomeContent()
      case 'library':
        return renderLibraryContent()
      case 'discover':
        return renderDiscoverContent()
      case 'search':
        return renderSearchContent()
      case 'roadmap':
        return <RoadmapPage onBack={() => setActiveMainTab('home')} />
      default:
        return renderHomeContent()
    }
  }

  const renderHomeContent = () => {
    const sections = getSections()
    
    return (
      <div className="bg-white">
        {/* Header fixe avec arrière-plan gris */}
        <div className="sticky top-0 z-50 bg-gray-50 border-b border-gray-200">
          {/* Barre de recherche étendue */}
          <div className="flex items-center justify-between px-4 sm:px-6 py-4">
            <div className="flex-1 max-w-2xl mx-auto">
              <div 
                className="relative cursor-pointer"
                onClick={() => setIsSearchOpen(true)}
              >
                <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
                <div className="w-full pl-4 pr-10 py-3 bg-white hover:bg-gray-50 rounded-lg text-gray-500 transition-colors text-sm border border-gray-200 shadow-sm">
                  <span>Search...</span>
                </div>
              </div>
            </div>
            
            <div className="flex items-center ml-4">
              <button className="p-2 hover:bg-gray-100 rounded-full transition-colors">
                <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                  <span className="text-gray-600 text-sm font-medium">👤</span>
                </div>
              </button>
            </div>
          </div>

          {/* Onglets de catégories */}
          <div className="px-4 sm:px-6">
            <CategoryTabs 
              activeTab={activeTab} 
              onTabChange={(tab) => setActiveTab(tab as MediaCategory)} 
            />
          </div>
        </div>
        
        {/* Contenu scrollable avec loading state */}
        <div className="container mx-auto px-4 sm:px-6 py-6 sm:py-8 pb-24">
          {(gamesLoading && activeTab === 'games') || 
           (moviesLoading && activeTab === 'movies') || 
           (booksLoading && activeTab === 'books') || 
           (musicLoading && activeTab === 'music') ? (
            <div className="space-y-6">
              {[1, 2, 3].map((i) => (
                <div key={i} className="mb-8">
                  <div className="h-6 bg-gray-200 rounded w-48 mb-4 animate-pulse"></div>
                  <div className="flex space-x-4 overflow-x-auto pb-4">
                    {[1, 2, 3, 4].map((j) => (
                      <div key={j} className="flex-shrink-0 w-32">
                        <div className="w-32 h-40 bg-gray-200 rounded-lg animate-pulse mb-3"></div>
                        <div className="h-4 bg-gray-200 rounded animate-pulse mb-2"></div>
                        <div className="h-3 bg-gray-200 rounded w-3/4 animate-pulse"></div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="space-y-6 sm:space-y-8">
              {sections.map((section, index) => (
                <ContentSection
                  key={`${activeTab}-${index}`}
                  title={section.title}
                  items={section.items}
                  category={activeTab}
                  onAddToLibrary={handleAddToLibrary}
                  onDeleteItem={handleDeleteItem} // ✅ AJOUT NOUVELLE PROP
                  library={library}
                  onOpenGameDetail={handleOpenGameDetail}
                  onOpenMovieDetail={handleOpenMovieDetail}
                  onOpenBookDetail={handleOpenBookDetail}
                  onOpenMusicDetail={handleOpenMusicDetail}
                />
              ))}
            </div>
          )}
        </div>
      </div>
    )
  }

  const renderLibraryContent = () => (
    <div className="bg-white min-h-screen">
      <div className="sticky top-0 z-50 bg-white border-b border-gray-200 px-4 sm:px-6 py-4">
        <h1 className="text-2xl font-bold text-gray-900">Your Library</h1>
      </div>
      <div className="container mx-auto px-4 sm:px-6 py-6 pb-24">
        <LibrarySection 
          library={library}
          onAddToLibrary={handleAddToLibrary}
          onUpdateItem={handleUpdateItem}
          onDeleteItem={handleDeleteItem}
          onOpenGameDetail={handleOpenGameDetail}
          onOpenMovieDetail={handleOpenMovieDetail}
          onOpenBookDetail={handleOpenBookDetail}
          onOpenMusicDetail={handleOpenMusicDetail}
          onOpenSearch={handleOpenSearch}
        />
      </div>
    </div>
  )

  const renderDiscoverContent = () => (
    <DiscoverPage
      onAddToLibrary={handleAddToLibrary}
      onDeleteItem={handleDeleteItem} // ✅ AJOUT NOUVELLE PROP
      onOpenGameDetail={handleOpenGameDetail}
      onOpenMovieDetail={handleOpenMovieDetail}
      onOpenBookDetail={handleOpenBookDetail}
      onOpenMusicDetail={handleOpenMusicDetail}
      library={library}
    />
  )

  const renderSearchContent = () => (
    <div className="bg-white min-h-screen">
      <div className="sticky top-0 z-50 bg-white border-b border-gray-200 px-4 sm:px-6 py-4">
        <h1 className="text-2xl font-bold text-gray-900">Search</h1>
      </div>
      <div className="container mx-auto px-4 sm:px-6 py-6 pb-24">
        <div 
          className="bg-gray-50 rounded-xl p-4 border border-gray-200 cursor-pointer hover:bg-gray-100 transition-colors"
          onClick={() => setIsSearchOpen(true)}
        >
          <div className="flex items-center space-x-3">
            <Search className="text-gray-400" size={20} />
            <span className="text-gray-500">Search games, movies, music, books...</span>
          </div>
        </div>
      </div>
    </div>
  )

  return (
    <div className="min-h-screen bg-white">
      {renderMainContent()}

      {/* Bottom Navigation */}
      <BottomNavigation 
        activeTab={activeMainTab} 
        onTabChange={setActiveMainTab} 
      />

      {/* ✅ MODALS AVEC onDeleteItem AJOUTÉ */}
      <GameDetailModal
        isOpen={!!selectedGameId}
        onClose={() => setSelectedGameId(null)}
        gameId={selectedGameId || ''}
        onAddToLibrary={handleAddToLibrary}
        onDeleteItem={handleDeleteItem} // ✅ AJOUT
        library={library}
        userReviews={selectedGameId ? userReviews[selectedGameId] || [] : []}
        googleReviews={selectedGameId ? generateSteamReviews(parseInt(selectedGameId)) : []}
        onReviewSubmit={handleReviewSubmit}
      />

      <MovieDetailModal
        isOpen={!!selectedMovieId}
        onClose={() => setSelectedMovieId(null)}
        movieId={selectedMovieId || ''}
        onAddToLibrary={handleAddToLibrary}
        onDeleteItem={handleDeleteItem} // ✅ AJOUT
        library={library}
        userReviews={selectedMovieId ? userReviews[selectedMovieId] || [] : []}
        imdbReviews={selectedMovieId ? generateIMDBReviews(selectedMovieId) : []}
        onReviewSubmit={handleReviewSubmit}
      />

      <BookDetailModal
        isOpen={!!selectedBookId}
        onClose={() => setSelectedBookId(null)}
        bookId={selectedBookId || ''}
        onAddToLibrary={handleAddToLibrary}
        onDeleteItem={handleDeleteItem} // ✅ AJOUT
        library={library}
        userReviews={selectedBookId ? userReviews[selectedBookId] || [] : []}
        goodreadsReviews={selectedBookId ? generateGoodreadsReviews(selectedBookId) : []}
        onReviewSubmit={handleReviewSubmit}
      />

      <MusicDetailModal
        isOpen={!!selectedMusicId}
        onClose={() => setSelectedMusicId(null)}
        albumId={selectedMusicId || ''}
        onAddToLibrary={handleAddToLibrary}
        onDeleteItem={handleDeleteItem} // ✅ AJOUT
        library={library}
        userReviews={selectedMusicId ? userReviews[selectedMusicId] || [] : []}
        spotifyReviews={selectedMusicId ? generateSpotifyReviews(selectedMusicId) : []}
        onReviewSubmit={handleReviewSubmit}
      />

      <SearchModal
        isOpen={isSearchOpen}
        onClose={() => setIsSearchOpen(false)}
        onAddToLibrary={handleAddToLibrary}
        onOpenGameDetail={handleOpenGameDetail}
        onOpenMovieDetail={handleOpenMovieDetail}
        onOpenBookDetail={handleOpenBookDetail}
        onOpenMusicDetail={handleOpenMusicDetail}
        library={library}
      />
    </div>
  )
}
</file>

<file path="src/components/SearchModal.tsx">
// src/components/SearchModal.tsx - VERSION COMPLÈTE CORRIGÉE
'use client'
import { useState, useEffect, useRef, useCallback } from 'react'
import { X, Search, Star, Loader2, WifiOff, Check } from 'lucide-react'
import { normalizeId, idsMatch } from '@/utils/idNormalizer'
import { omdbService } from '@/services/omdbService'
import { googleBooksService } from '@/services/googleBooksService'
import { musicService } from '@/services/musicService'
import { rawgService } from '@/services/rawgService'
import type { SearchResult, LibraryItem, MediaCategory, StatusOption, MediaStatus } from '@/types'

interface SearchModalProps {
  isOpen: boolean
  onClose: () => void
  onAddToLibrary: (item: any, status: MediaStatus) => void
  onOpenGameDetail?: (gameId: string) => void
  onOpenMovieDetail?: (movieId: string) => void
  onOpenBookDetail?: (bookId: string) => void
  onOpenMusicDetail?: (musicId: string) => void
  library: LibraryItem[]
}

// Debounce utility function
function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout | null = null
  return (...args: Parameters<T>) => {
    if (timeout) clearTimeout(timeout)
    timeout = setTimeout(() => func(...args), wait)
  }
}

export default function SearchModal({
  isOpen,
  onClose,
  onAddToLibrary,
  onOpenGameDetail,
  onOpenMovieDetail,
  onOpenBookDetail,
  onOpenMusicDetail,
  library = []
}: SearchModalProps) {
  // États principaux
  const [query, setQuery] = useState('')
  const [results, setResults] = useState<SearchResult[]>([])
  const [loading, setLoading] = useState(false)
  const [activeCategory, setActiveCategory] = useState<string>('all')
  const [selectedIndex, setSelectedIndex] = useState(-1)
  const [error, setError] = useState<string | null>(null)
  
  // États pour l'interface
  const [showStatusPopup, setShowStatusPopup] = useState<string | null>(null)
  const [addingItem, setAddingItem] = useState<string | null>(null)
  const [fadeOutPopup, setFadeOutPopup] = useState<string | null>(null)
  const [selectedStatus, setSelectedStatus] = useState<string | null>(null)
  const [justAddedItems, setJustAddedItems] = useState<Set<string>>(new Set())

  // Refs
  const inputRef = useRef<HTMLInputElement>(null)
  const resultsRef = useRef<HTMLDivElement>(null)

  // Cache de recherche
  const [searchCache] = useState<Map<string, SearchResult[]>>(new Map())

  // Sécurité : Assurer que library est toujours un array
  const safeLibrary = Array.isArray(library) ? library : []

  // 🔧 DÉTECTION MOBILE
  const isMobile = (): boolean => {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
  }

  // ✅ FONCTION getCreator ENTIÈREMENT RÉÉCRITE
  const getCreator = (result: SearchResult) => {
    console.log('🔍 [SearchModal] Getting creator for:', result.title)
    console.log('🔍 [SearchModal] Category:', result.category)
    console.log('🔍 [SearchModal] Available data:', {
      author: result.author,
      director: result.director,
      developer: result.developer,
      artist: result.artist,
      developers: result.developers ? result.developers.map(d => d.name) : null,
      publishers: result.publishers ? result.publishers.map(p => p.name) : null
    })

    let creator = 'Unknown Creator'

    switch (result.category) {
      case 'games':
        // ✅ LOGIQUE AMÉLIORÉE POUR LES JEUX
        if (result.developer && result.developer !== 'Unknown Developer') {
          creator = result.developer
          console.log('🎮 [SearchModal] Using developer field:', creator)
        }
        else if (result.developers && result.developers.length > 0) {
          creator = result.developers[0].name
          console.log('🎮 [SearchModal] Using first developer from array:', creator)
        }
        else if (result.author && result.author !== 'Unknown Developer') {
          creator = result.author
          console.log('🎮 [SearchModal] Using author as fallback:', creator)
        }
        else if (result.publishers && result.publishers.length > 0) {
          creator = `${result.publishers[0].name} (Publisher)`
          console.log('🎮 [SearchModal] Using publisher as last resort:', creator)
        }
        else {
          creator = 'Unknown Developer'
          console.log('🎮 [SearchModal] No developer info found')
        }
        break

      case 'movies':
        creator = result.director || result.author || 'Unknown Director'
        console.log('🎬 [SearchModal] Movie creator:', creator)
        break

      case 'music':
        creator = result.artist || result.author || 'Unknown Artist'
        console.log('🎵 [SearchModal] Music creator:', creator)
        break

      case 'books':
        creator = result.author || 'Unknown Author'
        console.log('📚 [SearchModal] Book creator:', creator)
        break

      default:
        creator = result.author || result.artist || result.director || result.developer || 'Unknown Creator'
        console.log('❓ [SearchModal] Default creator:', creator)
        break
    }

    console.log('✅ [SearchModal] Final creator for', result.title, ':', creator)
    return creator
  }

  // ✅ RECHERCHE JEUX AVEC DIAGNOSTIC COMPLET
  const searchGames = async (query: string): Promise<SearchResult[]> => {
    console.log('🎮 [SearchModal] Starting DIAGNOSTIC games search for:', query)
    
    try {
      // ✅ TEST DE CONNECTIVITÉ D'ABORD
      console.log('🎮 [SearchModal] Testing RAWG connection...')
      const connectionTest = await rawgService.testConnection()
      
      if (!connectionTest.success) {
        console.error('🎮 [SearchModal] RAWG API unavailable:', connectionTest.message)
        throw new Error(`RAWG API unavailable: ${connectionTest.message}`)
      }
      
      console.log('🎮 [SearchModal] RAWG connection OK:', connectionTest.message)
      
      // ✅ RECHERCHE AVEC LE SERVICE CORRIGÉ
      const games = await rawgService.searchGames(query, 20)
      console.log('🎮 [SearchModal] RAWG returned', games.length, 'games')
      
      if (!games || games.length === 0) {
        console.log('🎮 [SearchModal] No games found, checking if API is working...')
        return []
      }

      // ✅ FILTRAGE INTELLIGENT DE PERTINENCE AVANT CONVERSION
      const queryLower = query.toLowerCase().trim()
      const queryWords = queryLower.split(/\s+/).filter(word => word.length > 1)
      
      console.log('🎮 [SearchModal] Query words to match:', queryWords)
      console.log('🎮 [SearchModal] Full query:', queryLower)
      
      const relevantGames = games.filter(game => {
        const gameName = game.name.toLowerCase()
        const developerNames = game.developers?.map(dev => dev.name.toLowerCase()) || []
        const publisherNames = game.publishers?.map(pub => pub.name.toLowerCase()) || []
        
        // ✅ LOGIQUE ÉQUILIBRÉE : Plusieurs niveaux de correspondance
        
        // 1. Correspondance exacte complète (priorité max)
        const exactMatch = gameName === queryLower
        
        // 2. Correspondance de séquence complète dans le titre
        const hasSequenceMatch = gameName.includes(queryLower)
        
        // 3. TOUS les mots-clés importants présents (pour requêtes multi-mots)
        const allWordsInTitle = queryWords.length > 1 ? 
          queryWords.every(word => gameName.includes(word)) : 
          gameName.includes(queryWords[0]) // Pour un seul mot, juste vérifier qu'il est présent
        
        // 4. Au moins la moitié des mots-clés présents (pour flexibilité)
        const majorityWordsMatch = queryWords.length > 2 ?
          queryWords.filter(word => gameName.includes(word)).length >= Math.ceil(queryWords.length / 2) :
          false
        
        // 5. Match développeur/éditeur avec mots du titre
        const hasCreatorMatch = queryWords.some(word => 
          developerNames.some(dev => dev.includes(word)) ||
          publisherNames.some(pub => pub.includes(word))
        )
        const hasPartialTitleMatch = queryWords.some(word => gameName.includes(word))
        
        // 6. Correspondance début de titre (pour les séries)
        const startsWithQuery = gameName.startsWith(queryLower)
        
        // ✅ CRITÈRES DE PERTINENCE (du plus strict au plus flexible) : 
        const isRelevant = exactMatch ||           // Correspondance exacte
          hasSequenceMatch ||                      // Séquence complète présente
          startsWithQuery ||                       // Commence par la requête
          allWordsInTitle ||                       // Tous les mots présents
          majorityWordsMatch ||                    // Majorité des mots présents
          (hasCreatorMatch && hasPartialTitleMatch) // Match créateur + titre partiel
        
        console.log(`🎮 [SearchModal] "${game.name}":`, {
          exactMatch,
          hasSequenceMatch,
          startsWithQuery,
          allWordsInTitle,
          majorityWordsMatch,
          hasCreatorMatch,
          hasPartialTitleMatch,
          isRelevant: isRelevant ? 'KEEP' : 'REJECT'
        })
        
        return isRelevant
      })

      console.log(`🎮 [SearchModal] INTELLIGENT FILTERING: ${games.length} → ${relevantGames.length} games`)

      // ✅ CONVERSION AVEC VÉRIFICATION STRICTE DES DÉVELOPPEURS
      const convertedGames = relevantGames.map(game => {
        const converted = rawgService.convertToAppFormat(game)
        
        console.log('🎮 [SearchModal] Converted relevant game:', {
          title: converted.title,
          developer: converted.developer,
          author: converted.author,
          year: converted.year,
          originalGame: {
            name: game.name,
            released: game.released,
            developers: game.developers?.map(d => d.name) || [],
            publishers: game.publishers?.map(p => p.name) || []
          }
        })
        
        return converted
      })

      // ✅ TRI OPTIMISÉ: PERTINENCE D'ABORD, PUIS DATE
      const sortedGames = convertedGames.sort((a, b) => {
        const queryLower = query.toLowerCase().trim()
        const queryWords = queryLower.split(/\s+/).filter(word => word.length > 1)
        
        // 1. PRIORITÉ ABSOLUE: Correspondance exacte du titre
        const aExactMatch = a.title.toLowerCase() === queryLower
        const bExactMatch = b.title.toLowerCase() === queryLower
        
        if (aExactMatch && !bExactMatch) return -1
        if (!aExactMatch && bExactMatch) return 1
        
        // 2. Correspondance de séquence complète dans le titre
        const aHasSequence = a.title.toLowerCase().includes(queryLower)
        const bHasSequence = b.title.toLowerCase().includes(queryLower)
        
        if (aHasSequence && !bHasSequence) return -1
        if (!aHasSequence && bHasSequence) return 1
        
        // 3. Tous les mots-clés présents dans le titre
        const aHasAllWords = queryWords.every(word => a.title.toLowerCase().includes(word))
        const bHasAllWords = queryWords.every(word => b.title.toLowerCase().includes(word))
        
        if (aHasAllWords && !bHasAllWords) return -1
        if (!aHasAllWords && bHasAllWords) return 1
        
        // 4. Pour les jeux qui matchent bien, prioriser les récents
        if ((aHasSequence || aHasAllWords) && (bHasSequence || bHasAllWords)) {
          const currentYear = new Date().getFullYear()
          const aIsRecent = a.year >= currentYear
          const bIsRecent = b.year >= currentYear
          
          if (aIsRecent && !bIsRecent) return -1
          if (!aIsRecent && bIsRecent) return 1
          
          // Trier par année (plus récent en premier) pour les matchs pertinents
          if (a.year !== b.year) return b.year - a.year
        }
        
        // 5. Correspondance développeur/créateur
        const aDeveloperMatch = queryWords.some(word => 
          (a.developer || a.author || '').toLowerCase().includes(word)
        )
        const bDeveloperMatch = queryWords.some(word =>
          (b.developer || b.author || '').toLowerCase().includes(word)
        )
        
        if (aDeveloperMatch && !bDeveloperMatch) return -1
        if (!aDeveloperMatch && bDeveloperMatch) return 1
        
        // 6. Tri final par rating
        return (b.rating || 0) - (a.rating || 0)
      })

      console.log('✅ [SearchModal] Games search complete - sorted by relevance then recency:')
      sortedGames.slice(0, 8).forEach((game, i) => {
        const isRelevant = queryWords.every(word => game.title.toLowerCase().includes(word))
        console.log(`  ${i + 1}. ${game.title} (${game.year}) ${game.year >= 2024 ? '🔥' : ''} ${isRelevant ? '✅' : '❌'}`)
      })

      return sortedGames.slice(0, 12) // Limiter aux 12 meilleurs résultats

    } catch (error) {
      console.error('❌ [SearchModal] Enhanced games search failed:', error)
      throw error
    }
  }

  // 🎬 RECHERCHE FILMS/SÉRIES
  const searchMoviesAndSeries = async (query: string): Promise<SearchResult[]> => {
    console.log('🎬 [SearchModal] Starting movies/series search for:', query)
    
    try {
      const movies = await omdbService.searchMoviesAndSeries(query, 1)
      console.log('🎬 [SearchModal] OMDB returned', movies.length, 'movies/series')
      
      if (!movies || movies.length === 0) {
        return []
      }

      const detailedMovies = await Promise.all(
        movies.slice(0, 8).map(async movie => {
          try {
            const movieDetails = await omdbService.getMovieDetails(movie.imdbID)
            
            if (movieDetails) {
              const converted = omdbService.convertToAppFormat(movieDetails)
              console.log('🎬 [SearchModal] Movie with details:', converted.title, '- Director:', converted.director)
              return converted
            } else {
              const converted = omdbService.convertToAppFormat(movie)
              return converted
            }
          } catch (error) {
            console.warn('🎬 [SearchModal] Failed details for:', movie.Title, error)
            return omdbService.convertToAppFormat(movie)
          }
        })
      )

      console.log('✅ [SearchModal] Movies conversion complete:', detailedMovies.length, 'results')
      return detailedMovies

    } catch (error) {
      console.error('❌ [SearchModal] Movies search failed:', error)
      throw error
    }
  }

  // 📚 RECHERCHE LIVRES
  const searchBooks = async (query: string): Promise<SearchResult[]> => {
    console.log('📚 [SearchModal] Starting books search for:', query)
    
    try {
      const books = await googleBooksService.searchBooks(query, 15)
      console.log('📚 [SearchModal] Google Books returned:', books.length, 'books')
      
      if (!books || books.length === 0) {
        return []
      }

      const convertedBooks = books.map(book => {
        const converted = googleBooksService.convertToAppFormat(book)
        console.log('📚 [SearchModal] Converted book:', converted.title, 'by', converted.author)
        return converted
      })

      console.log('✅ [SearchModal] Books conversion complete:', convertedBooks.length, 'results')
      return convertedBooks

    } catch (error) {
      console.error('❌ [SearchModal] Books search failed:', error)
      throw error
    }
  }

  // 🎵 RECHERCHE MUSIQUE
  const searchMusicWithCategory = async (query: string): Promise<SearchResult[]> => {
    console.log('🎵 [SearchModal] Starting music search for:', query)
    
    try {
      const albums = await musicService.searchAlbums(query, 20)
      console.log('🎵 [SearchModal] Music service returned:', albums.length, 'albums')
      
      if (!albums || albums.length === 0) {
        return []
      }

      const convertedAlbums = albums.map(album => {
        const converted = musicService.convertToAppFormat(album)
        console.log('🎵 [SearchModal] Converted album:', converted.title, 'by', converted.artist)
        return converted
      })

      console.log('✅ [SearchModal] Music conversion complete:', convertedAlbums.length, 'results')
      return convertedAlbums

    } catch (error) {
      console.error('❌ [SearchModal] Music search failed:', error)
      throw error
    }
  }

  // ✅ RECHERCHE PRINCIPALE RÉÉCRITE
  const performSearch = async (searchQuery: string, category: string) => {
    if (!searchQuery.trim()) return
    
    console.log('🔍 [SearchModal] Starting comprehensive search for:', searchQuery, 'Category:', category)
    
    setLoading(true)
    setError(null)
    setSelectedIndex(-1)

    const allResults: SearchResult[] = []
    const errors: string[] = []

    try {
      const searchPromises: Promise<{ category: string, results: SearchResult[] }>[] = []

      // ✅ RECHERCHE JEUX AVEC DÉVELOPPEURS ET JEUX RÉCENTS
      if (category === 'all' || category === 'games') {
        searchPromises.push(
          searchGames(searchQuery)
            .then(results => ({ category: 'games', results }))
            .catch(err => {
              console.error('❌ [SearchModal] Games search failed:', err)
              errors.push(`Games: ${err.message}`)
              return { category: 'games', results: [] }
            })
        )
      }

      // 🎬 RECHERCHE FILMS/SÉRIES
      if (category === 'all' || category === 'movies') {
        searchPromises.push(
          searchMoviesAndSeries(searchQuery)
            .then(results => ({ category: 'movies', results }))
            .catch(err => {
              console.error('❌ [SearchModal] Movies search failed:', err)
              errors.push(`Movies & TV: ${err.message}`)
              return { category: 'movies', results: [] }
            })
        )
      }

      // 🎵 RECHERCHE MUSIQUE
      if (category === 'all' || category === 'music') {
        searchPromises.push(
          searchMusicWithCategory(searchQuery)
            .then(results => ({ category: 'music', results }))
            .catch(err => {
              console.error('❌ [SearchModal] Music search failed:', err)
              errors.push(`Music: ${err.message}`)
              return { category: 'music', results: [] }
            })
        )
      }

      // 📚 RECHERCHE LIVRES
      if (category === 'all' || category === 'books') {
        searchPromises.push(
          searchBooks(searchQuery)
            .then(results => ({ category: 'books', results }))
            .catch(err => {
              console.error('❌ [SearchModal] Books search failed:', err)
              errors.push(`Books: ${err.message}`)
              return { category: 'books', results: [] }
            })
        )
      }

      const results = await Promise.all(searchPromises)
      
      // ✅ AGRÉGATION ET VÉRIFICATION DES RÉSULTATS
      results.forEach(({ category: searchCategory, results: categoryResults }) => {
        console.log(`📊 [SearchModal] ${searchCategory.toUpperCase()} results:`, categoryResults.length)
        
        categoryResults.forEach((result, index) => {
          if (index < 3) { // Log seulement les 3 premiers pour éviter le spam
            const creator = getCreator(result)
            console.log(`  ${index + 1}. ${result.title} (${result.year}) by ${creator}`)
          }
        })
        
        allResults.push(...categoryResults)
      })

      // 🔧 TRI INTELLIGENT: PERTINENCE AVANT DATE
      allResults.sort((a, b) => {
        const queryLower = searchQuery.toLowerCase()
        
        // 1. PRIORITÉ ABSOLUE: Correspondance exacte du titre
        const aExactTitle = a.title.toLowerCase() === queryLower
        const bExactTitle = b.title.toLowerCase() === queryLower
        
        if (aExactTitle && !bExactTitle) return -1
        if (!aExactTitle && bExactTitle) return 1
        
        // 2. Correspondance partielle forte du titre (contient le mot-clé)
        const aTitleContains = a.title.toLowerCase().includes(queryLower)
        const bTitleContains = b.title.toLowerCase().includes(queryLower)
        
        if (aTitleContains && !bTitleContains) return -1
        if (!aTitleContains && bTitleContains) return 1
        
        // 3. Pour les résultats qui matchent le titre, prioriser les récents
        if (aTitleContains && bTitleContains) {
          const currentYear = new Date().getFullYear()
          const aIsRecent = a.year >= currentYear
          const bIsRecent = b.year >= currentYear
          
          if (aIsRecent && !bIsRecent) return -1
          if (!aIsRecent && bIsRecent) return 1
          
          // Année (plus récent en premier) pour les titres pertinents
          if (a.year !== b.year) return (b.year || 0) - (a.year || 0)
        }
        
        // 4. Correspondance créateur (développeur, auteur, etc.)
        const aCreator = getCreator(a).toLowerCase()
        const bCreator = getCreator(b).toLowerCase()
        const aCreatorMatch = aCreator.includes(queryLower)
        const bCreatorMatch = bCreator.includes(queryLower)
        
        if (aCreatorMatch && !bCreatorMatch) return -1
        if (!aCreatorMatch && bCreatorMatch) return 1
        
        // 5. Rating final
        return (b.rating || 0) - (a.rating || 0)
      })

      console.log('🎯 [SearchModal] FINAL RESULTS:', allResults.length, 'total')
      allResults.slice(0, 10).forEach((result, index) => {
        const creator = getCreator(result)
        const isRecent = result.year >= new Date().getFullYear() ? '🔥' : ''
        console.log(`${index + 1}. ${result.title} (${result.year}) ${isRecent} by ${creator} - ${result.category.toUpperCase()}`)
      })

      // Cache des résultats
      const cacheKey = `${category}-${searchQuery.toLowerCase()}`
      searchCache.set(cacheKey, allResults)

      setResults(allResults)

      if (errors.length > 0 && allResults.length === 0) {
        setError(`Search failed: ${errors.join(', ')}`)
      }

    } catch (error) {
      console.error('❌ [SearchModal] Global search error:', error)
      setError(error instanceof Error ? error.message : 'Search failed')
    } finally {
      setLoading(false)
    }
  }

  // Debounced search
  const debouncedSearch = useCallback(
    debounce((searchQuery: string, category: string) => {
      performSearch(searchQuery, category)
    }, 500),
    []
  )

  // ✅ EFFET POUR DÉCLENCHER LA RECHERCHE
  useEffect(() => {
    if (!query.trim() || query.length < 2) {
      setResults([])
      setSelectedIndex(-1)
      setError(null)
      return
    }

    const cacheKey = `${activeCategory}-${query.toLowerCase()}`
    if (searchCache.has(cacheKey)) {
      const cachedResults = searchCache.get(cacheKey)!
      setResults(cachedResults)
      setSelectedIndex(-1)
      return
    }

    debouncedSearch(query, activeCategory)
  }, [query, activeCategory, debouncedSearch, searchCache])

  // Focus input when modal opens
  useEffect(() => {
    if (isOpen && inputRef.current) {
      inputRef.current.focus()
    }
  }, [isOpen])

  // Reset state when modal closes
  useEffect(() => {
    if (!isOpen) {
      setQuery('')
      setResults([])
      setSelectedIndex(-1)
      setError(null)
      setShowStatusPopup(null)
      setAddingItem(null)
      setFadeOutPopup(null)
      setSelectedStatus(null)
      setJustAddedItems(new Set())
    }
  }, [isOpen])

  // ✅ GESTION DES OPTIONS DE STATUT
  const getStatusOptions = (category: string): StatusOption[] => {
    switch (category) {
      case 'games':
        return [
          { value: 'want-to-play', label: 'Want to Play' },
          { value: 'currently-playing', label: 'Playing' },
          { value: 'completed', label: 'Completed' }
        ]
      case 'movies':
        return [
          { value: 'want-to-play', label: 'Want to Watch' },
          { value: 'currently-playing', label: 'Watching' },
          { value: 'completed', label: 'Completed' }
        ]
      case 'music':
        return [
          { value: 'want-to-play', label: 'Want to Listen' },
          { value: 'currently-playing', label: 'Listening' },
          { value: 'completed', label: 'Completed' }
        ]
      case 'books':
        return [
          { value: 'want-to-play', label: 'Want to Read' },
          { value: 'currently-playing', label: 'Reading' },
          { value: 'completed', label: 'Completed' }
        ]
      default:
        return [
          { value: 'want-to-play', label: 'Want to Play' },
          { value: 'currently-playing', label: 'Playing' },
          { value: 'completed', label: 'Completed' }
        ]
    }
  }

  // Vérifier si un item est dans la bibliothèque
  const getLibraryItem = (resultId: string): LibraryItem | undefined => {
    return safeLibrary.find((libItem: LibraryItem) => {
      if (!libItem?.id) return false
      return idsMatch(libItem.id, resultId)
    })
  }

  // Obtenir le label d'affichage du statut
  const getStatusDisplayLabel = (status: MediaStatus, category: string): string => {
    const options = getStatusOptions(category)
    const option = options.find(opt => opt.value === status)
    return option ? option.label : 'Added'
  }

  // Sélection de statut avec feedback
  const handleStatusSelect = (result: SearchResult, status: MediaStatus) => {
    console.log('✅ [SearchModal] Adding to library:', result.title, 'with status:', status)
    
    setSelectedStatus(status)
    
    setTimeout(() => {
      setFadeOutPopup(result.id)
      setTimeout(() => {
        setShowStatusPopup(null)
        setFadeOutPopup(null)
        setSelectedStatus(null)
      }, 300)
    }, 800)

    setAddingItem(result.id)
    onAddToLibrary(result, status)
  }

  // Navigation au clavier
  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (!results.length) return

    switch (e.key) {
      case 'ArrowDown':
        e.preventDefault()
        setSelectedIndex(prev => Math.min(prev + 1, results.length - 1))
        break
      case 'ArrowUp':
        e.preventDefault()
        setSelectedIndex(prev => Math.max(prev - 1, -1))
        break
      case 'Enter':
        e.preventDefault()
        if (selectedIndex >= 0) {
          handleSelectResult(results[selectedIndex])
        }
        break
      case 'Escape':
        e.preventDefault()
        onClose()
        break
    }
  }

  // Défilement de l'élément sélectionné
  useEffect(() => {
    if (selectedIndex >= 0 && resultsRef.current) {
      const selectedElement = resultsRef.current.children[selectedIndex] as HTMLElement
      if (selectedElement) {
        selectedElement.scrollIntoView({ block: 'nearest', behavior: 'smooth' })
      }
    }
  }, [selectedIndex])

  // Sélection d'un résultat
  const handleSelectResult = (result: SearchResult) => {
    console.log('🎯 [SearchModal] Opening detail for:', result.title, 'Category:', result.category)
    
    if (result.category === 'games' && onOpenGameDetail) {
      onOpenGameDetail(result.id.replace('game-', ''))
      onClose()
    } else if (result.category === 'movies' && onOpenMovieDetail) {
      onOpenMovieDetail(result.id.replace('movie-', ''))
      onClose()
    } else if (result.category === 'books' && onOpenBookDetail) {
      onOpenBookDetail(result.id.replace('book-', ''))
      onClose()
    } else if (result.category === 'music' && onOpenMusicDetail) {
      onOpenMusicDetail(result.id.replace('music-', ''))
      onClose()
    } else {
      onAddToLibrary(result, 'want-to-play')
      onClose()
    }
  }

  // Informations de catégorie
  const getCategoryInfo = (category: string) => {
    switch (category) {
      case 'games': return { color: 'bg-green-100 text-green-700 border-green-200', icon: '🎮' }
      case 'movies': return { color: 'bg-blue-100 text-blue-700 border-blue-200', icon: '🎬' }
      case 'music': return { color: 'bg-purple-100 text-purple-700 border-purple-200', icon: '🎵' }
      case 'books': return { color: 'bg-orange-100 text-orange-700 border-orange-200', icon: '📚' }
      default: return { color: 'bg-gray-100 text-gray-700 border-gray-200', icon: '📄' }
    }
  }

  // Gestion du feedback d'ajout
  useEffect(() => {
    if (addingItem) {
      const checkLibrary = () => {
        const isInLibrary = safeLibrary.some((item: LibraryItem) => {
          if (!item?.id) return false
          return idsMatch(item.id, addingItem)
        })
        
        if (isInLibrary) {
          setAddingItem(null)
          setJustAddedItems(prev => new Set([...prev, addingItem]))
          
          setTimeout(() => {
            setJustAddedItems(prev => {
              const newSet = new Set(prev)
              newSet.delete(addingItem)
              return newSet
            })
          }, 3000)
        }
      }
      
      checkLibrary()
      
      const timeoutId = setTimeout(() => {
        setAddingItem(null)
        setJustAddedItems(prev => new Set([...prev, addingItem]))
        
        setTimeout(() => {
          setJustAddedItems(prev => {
            const newSet = new Set(prev)
            newSet.delete(addingItem)
            return newSet
          })
        }, 2000)
      }, 5000)
      
      return () => clearTimeout(timeoutId)
    }
  }, [safeLibrary, addingItem])

  if (!isOpen) return null

  return (
    <div className="fixed inset-0 bg-black/20 backdrop-blur-sm z-50 flex items-start justify-center pt-16 px-4">
      <div className="bg-white rounded-xl w-full max-w-2xl max-h-[85vh] overflow-hidden shadow-2xl border border-gray-200">
        {/* Header */}
        <div className="flex items-center p-4 border-b border-gray-100">
          <Search className="text-gray-400 mr-3 flex-shrink-0" size={20} />
          <input
            ref={inputRef}
            type="text"
            placeholder="Search games, movies, TV shows, music, books..."
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            onKeyDown={handleKeyDown}
            className="flex-1 bg-transparent text-gray-900 placeholder-gray-500 outline-none text-lg"
          />
          {loading && <Loader2 className="animate-spin text-gray-400 mr-3" size={16} />}
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 ml-3 p-1 rounded-lg hover:bg-gray-100 transition-colors"
          >
            <X size={20} />
          </button>
        </div>

        {/* Filtres de catégorie */}
        <div className="flex space-x-2 p-4 border-b border-gray-100 overflow-x-auto">
          {[
            { key: 'all', label: 'All' },
            { key: 'games', label: 'Games' },
            { key: 'movies', label: 'Movies & TV' },
            { key: 'music', label: 'Music' },
            { key: 'books', label: 'Books' }
          ].map(({ key, label }) => (
            <button
              key={key}
              onClick={() => setActiveCategory(key)}
              className={`px-4 py-2 rounded-lg text-sm font-medium transition-all whitespace-nowrap border ${
                activeCategory === key
                  ? 'bg-blue-600 text-white border-blue-600 shadow-sm'
                  : 'bg-gray-50 text-gray-700 hover:bg-gray-100 border-gray-200'
              }`}
            >
              {label}
            </button>
          ))}
        </div>

        {/* Résultats */}
        <div className="max-h-96 overflow-y-auto" ref={resultsRef}>
          {/* État d'erreur */}
          {error && (
            <div className="flex items-center justify-center py-8 px-4">
              <div className="text-center">
                <WifiOff className="mx-auto text-gray-400 mb-2" size={24} />
                <p className="text-red-600 text-sm">{error}</p>
                <button
                  onClick={() => performSearch(query, activeCategory)}
                  className="mt-2 text-blue-600 hover:text-blue-700 text-sm underline"
                >
                  Try again
                </button>
              </div>
            </div>
          )}

          {/* État de chargement */}
          {loading && !error && (
            <div className="flex items-center justify-center py-8">
              <div className="flex items-center space-x-2 text-gray-600">
                <Loader2 className="animate-spin" size={20} />
                <span>Searching{isMobile() ? ' (mobile optimized)' : ''}...</span>
              </div>
            </div>
          )}

          {/* Aucun résultat */}
          {!loading && !error && query.length >= 2 && results.length === 0 && (
            <div className="text-center py-8 text-gray-600">
              <Search className="mx-auto mb-2" size={24} />
              <p>No results found for "<span className="text-gray-900 font-medium">{query}</span>"</p>
              <p className="text-sm mt-1">Try different keywords or check spelling</p>
            </div>
          )}

          {/* Liste des résultats OPTIMISÉE MOBILE */}
          {!loading && !error && results.length > 0 && (
            <div className="p-4 space-y-3">
              {results.map((result, index) => {
                const categoryInfo = getCategoryInfo(result.category)
                const isSelected = index === selectedIndex
                const libraryItem = getLibraryItem(result.id)
                const isInLibrary = !!libraryItem
                const isAdding = addingItem === result.id
                const wasJustAdded = justAddedItems.has(result.id)
                const creator = getCreator(result)
                const isRecent = result.year >= new Date().getFullYear()
                
                return (
                  <div
                    key={result.id}
                    className={`flex items-start space-x-3 p-4 rounded-xl transition-all cursor-pointer border ${
                      isSelected 
                        ? 'bg-blue-50 border-blue-200' 
                        : 'hover:bg-gray-50 border-transparent'
                    }`}
                    onClick={() => handleSelectResult(result)}
                  >
                    {/* Image plus grande pour mobile */}
                    <div className="w-16 h-16 rounded-xl bg-gray-100 flex-shrink-0 overflow-hidden border border-gray-200 shadow-sm">
                      {result.image ? (
                        <img
                          src={result.image}
                          alt={result.title}
                          className="w-full h-full object-cover"
                          onError={(e) => {
                            (e.target as HTMLImageElement).style.display = 'none';
                            (e.target as HTMLImageElement).nextElementSibling?.classList.remove('hidden')
                          }}
                        />
                      ) : null}
                      <div className={`w-full h-full flex items-center justify-center text-xl ${result.image ? 'hidden' : ''}`}>
                        {categoryInfo.icon}
                      </div>
                    </div>

                    {/* Contenu avec titres complets */}
                    <div className="flex-1 min-w-0 space-y-2">
                      {/* Titre complet sans truncate */}
                      <div className="space-y-1">
                        <h3 className="text-gray-900 font-semibold text-base leading-tight">
                          {result.title}
                          {result.isSeries && (
                            <span className="ml-2 text-purple-600 text-sm"> • TV Series</span>
                          )}
                          {isRecent && (
                            <span className="ml-2 bg-green-100 text-green-700 px-2 py-0.5 rounded-full text-xs font-medium">🔥 NEW</span>
                          )}
                        </h3>
                        
                        {/* Créateur complet sans truncate */}
                        <p className="text-gray-600 text-sm font-medium leading-tight" title={creator}>
                          {creator}
                        </p>
                      </div>
                      
                      {/* Meta informations sur une ligne */}
                      <div className="flex items-center justify-between">
                        <div className="flex items-center space-x-3 text-xs text-gray-500">
                          <span className={`px-2 py-1 rounded-full text-xs font-medium border ${categoryInfo.color} flex-shrink-0`}>
                            {result.category === 'movies' ? (result.isSeries ? 'TV' : 'Film') : result.category}
                          </span>
                          
                          <span className={isRecent ? 'font-semibold text-green-600' : result.year >= 2020 ? 'font-medium text-blue-600' : ''}>
                            {result.year}
                          </span>
                          
                          {result.genre && (
                            <>
                              <span>•</span>
                              <span className="truncate max-w-20">{result.genre}</span>
                            </>
                          )}
                          
                          {result.rating && result.rating > 0 && (
                            <>
                              <span>•</span>
                              <div className="flex items-center">
                                <Star size={12} className="text-yellow-500 mr-1" />
                                <span>{result.rating}</span>
                              </div>
                            </>
                          )}
                          
                          {result.isSeries && result.totalSeasons && (
                            <>
                              <span>•</span>
                              <span>{result.totalSeasons} season{result.totalSeasons > 1 ? 's' : ''}</span>
                            </>
                          )}
                        </div>
                      </div>

                      {/* Boutons d'action repositionnés */}
                      <div className="flex justify-end">
                        {(isInLibrary || wasJustAdded) && !isAdding ? (
                          <div className="flex items-center space-x-2 bg-green-50 border border-green-200 text-green-700 px-3 py-2 rounded-lg text-sm font-medium">
                            <Check size={14} />
                            <span>{getStatusDisplayLabel(libraryItem?.status || 'completed', result.category)}</span>
                          </div>
                        ) : isAdding ? (
                          <div className="bg-green-600 text-white px-4 py-2 rounded-lg text-sm font-medium flex items-center space-x-2">
                            <Loader2 className="animate-spin" size={14} />
                            <span>Adding...</span>
                          </div>
                        ) : (
                          <div className="relative">
                            <button
                              onClick={(e) => {
                                e.stopPropagation()
                                setShowStatusPopup(result.id)
                              }}
                              className="bg-blue-600/90 hover:bg-blue-600 text-white px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 flex-shrink-0 shadow-sm hover:shadow-md"
                            >
                              Add
                            </button>

                            {showStatusPopup === result.id && (
                              <>
                                <div 
                                  className="fixed inset-0 z-[99998]"
                                  onClick={(e) => {
                                    e.stopPropagation()
                                    setShowStatusPopup(null)
                                  }}
                                />
                                
                                <div 
                                  className={`absolute right-0 top-full mt-2 bg-white/95 backdrop-blur-xl rounded-xl shadow-lg border border-gray-200 py-2 min-w-44 z-[99999] overflow-hidden transition-all duration-300 ${
                                    fadeOutPopup === result.id ? 'opacity-0 scale-95' : 'opacity-100 scale-100'
                                  }`}
                                  onClick={(e) => e.stopPropagation()}
                                >
                                  {getStatusOptions(result.category).map((option) => (
                                    <button
                                      key={option.value}
                                      onClick={(e) => {
                                        e.stopPropagation()
                                        handleStatusSelect(result, option.value)
                                      }}
                                      className={`w-full text-left px-4 py-2.5 text-sm transition-all duration-200 hover:bg-gray-50 border-l-2 border-transparent hover:border-blue-500 flex items-center justify-between ${
                                        selectedStatus === option.value 
                                          ? 'bg-green-50 border-green-500 text-green-700' 
                                          : 'text-gray-700 hover:text-gray-900'
                                      }`}
                                    >
                                      <span className="font-medium transition-colors">
                                        {option.label}
                                      </span>
                                      {selectedStatus === option.value ? (
                                        <Check className="text-green-600" size={14} />
                                      ) : (
                                        <Check className="opacity-0 group-hover:opacity-100 transition-opacity text-green-600" size={14} />
                                      )}
                                    </button>
                                  ))}
                                </div>
                              </>
                            )}
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                )
              })}
            </div>
          )}
        </div>

        {/* Footer hint */}
        {results.length > 0 && (
          <div className="px-4 py-2 border-t border-gray-100 text-xs text-gray-500 flex items-center justify-between">
            <span>Use ↑↓ to navigate, Enter to select{isMobile() ? ' • Mobile optimized' : ''}</span>
            <span>{results.length} result{results.length !== 1 ? 's' : ''}</span>
          </div>
        )}
      </div>
    </div>
  )
}
</file>

</files>
